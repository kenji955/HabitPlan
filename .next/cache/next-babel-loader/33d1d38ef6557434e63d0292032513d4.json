{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\blelm\\\\Desktop\\\\AppCreate\\\\habitPlan\\\\src\\\\components\\\\view\\\\TaskModal.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport Fade from \"@material-ui/core/Fade\";\nimport InputN from \"./InputNormal\";\nimport AppVar from \"./AppVar\";\nimport PatternSwitchList from \"./PatternSwitch\";\nimport { useDispatch } from \"react-redux\";\nimport { taskRegister } from \"../../modules/tasksModule\";\nvar useStyles = makeStyles(function (theme) {\n  return createStyles({\n    modal: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\" // width: \"80%\",\n      // height: \"80%\",\n\n    },\n    paper: {\n      backgroundColor: theme.palette.background.paper,\n      width: \"50%\",\n      height: \"80%\",\n      overflowY: \"scroll\",\n      border: \"2px solid #000\",\n      boxShadow: theme.shadows[5],\n      padding: theme.spacing(2, 4, 3)\n    }\n  });\n});\nvar contentsList = [{\n  label: \"if-thenプランニング\",\n  value: \"\"\n}, {\n  label: \"習慣の積み上げ\",\n  value: \"\"\n}, {\n  label: \"パターン\",\n  value: \"\"\n}, {\n  label: \"気が進まないとき\",\n  value: \"\"\n}, {\n  label: \"長期的に見返りのある習慣の即時的な楽しみ\",\n  value: \"\"\n}, {\n  label: \"目標\",\n  value: \"\"\n}, {\n  label: \"守れなかった時の罰則\",\n  value: \"\"\n}, {\n  label: \"レベル\",\n  value: \"\"\n}, {\n  label: \"避けることで得られるメリット\",\n  value: \"\"\n}, {\n  label: \"見返りのない習慣に対する即時的な痛み\",\n  value: \"\"\n}];\nexport default function TaskModal(props) {\n  _s();\n\n  var _this = this;\n\n  var classes = useStyles(); // const [open, setOpen] = React.useState(false);\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      checked = _React$useState2[0],\n      setChecked = _React$useState2[1];\n\n  if (props.task) {\n    var newChecked = _toConsumableArray(checked);\n\n    props.task.patternInfo.map(function (content) {\n      newChecked.push(content.patternID);\n    });\n    setChecked(newChecked);\n  }\n\n  var dispatch = useDispatch(); // 配列を作って項目一覧を作るなら、その配列を使って以下の変数の初期設定もやりたいところ\n  // 最終的には項目一覧もReduxで管理したい。それをタスク一覧の右上に表示した設定ボタンから開くモーダルでONOFFを設定することで、タスク詳細画面で使う項目を選べる。新規登録時もONになっている項目が表示される\n  // タスク詳細画面でプラスボタンを押したら項目を増やせる。それも項目一覧に保管される。\n  // const defaultTask: newTasksType = { [\"追加\"]: \"追加\" };\n\n  var _React$useState3 = React.useState(contentsList),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      contents = _React$useState4[0],\n      setContents = _React$useState4[1]; // let newTasks:{[content: string]: string};\n  // const handleOpen = () => {\n  //     props.setOpen(props.index);\n  //     console.log(\"props.index\" + props.index);\n  //     console.log(\"props.open\" + props.open);\n  // };\n\n\n  var handleClose = function handleClose() {\n    props.setOpen(9999);\n  };\n\n  var handleRegister = function handleRegister() {\n    var details;\n    contents.map(function (content, index) {\n      details = _objectSpread(_objectSpread({}, details), {}, _defineProperty({}, content.label, content.value));\n    });\n    var patternInfo;\n    checked.map(function (content) {\n      var regiterPatterninfo = {\n        patternID: content,\n        order: 1\n      };\n      patternInfo.push(regiterPatterninfo); //  = {\n      //     ...patternInfo,\n      //     regiterPatterninfo,\n      // };\n    });\n    var newTasks = {\n      detail: details,\n      patternInfo: patternInfo\n    }; // ここで編集\n\n    dispatch(taskRegister(newTasks));\n    props.setOpen(9999);\n  }; // ここは配列で管理してmapで表示したいところ\n  // task型の変数を用意して、それに値を格納する\n  // 新規だったら登録、すでにある項目であれば更新する。\n\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }\n  }, __jsx(Modal, {\n    \"aria-labelledby\": \"transition-modal-title\",\n    \"aria-describedby\": \"transition-modal-description\",\n    className: classes.modal,\n    open: props.index == props.open,\n    onClose: handleClose,\n    closeAfterTransition: true,\n    BackdropComponent: Backdrop,\n    BackdropProps: {\n      timeout: 500\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }\n  }, __jsx(Fade, {\n    \"in\": props.index == props.open,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 17\n    }\n  }, __jsx(\"div\", {\n    className: classes.paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 21\n    }\n  }, __jsx(AppVar, {\n    handleRegister: handleRegister,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 25\n    }\n  }), __jsx(\"h2\", {\n    id: \"transition-modal-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 25\n    }\n  }, \"\\u30BF\\u30B9\\u30AF\\u8A73\\u7D30\\u753B\\u9762\", props.index + 1), __jsx(\"p\", {\n    id: \"transition-modal-description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 25\n    }\n  }, \"react-transition-group animates me.\"), __jsx(PatternSwitchList, {\n    checked: checked,\n    setChecked: setChecked,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 25\n    }\n  }), contents.map(function (content, index) {\n    return __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 33\n      }\n    }, __jsx(InputN // label=\"if-thenプランニング\"\n    , {\n      key: content.label + '_' + index,\n      label: content.label,\n      required: false,\n      index: props.index,\n      contentIndex: index,\n      contents: contents,\n      setContents: setContents,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 37\n      }\n    }), __jsx(\"br\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 37\n      }\n    }));\n  })))));\n}\n\n_s(TaskModal, \"LjFBNSzbFv1qCwxiDxqvmyTL8Xo=\", false, function () {\n  return [useStyles, useDispatch];\n});\n\n_c = TaskModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskModal\");","map":{"version":3,"sources":["C:/Users/blelm/Desktop/AppCreate/habitPlan/src/components/view/TaskModal.tsx"],"names":["React","makeStyles","createStyles","Modal","Backdrop","Fade","InputN","AppVar","PatternSwitchList","useDispatch","taskRegister","useStyles","theme","modal","display","alignItems","justifyContent","paper","backgroundColor","palette","background","width","height","overflowY","border","boxShadow","shadows","padding","spacing","contentsList","label","value","TaskModal","props","classes","useState","checked","setChecked","task","newChecked","patternInfo","map","content","push","patternID","dispatch","contents","setContents","handleClose","setOpen","handleRegister","details","index","regiterPatterninfo","order","newTasks","detail","open","timeout"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAA4BC,YAA5B,QAAgD,0BAAhD;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAIA,OAAOC,iBAAP,MAA8B,iBAA9B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,YAAT,QAA6B,2BAA7B;AAEA,IAAMC,SAAS,GAAGV,UAAU,CAAC,UAACW,KAAD;AAAA,SACzBV,YAAY,CAAC;AACTW,IAAAA,KAAK,EAAE;AACHC,MAAAA,OAAO,EAAE,MADN;AAEHC,MAAAA,UAAU,EAAE,QAFT;AAGHC,MAAAA,cAAc,EAAE,QAHb,CAIH;AACA;;AALG,KADE;AAQTC,IAAAA,KAAK,EAAE;AACHC,MAAAA,eAAe,EAAEN,KAAK,CAACO,OAAN,CAAcC,UAAd,CAAyBH,KADvC;AAEHI,MAAAA,KAAK,EAAE,KAFJ;AAGHC,MAAAA,MAAM,EAAE,KAHL;AAIHC,MAAAA,SAAS,EAAE,QAJR;AAKHC,MAAAA,MAAM,EAAE,gBALL;AAMHC,MAAAA,SAAS,EAAEb,KAAK,CAACc,OAAN,CAAc,CAAd,CANR;AAOHC,MAAAA,OAAO,EAAEf,KAAK,CAACgB,OAAN,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB;AAPN;AARE,GAAD,CADa;AAAA,CAAD,CAA5B;AAwBA,IAAMC,YAAY,GAAG,CACjB;AACIC,EAAAA,KAAK,EAAE,eADX;AAEIC,EAAAA,KAAK,EAAE;AAFX,CADiB,EAKjB;AACID,EAAAA,KAAK,EAAE,SADX;AAEIC,EAAAA,KAAK,EAAE;AAFX,CALiB,EASjB;AACID,EAAAA,KAAK,EAAE,MADX;AAEIC,EAAAA,KAAK,EAAE;AAFX,CATiB,EAajB;AACID,EAAAA,KAAK,EAAE,UADX;AAEIC,EAAAA,KAAK,EAAE;AAFX,CAbiB,EAiBjB;AACID,EAAAA,KAAK,EAAE,sBADX;AAEIC,EAAAA,KAAK,EAAE;AAFX,CAjBiB,EAqBjB;AACID,EAAAA,KAAK,EAAE,IADX;AAEIC,EAAAA,KAAK,EAAE;AAFX,CArBiB,EAyBjB;AACID,EAAAA,KAAK,EAAE,YADX;AAEIC,EAAAA,KAAK,EAAE;AAFX,CAzBiB,EA6BjB;AACID,EAAAA,KAAK,EAAE,KADX;AAEIC,EAAAA,KAAK,EAAE;AAFX,CA7BiB,EAiCjB;AACID,EAAAA,KAAK,EAAE,gBADX;AAEIC,EAAAA,KAAK,EAAE;AAFX,CAjCiB,EAqCjB;AACID,EAAAA,KAAK,EAAE,oBADX;AAEIC,EAAAA,KAAK,EAAE;AAFX,CArCiB,CAArB;AA2CA,eAAe,SAASC,SAAT,CAAmBC,KAAnB,EAA+B;AAAA;;AAAA;;AAC1C,MAAMC,OAAO,GAAGvB,SAAS,EAAzB,CAD0C,CAE1C;;AAF0C,wBAGZX,KAAK,CAACmC,QAAN,CAAyB,EAAzB,CAHY;AAAA;AAAA,MAGnCC,OAHmC;AAAA,MAG1BC,UAH0B;;AAI1C,MAAIJ,KAAK,CAACK,IAAV,EAAgB;AACZ,QAAMC,UAAU,sBAAOH,OAAP,CAAhB;;AACAH,IAAAA,KAAK,CAACK,IAAN,CAAWE,WAAX,CAAuBC,GAAvB,CACI,UAACC,OAAD,EAAmD;AAC/CH,MAAAA,UAAU,CAACI,IAAX,CAAgBD,OAAO,CAACE,SAAxB;AACH,KAHL;AAKAP,IAAAA,UAAU,CAACE,UAAD,CAAV;AACH;;AACD,MAAMM,QAAQ,GAAGpC,WAAW,EAA5B,CAb0C,CAc1C;AACA;AACA;AACA;;AAjB0C,yBAkBVT,KAAK,CAACmC,QAAN,CAAeN,YAAf,CAlBU;AAAA;AAAA,MAkBnCiB,QAlBmC;AAAA,MAkBzBC,WAlByB,wBAoB1C;AAEA;AACA;AACA;AACA;AACA;;;AAEA,MAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AACtBf,IAAAA,KAAK,CAACgB,OAAN,CAAc,IAAd;AACH,GAFD;;AAIA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AACzB,QAAIC,OAAJ;AAGAL,IAAAA,QAAQ,CAACL,GAAT,CAAa,UAACC,OAAD,EAAUU,KAAV,EAAoB;AAC7BD,MAAAA,OAAO,mCACAA,OADA,2BAEFT,OAAO,CAACZ,KAFN,EAEcY,OAAO,CAACX,KAFtB,EAAP;AAIH,KALD;AAOA,QAAIS,WAAJ;AAKAJ,IAAAA,OAAO,CAACK,GAAR,CAAY,UAACC,OAAD,EAAa;AACrB,UAAMW,kBAAkB,GAAG;AACvBT,QAAAA,SAAS,EAAEF,OADY;AAEvBY,QAAAA,KAAK,EAAE;AAFgB,OAA3B;AAIAd,MAAAA,WAAW,CAACG,IAAZ,CAAiBU,kBAAjB,EALqB,CAMrB;AACA;AACA;AACA;AACH,KAVD;AAYA,QAAIE,QAAe,GAAG;AAClBC,MAAAA,MAAM,EAAEL,OADU;AAElBX,MAAAA,WAAW,EAAEA;AAFK,KAAtB,CA5ByB,CAiCzB;;AACAK,IAAAA,QAAQ,CAACnC,YAAY,CAAC6C,QAAD,CAAb,CAAR;AAEAtB,IAAAA,KAAK,CAACgB,OAAN,CAAc,IAAd;AACH,GArCD,CAhC0C,CAuE1C;AACA;AACA;;;AACA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAII,MAAC,KAAD;AACI,uBAAgB,wBADpB;AAEI,wBAAiB,8BAFrB;AAGI,IAAA,SAAS,EAAEf,OAAO,CAACrB,KAHvB;AAII,IAAA,IAAI,EAAEoB,KAAK,CAACmB,KAAN,IAAenB,KAAK,CAACwB,IAJ/B;AAKI,IAAA,OAAO,EAAET,WALb;AAMI,IAAA,oBAAoB,MANxB;AAOI,IAAA,iBAAiB,EAAE5C,QAPvB;AAQI,IAAA,aAAa,EAAE;AACXsD,MAAAA,OAAO,EAAE;AADE,KARnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAYI,MAAC,IAAD;AAAM,UAAIzB,KAAK,CAACmB,KAAN,IAAenB,KAAK,CAACwB,IAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAEvB,OAAO,CAACjB,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,MAAD;AAAQ,IAAA,cAAc,EAAEiC,cAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI;AAAI,IAAA,EAAE,EAAC,wBAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDACYjB,KAAK,CAACmB,KAAN,GAAc,CAD1B,CAFJ,EAKI;AAAG,IAAA,EAAE,EAAC,8BAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CALJ,EAUI,MAAC,iBAAD;AACI,IAAA,OAAO,EAAEhB,OADb;AAEI,IAAA,UAAU,EAAEC,UAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVJ,EAcKS,QAAQ,CAACL,GAAT,CAAa,UAACC,OAAD,EAAUU,KAAV,EAAoB;AAC9B,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,MAAD,CACI;AADJ;AAEI,MAAA,GAAG,EAAEV,OAAO,CAACZ,KAAR,GAAc,GAAd,GAAkBsB,KAF3B;AAGI,MAAA,KAAK,EAAEV,OAAO,CAACZ,KAHnB;AAII,MAAA,QAAQ,EAAE,KAJd;AAKI,MAAA,KAAK,EAAEG,KAAK,CAACmB,KALjB;AAMI,MAAA,YAAY,EAAEA,KANlB;AAOI,MAAA,QAAQ,EAAEN,QAPd;AAQI,MAAA,WAAW,EAAEC,WARjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAWI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXJ,CADJ;AAeH,GAhBA,CAdL,CADJ,CAZJ,CAJJ,CADJ;AAsDH;;GAhIuBf,S;UACJrB,S,EAYCF,W;;;KAbGuB,S","sourcesContent":["import React from \"react\";\r\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport Fade from \"@material-ui/core/Fade\";\r\nimport InputN from \"./InputNormal\";\r\nimport AppVar from \"./AppVar\";\r\nimport {\r\n    tasks,\r\n} from \"../../modules/userTasksType\";\r\nimport PatternSwitchList from \"./PatternSwitch\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { taskRegister } from \"../../modules/tasksModule\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        modal: {\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n            // width: \"80%\",\r\n            // height: \"80%\",\r\n        },\r\n        paper: {\r\n            backgroundColor: theme.palette.background.paper,\r\n            width: \"50%\",\r\n            height: \"80%\",\r\n            overflowY: \"scroll\",\r\n            border: \"2px solid #000\",\r\n            boxShadow: theme.shadows[5],\r\n            padding: theme.spacing(2, 4, 3),\r\n        },\r\n    })\r\n);\r\n\r\ntype newTasksType = {\r\n    [content: string]: string;\r\n};\r\nconst contentsList = [\r\n    {\r\n        label: \"if-thenプランニング\",\r\n        value: \"\",\r\n    },\r\n    {\r\n        label: \"習慣の積み上げ\",\r\n        value: \"\",\r\n    },\r\n    {\r\n        label: \"パターン\",\r\n        value: \"\",\r\n    },\r\n    {\r\n        label: \"気が進まないとき\",\r\n        value: \"\",\r\n    },\r\n    {\r\n        label: \"長期的に見返りのある習慣の即時的な楽しみ\",\r\n        value: \"\",\r\n    },\r\n    {\r\n        label: \"目標\",\r\n        value: \"\",\r\n    },\r\n    {\r\n        label: \"守れなかった時の罰則\",\r\n        value: \"\",\r\n    },\r\n    {\r\n        label: \"レベル\",\r\n        value: \"\",\r\n    },\r\n    {\r\n        label: \"避けることで得られるメリット\",\r\n        value: \"\",\r\n    },\r\n    {\r\n        label: \"見返りのない習慣に対する即時的な痛み\",\r\n        value: \"\",\r\n    },\r\n];\r\n\r\nexport default function TaskModal(props: any) {\r\n    const classes = useStyles();\r\n    // const [open, setOpen] = React.useState(false);\r\n    const [checked, setChecked] = React.useState<number[]>([]);\r\n    if (props.task) {\r\n        const newChecked = [...checked];\r\n        props.task.patternInfo.map(\r\n            (content: { patternID: number; order: number }) => {\r\n                newChecked.push(content.patternID);\r\n            }\r\n        );\r\n        setChecked(newChecked);\r\n    }\r\n    const dispatch = useDispatch();\r\n    // 配列を作って項目一覧を作るなら、その配列を使って以下の変数の初期設定もやりたいところ\r\n    // 最終的には項目一覧もReduxで管理したい。それをタスク一覧の右上に表示した設定ボタンから開くモーダルでONOFFを設定することで、タスク詳細画面で使う項目を選べる。新規登録時もONになっている項目が表示される\r\n    // タスク詳細画面でプラスボタンを押したら項目を増やせる。それも項目一覧に保管される。\r\n    // const defaultTask: newTasksType = { [\"追加\"]: \"追加\" };\r\n    const [contents, setContents] = React.useState(contentsList);\r\n\r\n    // let newTasks:{[content: string]: string};\r\n\r\n    // const handleOpen = () => {\r\n    //     props.setOpen(props.index);\r\n    //     console.log(\"props.index\" + props.index);\r\n    //     console.log(\"props.open\" + props.open);\r\n    // };\r\n\r\n    const handleClose = () => {\r\n        props.setOpen(9999);\r\n    };\r\n\r\n    const handleRegister = () => {\r\n        let details: {\r\n            [content: string]: string;\r\n        };\r\n        contents.map((content, index) => {\r\n            details = {\r\n                ...details,\r\n                [content.label]: content.value,\r\n            };\r\n        });\r\n\r\n        let patternInfo: {\r\n            patternID: number;\r\n            order: number;\r\n        }[];\r\n\r\n        checked.map((content) => {\r\n            const regiterPatterninfo = {\r\n                patternID: content,\r\n                order: 1,\r\n            };\r\n            patternInfo.push(regiterPatterninfo);\r\n            //  = {\r\n            //     ...patternInfo,\r\n            //     regiterPatterninfo,\r\n            // };\r\n        });\r\n\r\n        let newTasks: tasks = {\r\n            detail: details,\r\n            patternInfo: patternInfo,\r\n        };\r\n\r\n        // ここで編集\r\n        dispatch(taskRegister(newTasks));\r\n\r\n        props.setOpen(9999);\r\n    };\r\n\r\n    // ここは配列で管理してmapで表示したいところ\r\n    // task型の変数を用意して、それに値を格納する\r\n    // 新規だったら登録、すでにある項目であれば更新する。\r\n    return (\r\n        <div>\r\n            {/* <button type=\"button\" onClick={handleOpen}>\r\n                react-transition-group\r\n            </button> */}\r\n            <Modal\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className={classes.modal}\r\n                open={props.index == props.open}\r\n                onClose={handleClose}\r\n                closeAfterTransition\r\n                BackdropComponent={Backdrop}\r\n                BackdropProps={{\r\n                    timeout: 500,\r\n                }}\r\n            >\r\n                <Fade in={props.index == props.open}>\r\n                    <div className={classes.paper}>\r\n                        <AppVar handleRegister={handleRegister} />\r\n                        <h2 id=\"transition-modal-title\">\r\n                            タスク詳細画面{props.index + 1}\r\n                        </h2>\r\n                        <p id=\"transition-modal-description\">\r\n                            react-transition-group animates me.\r\n                        </p>\r\n                        {/* ここを要修正。パターンは選択式ではいけない。複数登録する可能性があるため。登録済み以外のリストをfliterで作成して表示、とかかな。 */}\r\n                        {/* <SimpleSelect choice={choice} setChoice={setChoice} /> */}\r\n                        <PatternSwitchList\r\n                            checked={checked}\r\n                            setChecked={setChecked}\r\n                        />\r\n                        {contents.map((content, index) => {\r\n                            return (\r\n                                <div>\r\n                                    <InputN\r\n                                        // label=\"if-thenプランニング\"\r\n                                        key={content.label+'_'+index}\r\n                                        label={content.label}\r\n                                        required={false}\r\n                                        index={props.index}\r\n                                        contentIndex={index}\r\n                                        contents={contents}\r\n                                        setContents={setContents}\r\n                                    />\r\n                                    <br></br>\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                </Fade>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}