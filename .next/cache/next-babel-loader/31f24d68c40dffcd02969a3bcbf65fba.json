{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\blelm\\\\Desktop\\\\AppCreate\\\\habitPlan\\\\src\\\\components\\\\view\\\\TaskList.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CommentIcon from \"@material-ui/icons/Comment\";\nimport TaskModal from \"./TaskModal\";\nimport { useSelector } from \"react-redux\";\nvar useStyles = makeStyles(function (theme) {\n  return createStyles({\n    rootss: {\n      width: \"100%\",\n      maxWidth: 720,\n      margin: \"auto\",\n      backgroundColor: theme.palette.background.paper\n    }\n  });\n});\nexport default function CheckboxList() {\n  _s();\n\n  var _this = this;\n\n  var classes = useStyles();\n\n  var _React$useState = React.useState([0]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      checked = _React$useState2[0],\n      setChecked = _React$useState2[1];\n\n  var _React$useState3 = React.useState(9999),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      open = _React$useState4[0],\n      setOpen = _React$useState4[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.tasks;\n  }),\n      userTaskInfo = _useSelector.userTaskInfo;\n\n  var handleToggle = function handleToggle(value) {\n    return function () {\n      var currentIndex = checked.indexOf(value);\n\n      var newChecked = _toConsumableArray(checked);\n\n      if (currentIndex === -1) {\n        newChecked.push(value);\n      } else {\n        newChecked.splice(currentIndex, 1);\n      }\n\n      setOpen(value);\n      console.log(\"open:\" + open);\n      setChecked(newChecked);\n    };\n  };\n\n  return __jsx(List, {\n    className: classes.rootss,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, userTaskInfo.tasks.map(function (task, index) {\n    var labelId = \"checkbox-list-label-\".concat(task.detail[\"testDetail1\"]);\n    return __jsx(ListItem, {\n      key: task.patternInfo[0].order + \":\" + task.patternInfo[0].patternID,\n      role: undefined,\n      dense: true,\n      button: true,\n      onClick: handleToggle(index),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }\n    }, __jsx(ListItemText, {\n      id: labelId,\n      primary: \"Line item \".concat(index + 1, \" \").concat(task.detail[\"testDetail1\"], \" \").concat(task.detail[\"testDetail2\"]),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 25\n      }\n    }), __jsx(ListItemSecondaryAction, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 25\n      }\n    }, __jsx(TaskModal, {\n      open: open,\n      setOpen: setOpen,\n      task: task,\n      index: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 29\n      }\n    }), __jsx(IconButton, {\n      edge: \"end\",\n      \"aria-label\": \"comments\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 29\n      }\n    }, __jsx(CommentIcon, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 33\n      }\n    }))));\n  }));\n}\n\n_s(CheckboxList, \"TlJnb2ZfwzQk4V+3F0kZEMNGJNo=\", false, function () {\n  return [useStyles, useSelector];\n});\n\n_c = CheckboxList;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckboxList\");","map":{"version":3,"sources":["C:/Users/blelm/Desktop/AppCreate/habitPlan/src/components/view/TaskList.tsx"],"names":["React","createStyles","makeStyles","List","ListItem","ListItemSecondaryAction","ListItemText","IconButton","CommentIcon","TaskModal","useSelector","useStyles","theme","rootss","width","maxWidth","margin","backgroundColor","palette","background","paper","CheckboxList","classes","useState","checked","setChecked","open","setOpen","state","tasks","userTaskInfo","handleToggle","value","currentIndex","indexOf","newChecked","push","splice","console","log","map","task","index","labelId","detail","patternInfo","order","patternID","undefined"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Fade from \"@material-ui/core/Fade\";\r\nimport CommentIcon from \"@material-ui/icons/Comment\";\r\n\r\nimport TaskModal from \"./TaskModal\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../modules/rootReducer\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        rootss: {\r\n            width: \"100%\",\r\n            maxWidth: 720,\r\n            margin: \"auto\",\r\n            backgroundColor: theme.palette.background.paper,\r\n        },\r\n    })\r\n);\r\n\r\nexport default function CheckboxList() {\r\n    const classes = useStyles();\r\n    const [checked, setChecked] = React.useState([0]);\r\n    const [open, setOpen] = React.useState(9999);\r\n    const { userTaskInfo } = useSelector((state: RootState) => state.tasks);\r\n\r\n    const handleToggle = (value: number) => () => {\r\n        const currentIndex = checked.indexOf(value);\r\n        const newChecked = [...checked];\r\n\r\n        if (currentIndex === -1) {\r\n            newChecked.push(value);\r\n        } else {\r\n            newChecked.splice(currentIndex, 1);\r\n        }\r\n\r\n        setOpen(value);\r\n        console.log(\"open:\" + open);\r\n        setChecked(newChecked);\r\n    };\r\n\r\n    return (\r\n        <List className={classes.rootss}>\r\n            {/* {[0, 1, 2, 3].map((value) => { */}\r\n            {userTaskInfo.tasks.map((task, index) => {\r\n                const labelId = `checkbox-list-label-${task.detail[\"testDetail1\"]}`;\r\n\r\n                return (\r\n                    <ListItem\r\n                        key={\r\n                            task.patternInfo[0].order +\r\n                            \":\" +\r\n                            task.patternInfo[0].patternID\r\n                        }\r\n                        role={undefined}\r\n                        dense\r\n                        button\r\n                        onClick={handleToggle(index)}\r\n                    >\r\n                        <ListItemText\r\n                            id={labelId}\r\n                            primary={`Line item ${index + 1} ${\r\n                                task.detail[\"testDetail1\"]\r\n                            } ${task.detail[\"testDetail2\"]}`}\r\n                        />\r\n                        <ListItemSecondaryAction>\r\n                            <TaskModal\r\n                                open={open}\r\n                                setOpen={setOpen}\r\n                                task={task}\r\n                                index={index}\r\n                            />\r\n                            <IconButton edge=\"end\" aria-label=\"comments\">\r\n                                {/* <IconButton aria-label=\"comments\"> */}\r\n                                <CommentIcon />\r\n                            </IconButton>\r\n                        </ListItemSecondaryAction>\r\n                    </ListItem>\r\n                );\r\n            })}\r\n        </List>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}