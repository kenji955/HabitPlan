{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  userTaskInfo: {\n    calendar: {\n      [new Date(\"Thu, 22 May 2020 02:00:00\").getFullYear()]: {\n        [new Date(\"Thu, 22 May 2020 02:00:00\").getMonth() + 1]: {\n          [new Date(\"Thu, 22 May 2020 02:00:00\").getDate()]: {\n            PatternId: 1,\n            tasks: [{\n              order: 1,\n              detail1: \"testDetail1 22 1\",\n              detail2: \"testDetail2 22 1\",\n              flug: false\n            }, {\n              order: 2,\n              detail1: \"testDetail1 22 2\",\n              detail2: \"testDetail2 22 2\",\n              flug: false\n            }]\n          },\n          [new Date(\"Thu, 23 May 2020 02:00:00\").getDate()]: {\n            PatternId: 1,\n            tasks: [{\n              order: 1,\n              detail1: \"testDetail1 23 1\",\n              detail2: \"testDetail2 23 1\",\n              flug: false\n            }, {\n              order: 2,\n              detail1: \"testDetail1 23 2\",\n              detail2: \"testDetail2 23 2\",\n              flug: false\n            }]\n          }\n        }\n      }\n    },\n    //             [date: number]: {\n    //                 PatternId: number;\n    //                 tasks: {\n    //                     detail1: string;\n    //                     detail2: string;\n    //                     flug: boolean;\n    //                 }[];\n    //             }[];\n    //         }[];\n    //     }[];\n    // ]\n    // year: new Date(\"Thu, 22 May 2020 02:00:00\").getFullYear(),[{\n    //     month: new Date(\"Thu, 22 May 2020 02:00:00\").getMonth() + 1,[{\n    //         date: new Date(\"Thu, 22 May 2020 02:00:00\").getDate(),[{\n    //             PatternId: 1,\n    //             tasks: [\n    //                 {\n    //                     detail1: \"testDetail1 22 1\",\n    //                     detail2: \"testDetail2 22 1\",\n    //                     flug: false,\n    //                 },\n    //                 {\n    //                     detail1: \"testDetail1 22 2\",\n    //                     detail2: \"testDetail2 22 2\",\n    //                     flug: false,\n    //                 },\n    //             ],\n    //         }]\n    //     }]\n    // }]\n    // {\n    //     year: new Date(\"Thu, 23 May 2020 02:00:00\").getFullYear(),\n    //     month: new Date(\"Thu, 23 May 2020 02:00:00\").getMonth() + 1,\n    //     date: new Date(\"Thu, 23 May 2020 02:00:00\").getDate(),\n    //     PatternId: 2,\n    //     tasks: [\n    //         {\n    //             detail1: \"testDetail1 23 1\",\n    //             detail2: \"testDetail2 23 1\",\n    //             flug: false,\n    //         },\n    //         {\n    //             detail1: \"testDetail1 23 2\",\n    //             detail2: \"testDetail2 23 2\",\n    //             flug: false,\n    //         },\n    //     ],\n    // },\n    pattern: [{\n      patternId: 1,\n      patternName: \"testPattern1\"\n    }, {\n      patternId: 2,\n      patternName: \"testPattern2\"\n    }],\n    tasks: [{\n      detail1: \"testDetail1A\",\n      detail2: \"testDetail2A\",\n      patternInfo: [{\n        patternID: 1,\n        order: 1\n      }]\n    }, {\n      detail1: \"testDetail1B\",\n      detail2: \"testDetail2B\",\n      patternInfo: [{\n        patternID: 1,\n        order: 2\n      }]\n    }, {\n      detail1: \"testDetail1C\",\n      detail2: \"testDetail2C\",\n      patternInfo: [{\n        patternID: 2,\n        order: 1\n      }, {\n        patternID: 1,\n        order: 3\n      }]\n    }, {\n      detail1: \"testDetail1D\",\n      detail2: \"testDetail2D\",\n      patternInfo: [{\n        patternID: 2,\n        order: 2\n      }]\n    }]\n  }\n};\nconst tasksModule = createSlice({\n  name: \"tasks\",\n  initialState,\n  reducers: {\n    init(state, action) {\n      const data = action.payload;\n      console.log(\"init data\");\n      console.log(data); // state = {...data};\n\n      console.log(\"init state.userTaskInfo.calendar 前\"); // console.log(state.userTaskInfo.calendar[0].PatternId);\n\n      state.userTaskInfo = data;\n      console.log(\"init state.userTaskInfo.calendar 後\");\n      console.log(state); // console.log(state.userTaskInfo.calendar[0]);\n    },\n\n    Register(state, action) {\n      const data = action.payload;\n      state = _objectSpread(_objectSpread({}, state), data); // console.log('state');\n      // console.log(state);\n    },\n\n    allDelete(state) {\n      state = initialState;\n      console.log(\"check allDelete\");\n    },\n\n    // DayPlanにてタスクをクリックした際に完了フラグをtrueに変更する処理。引数にて年、月、日、タスクのインデックス番号を受け取っている。\n    taskCheckComplete(state, action) {\n      const index = state.userTaskInfo.calendar[action.payload[0]][action.payload[1]][action.payload[2]].tasks.findIndex(tasks => tasks.order == action.payload[3]);\n      console.log(index);\n      state.userTaskInfo.calendar[action.payload[0]][action.payload[1]][action.payload[2]].tasks[index].flug = !state.userTaskInfo.calendar[action.payload[0]][action.payload[1]][action.payload[2]].tasks[index].flug;\n    },\n\n    // 引数はstateと年、月、日、選択されているパターンIDの4つの数値が格納された配列\n    calendarPatternRegster(state, action) {\n      // stateから選択されているパターンIDが設定されているタスクを抽出する。\n      const choicePatternTasks = state.userTaskInfo.tasks.filter(function (task) {\n        return task.patternInfo.some(task => task.patternID == action.payload[3]);\n      }); // パターンIDに紐付くタスク一覧からカレンダーへの登録情報を抽出する。\n\n      const TodayTasks = choicePatternTasks.map(task => {\n        // パターンが複数登録されているタスクへの対応として、選択されているパターンIDに該当する要素だけを抽出する。\n        const taskPattern = task.patternInfo.filter(function (patternInfo) {\n          return patternInfo.patternID == action.payload[3];\n        }); // 配列のタスクと抽出したパターン情報を整形して返す。\n\n        return {\n          order: taskPattern[0].order,\n          detail1: task.detail1,\n          detail2: task.detail2,\n          flug: false\n        };\n      }); // stateのMonthの連想配列に新しい日付の連想配列を追加する。\n      // 追加情報は引数の日とこれまでの処理で作成したカレンダー登録用情報\n\n      state.userTaskInfo.calendar[action.payload[0]][action.payload[1]] = {\n        [action.payload[2]]: {\n          PatternId: action.payload[3],\n          tasks: TodayTasks\n        }\n      }; // action.payload[3];\n\n      console.log(state.userTaskInfo.calendar[action.payload[0]][action.payload[1]][action.payload[2]]);\n    }\n\n  }\n});\nexport const {\n  init,\n  Register,\n  allDelete,\n  taskCheckComplete,\n  calendarPatternRegster\n} = tasksModule.actions;\nexport default tasksModule;","map":null,"metadata":{},"sourceType":"module"}