{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\blelm\\\\Desktop\\\\AppCreate\\\\habitPlan\\\\src\\\\components\\\\view\\\\PatternSwitch.tsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListSubheader from \"@material-ui/core/ListSubheader\";\nimport Switch from \"@material-ui/core/Switch\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { taskPatternUpdate } from \"../../modules/tasksModule\";\nconst useStyles = makeStyles(theme => createStyles({\n  root: {\n    width: \"100%\",\n    maxWidth: 360,\n    backgroundColor: theme.palette.background.paper\n  }\n}));\nexport default function PatternSwitchList(props) {\n  const classes = useStyles();\n  const {\n    userTaskInfo\n  } = useSelector(state => state.tasks);\n  const dispatch = useDispatch(); // ここでパターンの登録状況を更新する\n\n  const handleToggle = value => () => {\n    const currentIndex = props.checked.indexOf(value);\n    const newChecked = [...props.checked];\n\n    if (currentIndex === -1) {\n      newChecked.push(value);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n\n    props.setChecked(newChecked);\n    console.log('newChecked');\n    console.log(newChecked);\n    const index = props.index;\n\n    if (!props.checkNew) {\n      dispatch(taskPatternUpdate({\n        newChecked,\n        index\n      }));\n    }\n  };\n\n  return __jsx(List, {\n    subheader: __jsx(ListSubheader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 24\n      }\n    }, \"PatternList\"),\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, userTaskInfo.pattern.map(content => {\n    return __jsx(ListItem, {\n      key: content.patternName + '_' + props.checked,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }\n    }, __jsx(ListItemText, {\n      id: content.patternId + \"_\" + content.patternName,\n      primary: content.patternName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 25\n      }\n    }), __jsx(ListItemSecondaryAction, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 25\n      }\n    }, __jsx(Switch, {\n      edge: \"end\",\n      onChange: handleToggle(content.patternId),\n      checked: props.checked.indexOf(content.patternId) !== -1,\n      inputProps: {\n        \"aria-labelledby\": content.patternId + \"_\" + content.patternName\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 29\n      }\n    })));\n  }));\n}","map":{"version":3,"sources":["C:/Users/blelm/Desktop/AppCreate/habitPlan/src/components/view/PatternSwitch.tsx"],"names":["React","makeStyles","createStyles","List","ListItem","ListItemSecondaryAction","ListItemText","ListSubheader","Switch","useDispatch","useSelector","taskPatternUpdate","useStyles","theme","root","width","maxWidth","backgroundColor","palette","background","paper","PatternSwitchList","props","classes","userTaskInfo","state","tasks","dispatch","handleToggle","value","currentIndex","checked","indexOf","newChecked","push","splice","setChecked","console","log","index","checkNew","pattern","map","content","patternName","patternId"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListSubheader from \"@material-ui/core/ListSubheader\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport WifiIcon from \"@material-ui/icons/Wifi\";\r\nimport BluetoothIcon from \"@material-ui/icons/Bluetooth\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../modules/rootReducer\";\r\nimport { taskPatternUpdate } from \"../../modules/tasksModule\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            width: \"100%\",\r\n            maxWidth: 360,\r\n            backgroundColor: theme.palette.background.paper,\r\n        },\r\n    })\r\n);\r\n\r\nexport default function PatternSwitchList(props: { checked: number[], setChecked: React.Dispatch<React.SetStateAction<number[]>>, index: number, checkNew: boolean }) {\r\n    const classes = useStyles();\r\n    const { userTaskInfo } = useSelector((state: RootState) => state.tasks);\r\n    const dispatch = useDispatch();\r\n\r\n    // ここでパターンの登録状況を更新する\r\n    const handleToggle = (value: number) => () => {\r\n        const currentIndex = props.checked.indexOf(value);\r\n        const newChecked = [...props.checked];\r\n\r\n        if (currentIndex === -1) {\r\n            newChecked.push(value);\r\n        } else {\r\n            newChecked.splice(currentIndex, 1);\r\n        }\r\n\r\n        props.setChecked(newChecked);\r\n        console.log('newChecked');\r\n        console.log(newChecked);\r\n        const index = props.index;\r\n        if (!props.checkNew) {\r\n            dispatch(taskPatternUpdate({ newChecked, index }));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <List\r\n            subheader={<ListSubheader>PatternList</ListSubheader>}\r\n            className={classes.root}\r\n        >\r\n            {userTaskInfo.pattern.map((content) => {\r\n                return (\r\n                    <ListItem key={content.patternName + '_' + props.checked}>\r\n                        {/* <ListItemIcon>\r\n                            <WifiIcon />\r\n                        </ListItemIcon> */}\r\n                        <ListItemText\r\n                            id={content.patternId + \"_\" + content.patternName}\r\n                            primary={content.patternName}\r\n                        />\r\n                        <ListItemSecondaryAction>\r\n                            <Switch\r\n                                edge=\"end\"\r\n                                onChange={handleToggle(content.patternId)}\r\n                                checked={props.checked.indexOf(content.patternId) !== -1}\r\n                                inputProps={{\r\n                                    \"aria-labelledby\": content.patternId + \"_\" + content.patternName,\r\n                                }}\r\n                            />\r\n                        </ListItemSecondaryAction>\r\n                    </ListItem>\r\n                );\r\n            })}\r\n        </List>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}