{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { firebase } from \"./firebaseTest\";\nimport { logout } from \"../../../modules/userModule\";\nimport { allDelete } from \"../../../modules/tasksModule\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nconst useReduxFetch = () => {\n  const dispatch = useDispatch();\n  return dispatch;\n}; // ログイン、ログアウトボタン実装\n\n\nexport default function FirebaseAuthComponent() {\n  const loggedin = useFirebaseLogin();\n  const dispatch = useReduxFetch();\n\n  if (!loggedin) {\n    // ログインしていなければログインボタンを表示\n    return __jsx(\"button\", {\n      onClick: () => signInWithPopup()\n    }, \"\\u30ED\\u30B0\\u30A4\\u30F3\");\n  } // ログインしているならログアウトボタンを表示\n\n\n  return __jsx(\"button\", {\n    onClick: () => signOut(dispatch)\n  }, \"\\u30ED\\u30B0\\u30A2\\u30A6\\u30C8\");\n} // ログイン処理\n\nexport const signInWithPopup = () => {\n  // Googleプロバイダオブジェクトのインスタンスを作成\n  const googleAuthProvider = new firebase.auth.GoogleAuthProvider(); // dispatch(login(userIdCheck));\n  // 別タブでログイン画面に飛ばしたいため、signInWithPopupを使う\n  // リダイレクトでログイン画面に飛ばしたい場合はsignInWithRedirectを使う\n\n  firebase.auth().signInWithPopup(googleAuthProvider); // return firebase.auth().signInWithPopup(googleAuthProvider);\n};\nexport const signInWithEmailAndPassword = (email, password) => {\n  console.log(email);\n  console.log(password);\n  firebase.auth().signInWithEmailAndPassword(email, password).catch(function (error) {\n    // Handle Errors here.\n    const errorCode = error.code;\n    console.log(error.code);\n    const errorMessage = error.message;\n    console.log(error.message);\n\n    if (errorCode == 'auth/user-not-found') {\n      firebase.auth().createUserWithEmailAndPassword(email, password);\n    }\n  });\n}; // ログアウト処理\n\nexport const signOut = dispatch => {\n  // signOutを呼び出すだけでOK\n  // const dispatch = useReduxFetch();\n  dispatch(logout());\n  dispatch(allDelete());\n  return firebase.auth().signOut();\n}; // ログインしているかチェックするカスタムフックを作る\n\nconst useFirebaseLogin = () => {\n  // stateでログイン状態を保持\n  const {\n    0: loggedin,\n    1: setLoggedin\n  } = useState(false);\n  const dispatch = useReduxFetch();\n  const {\n    userTaskInfo\n  } = useSelector(state => state.tasks);\n  useEffect(() => {\n    // 現在ログインしているユーザを取得\n    firebase.auth().onAuthStateChanged(user => {\n      // ユーザ情報が取れればログイン状態\n      let userIdCheck;\n      console.log(\"FAC !!user\");\n      console.log(!!user);\n\n      if (!!user) {\n        userIdCheck = user.uid; // console.log('data');\n        // console.log(data);\n        // dispatch(init(data));\n\n        console.log(\"FAC userTaskInfo.calendar[0].PatternId\"); // console.log(userTaskInfo.calendar[0].PatternId);\n        // これをreduxで管理する\n        // dispatch(login(userIdCheck));\n      }\n\n      setLoggedin(!!user);\n    });\n  }, []); // ログイン情報を返却\n\n  return loggedin;\n};","map":null,"metadata":{},"sourceType":"module"}