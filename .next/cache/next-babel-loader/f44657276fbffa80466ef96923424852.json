{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport InputN from \"./InputNormal\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { taskDetailRegister } from '../../modules/tasksModule';\nconst useStyles = makeStyles(theme => createStyles({\n  root: {\n    flexGrow: 1,\n    position: 'fixed',\n    width: '40%',\n    zIndex: 5\n  },\n  title: {\n    flexGrow: 1\n  }\n}));\nexport default function ButtonAppBar(props) {\n  const classes = useStyles();\n  const {\n    userTaskInfo\n  } = useSelector(state => state.tasks);\n  const dispatch = useDispatch();\n\n  const onChangeHandler = event => {\n    // console.log(event.target.value);\n    // ここでevent.target.valueとラベル(連想配列のキー)を送って処理する。処理も未作成\n    dispatch(taskDetailRegister([event.target.value, 'title', props.index]));\n  };\n\n  let button;\n\n  if (props.checkNew) {\n    button = __jsx(Button, {\n      color: \"inherit\",\n      onClick: props.handleRegister\n    }, \"\\u767B\\u9332\");\n  }\n\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(AppBar, {\n    position: \"static\"\n  }, __jsx(Toolbar, null, __jsx(Typography, {\n    variant: \"h6\",\n    className: classes.title\n  }, __jsx(InputN // label=\"if-thenプランニング\"\n  , {\n    label: 'タスク名',\n    required: false,\n    index: props.index,\n    contentIndex: 0,\n    contents: props.contents,\n    setContents: props.setContents\n  })), props.checkNew ? __jsx(Button, {\n    color: \"inherit\",\n    onClick: props.handleRegister\n  }, \"\\u767B\\u9332\") : null)));\n}","map":null,"metadata":{},"sourceType":"module"}