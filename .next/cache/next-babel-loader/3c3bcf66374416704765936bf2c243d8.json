{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\blelm\\\\Desktop\\\\AppCreate\\\\habitPlan\\\\src\\\\components\\\\test\\\\firebaseTest\\\\getData.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useMemo } from 'react';\nimport { useFetchAllData } from './DBFetch';\n// 認証周りやDB周りで必要なためimportしておく\nimport \"firebase/auth\";\nimport \"firebase/database\";\nimport { useSelector } from \"react-redux\";\nexport default function ListComponent() {\n  _s();\n\n  var _this = this;\n\n  var _useSelector = useSelector(function (state) {\n    return state;\n  }),\n      tasks = _useSelector.tasks; // dataを取ってくる\n\n\n  var _useFetchAllData = useFetchAllData(),\n      data = _useFetchAllData.data; // object形式なので使いやすいように{key, value}形式のリストに変換する\n  // また、データが変わらない限り結果は同じなのでメモ化しておく\n\n\n  var dataList = useMemo(function () {\n    return Object.entries(tasks || {}).map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          value = _ref2[1];\n\n      return {\n        key: key,\n        value: value\n      };\n    });\n  }, [tasks]);\n  return __jsx(\"dl\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 10\n    }\n  }, dataList.map(function (_ref3) {\n    var key = _ref3.key,\n        value = _ref3.value;\n    return __jsx(React.Fragment, {\n      key: \"\".concat(key).concat(value),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 5\n      }\n    }, __jsx(\"dt\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 7\n      }\n    }, \"key: \", key), __jsx(\"dt\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 7\n      }\n    }, \"value: \", value));\n  }));\n}\n\n_s(ListComponent, \"mohTbW5pxxeSAbEfY9ZVuKhQ4tk=\", false, function () {\n  return [useSelector, useFetchAllData];\n});\n\n_c = ListComponent;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListComponent\");","map":{"version":3,"sources":["C:/Users/blelm/Desktop/AppCreate/habitPlan/src/components/test/firebaseTest/getData.tsx"],"names":["React","useMemo","useFetchAllData","useSelector","ListComponent","state","tasks","data","dataList","Object","entries","map","key","value"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,SAASC,eAAT,QAAgC,WAAhC;AAEA;AACA,OAAO,eAAP;AACA,OAAO,mBAAP;AAEA,SAASC,WAAT,QAA4B,aAA5B;AAEA,eAAe,SAASC,aAAT,GAAyB;AAAA;;AAAA;;AAAA,qBACpBD,WAAW,CAAC,UAACE,KAAD;AAAA,WAAsBA,KAAtB;AAAA,GAAD,CADS;AAAA,MAC9BC,KAD8B,gBAC9BA,KAD8B,EAEpC;;;AAFoC,yBAGrBJ,eAAe,EAHM;AAAA,MAG9BK,IAH8B,oBAG9BA,IAH8B,EAIpC;AACA;;;AACF,MAAMC,QAAQ,GAAGP,OAAO,CAAC;AAAA,WAAMQ,MAAM,CAACC,OAAP,CAAeJ,KAAK,IAAI,EAAxB,EAA4BK,GAA5B,CAAgC;AAAA;AAAA,UAAEC,GAAF;AAAA,UAAOC,KAAP;;AAAA,aAAmB;AAAED,QAAAA,GAAG,EAAHA,GAAF;AAAOC,QAAAA,KAAK,EAALA;AAAP,OAAnB;AAAA,KAAhC,CAAN;AAAA,GAAD,EAA4E,CAACP,KAAD,CAA5E,CAAxB;AAEA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKE,QAAQ,CAACG,GAAT,CAAa;AAAA,QAAGC,GAAH,SAAGA,GAAH;AAAA,QAAQC,KAAR,SAAQA,KAAR;AAAA,WACvB,MAAC,KAAD,CAAO,QAAP;AAAgB,MAAA,GAAG,YAAKD,GAAL,SAAWC,KAAX,CAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAUD,GAAV,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAYC,KAAZ,CAFF,CADuB;AAAA,GAAb,CAAL,CAAP;AAMD;;GAduBT,a;UACJD,W,EAEDD,e;;;KAHKE,a;AAcvB","sourcesContent":["import React, { useMemo } from 'react';\r\nimport { useFetchAllData } from './DBFetch';\r\nimport firebase from \"firebase/app\";\r\n// 認証周りやDB周りで必要なためimportしておく\r\nimport \"firebase/auth\";\r\nimport \"firebase/database\";\r\nimport { RootState } from '../../../modules/rootReducer';\r\nimport { useSelector } from \"react-redux\";\r\n\r\nexport default function ListComponent() {\r\n  const { tasks } = useSelector((state: RootState) => state)\r\n    // dataを取ってくる\r\n  const { data } = useFetchAllData();\r\n    // object形式なので使いやすいように{key, value}形式のリストに変換する\r\n    // また、データが変わらない限り結果は同じなのでメモ化しておく\r\n  const dataList = useMemo(() => Object.entries(tasks || {}).map(([key, value]) => ({ key, value })), [tasks]);\r\n\r\n  return <dl>{dataList.map(({ key, value }) =>\r\n    <React.Fragment key={`${key}${value}`}>\r\n      <dt>key: {key}</dt>\r\n      <dt>value: {value}</dt>\r\n    </React.Fragment>\r\n  )}</dl>\r\n};"]},"metadata":{},"sourceType":"module"}