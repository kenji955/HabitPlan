{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\blelm\\\\Desktop\\\\AppCreate\\\\habitPlan\\\\src\\\\components\\\\test\\\\firebaseTest\\\\getData.tsx\",\n    _s2 = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useCallback } from \"react\";\nimport { useFetchAllData } from \"./DBFetch\";\n// 認証周りやDB周りで必要なためimportしておく\nimport \"firebase/auth\";\nimport \"firebase/database\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { init } from \"../../../modules/tasksModule\";\nexport default function ListComponent() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  // dataを取ってくる\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      userId = _useSelector.userId;\n\n  var dispatch = useDispatch();\n\n  var _useFetchAllData = useFetchAllData(),\n      data = _useFetchAllData.data;\n\n  if (!!userId) {\n    console.log(\"getData.tsx data\");\n    console.log(data);\n    dispatch(init(data));\n  } // ここでstateを使うならログイン時にDBから取得したデータをReduxに保管する必要がある。\n\n\n  var userTask = useSelector(function (state) {\n    return state.tasks;\n  });\n  useCallback(_s(function () {\n    _s();\n\n    userTask = useSelector(function (state) {\n      return state.tasks;\n    });\n  }, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n    return [useSelector];\n  }), [userId]);\n  console.log(\"userTask\");\n  console.log(userTask); // data ? console.log(data.userTaskInfo) : console.log('noo');\n  // object形式なので使いやすいように{key, value}形式のリストに変換する\n  // また、データが変わらない限り結果は同じなのでメモ化しておく\n  // const dataList = useMemo(() => Object.entries(data || {}).map(([key, value]) => ({ key, value })), [data]);\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 12\n    }\n  }, \"test\"); // return <div>{data.userTaskInfo.calendar[0].PatternId}</div>;\n  // <dl>{dataList.map(({ key, value }) =>\n  //   <React.Fragment key={`${key}${value}`}>\n  //     <dt>key: {key}</dt>\n  //     <dt>value: {value}</dt>\n  //   </React.Fragment>\n  // )}</dl>\n}\n\n_s2(ListComponent, \"OA6Kn2hfoeJvzB2ECDzOX46Aq+A=\", false, function () {\n  return [useSelector, useDispatch, useFetchAllData, useSelector];\n});\n\n_c = ListComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListComponent\");","map":{"version":3,"sources":["C:/Users/blelm/Desktop/AppCreate/habitPlan/src/components/test/firebaseTest/getData.tsx"],"names":["React","useCallback","useFetchAllData","useDispatch","useSelector","init","ListComponent","state","user","userId","dispatch","data","console","log","userTask","tasks"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAA4C,OAA5C;AACA,SAASC,eAAT,QAAgC,WAAhC;AAEA;AACA,OAAO,eAAP;AACA,OAAO,mBAAP;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAGA,SAASC,IAAT,QAAqB,8BAArB;AAEA,eAAe,SAASC,aAAT,GAAyB;AAAA;;AAAA;;AACpC;AADoC,qBAEjBF,WAAW,CAAC,UAACG,KAAD;AAAA,WAAsBA,KAAK,CAACC,IAA5B;AAAA,GAAD,CAFM;AAAA,MAE5BC,MAF4B,gBAE5BA,MAF4B;;AAGpC,MAAMC,QAAQ,GAAGP,WAAW,EAA5B;;AAHoC,yBAInBD,eAAe,EAJI;AAAA,MAI5BS,IAJ4B,oBAI5BA,IAJ4B;;AAKpC,MAAI,CAAC,CAACF,MAAN,EAAc;AACVG,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAD,IAAAA,QAAQ,CAACL,IAAI,CAACM,IAAD,CAAL,CAAR;AACH,GATmC,CAWpC;;;AACA,MAAIG,QAAQ,GAAGV,WAAW,CAAC,UAACG,KAAD;AAAA,WAAsBA,KAAK,CAACQ,KAA5B;AAAA,GAAD,CAA1B;AACAd,EAAAA,WAAW,IAAC,YAAM;AAAA;;AACda,IAAAA,QAAQ,GAAGV,WAAW,CAAC,UAACG,KAAD;AAAA,aAAsBA,KAAK,CAACQ,KAA5B;AAAA,KAAD,CAAtB;AACH,GAFU;AAAA,YACIX,WADJ;AAAA,MAER,CAACK,MAAD,CAFQ,CAAX;AAIAG,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,EAlBoC,CAmBpC;AACA;AACA;AACA;;AAEA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP,CAxBoC,CAyBpC;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;IAhCuBR,a;UAEDF,W,EACFD,W,EACAD,e,EAQFE,W;;;KAZKE,a","sourcesContent":["import React, { useCallback, useMemo } from \"react\";\r\nimport { useFetchAllData } from \"./DBFetch\";\r\nimport firebase from \"firebase/app\";\r\n// 認証周りやDB周りで必要なためimportしておく\r\nimport \"firebase/auth\";\r\nimport \"firebase/database\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../modules/rootReducer\";\r\nimport { userTask } from \"../../../modules/userTasksType\";\r\nimport { init } from \"../../../modules/tasksModule\";\r\n\r\nexport default function ListComponent() {\r\n    // dataを取ってくる\r\n    const { userId } = useSelector((state: RootState) => state.user);\r\n    const dispatch = useDispatch();\r\n    const { data } = useFetchAllData();\r\n    if (!!userId) {\r\n        console.log(\"getData.tsx data\");\r\n        console.log(data);\r\n        dispatch(init(data));\r\n    }\r\n\r\n    // ここでstateを使うならログイン時にDBから取得したデータをReduxに保管する必要がある。\r\n    let userTask = useSelector((state: RootState) => state.tasks);\r\n    useCallback(() => {\r\n        userTask = useSelector((state: RootState) => state.tasks);\r\n    }, [userId]);\r\n\r\n    console.log(\"userTask\");\r\n    console.log(userTask);\r\n    // data ? console.log(data.userTaskInfo) : console.log('noo');\r\n    // object形式なので使いやすいように{key, value}形式のリストに変換する\r\n    // また、データが変わらない限り結果は同じなのでメモ化しておく\r\n    // const dataList = useMemo(() => Object.entries(data || {}).map(([key, value]) => ({ key, value })), [data]);\r\n\r\n    return <div>test</div>;\r\n    // return <div>{data.userTaskInfo.calendar[0].PatternId}</div>;\r\n    // <dl>{dataList.map(({ key, value }) =>\r\n    //   <React.Fragment key={`${key}${value}`}>\r\n    //     <dt>key: {key}</dt>\r\n    //     <dt>value: {value}</dt>\r\n    //   </React.Fragment>\r\n    // )}</dl>\r\n}\r\n"]},"metadata":{},"sourceType":"module"}