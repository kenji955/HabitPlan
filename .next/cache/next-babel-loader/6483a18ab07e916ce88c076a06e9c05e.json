{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\blelm\\\\Desktop\\\\AppCreate\\\\habitPlan\\\\src\\\\components\\\\test\\\\Calendar3.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { calendarPatternRegister } from \"../../modules/tasksModule\";\nimport { RootState } from \"../../modules/rootReducer\";\nimport format from \"date-fns/format\";\nimport getDate from \"date-fns/getDate\";\nimport getDay from \"date-fns/getDay\";\nimport isSameDay from \"date-fns/isSameDay\";\nimport eachDayOfInterval from \"date-fns/eachDayOfInterval\";\nimport endOfWeek from \"date-fns/endOfWeek\";\nimport eachWeekOfInterval from \"date-fns/eachWeekOfInterval\";\nimport addMonths from \"date-fns/addMonths\";\nimport subMonths from \"date-fns/subMonths\";\nimport startOfMonth from \"date-fns/startOfMonth\";\nimport endOfMonth from \"date-fns/endOfMonth\";\nimport isSameMonth from \"date-fns/isSameMonth\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Typography from \"@material-ui/core/Typography\";\nimport blue from \"@material-ui/core/colors/blue\";\nimport pink from \"@material-ui/core/colors/pink\";\nimport red from \"@material-ui/core/colors/red\";\nvar useStyles = makeStyles(function (theme) {\n  return {\n    paper: _defineProperty({\n      margin: theme.spacing(5, 10),\n      padding: theme.spacing(5, 5)\n    }, theme.breakpoints.down('sm'), {\n      width: '100%',\n      // paddingLeft: '240px',\n      margin: 'auto',\n      padding: 0\n    }),\n    yearmonth: {\n      margin: theme.spacing(2, 0, 1, 0)\n    },\n    tableHead: {\n      color: theme.palette.secondary.contrastText,\n      backgroundColor: theme.palette.secondary.light\n    }\n  };\n});\nvar useCalendarCellStyles = makeStyles(function (theme) {\n  return {\n    calendarCell: {\n      color: function color(_ref) {\n        var wday = _ref.wday,\n            isTargetMonth = _ref.isTargetMonth;\n\n        if (isTargetMonth) {\n          switch (wday) {\n            case 0:\n              // Sunday\n              return red[500];\n\n            case 6:\n              // Saturday\n              return blue[500];\n\n            default:\n              return theme.palette.text.primary;\n          }\n        } else {\n          // previous or next month\n          switch (wday) {\n            case 0:\n              // Sunday\n              return red[200];\n\n            case 6:\n              // Saturday\n              return blue[200];\n\n            default:\n              return theme.palette.text.secondary;\n          }\n        }\n      },\n      backgroundColor: function backgroundColor(_ref2) {\n        var isToday = _ref2.isToday;\n        return isToday ? pink[50] : \"transparent\";\n      }\n    }\n  };\n});\n\nvar getCalendarArray = function getCalendarArray(date) {\n  var sundays = eachWeekOfInterval({\n    start: startOfMonth(date),\n    end: endOfMonth(date)\n  });\n  return sundays.map(function (sunday) {\n    return eachDayOfInterval({\n      start: sunday,\n      end: endOfWeek(sunday)\n    });\n  });\n};\n\nvar calendarCellClick = function calendarCellClick(dateData, dispatch, choice) {\n  return function () {\n    var year = dateData.getFullYear();\n    var month = dateData.getMonth() + 1;\n    var date = dateData.getDate();\n    console.log('year');\n    console.log(year);\n    console.log('month');\n    console.log(month);\n    console.log('date');\n    console.log(date);\n    dispatch(calendarPatternRegister([year, month, date, choice]));\n  };\n}; // カレンダー欄に設定されているパターンIDを表示させるための関数\n\n\nfunction PatternRegistrationStatus(dateData, userTaskInfo) {\n  var year = dateData.getFullYear();\n  var month = dateData.getMonth() + 1;\n  var date = dateData.getDate(); // console.log(\"チェック：\" + date + \":\" + month + \":\" + year);\n  // console.log(\"チェック2\");\n  // console.log(userTaskInfo.calendar[year]);\n\n  if ([year] in userTaskInfo.calendar) {\n    if ([month] in userTaskInfo.calendar[year]) {\n      if ([date] in userTaskInfo.calendar[year][month]) {\n        console.log('day');\n        console.log(year + \"/\" + month + \"/\" + date);\n        console.log(\"PatternId：\" + userTaskInfo.calendar[year][month][date].PatternId);\n        return userTaskInfo.calendar[year][month][date].PatternId;\n      }\n    }\n  } // console.log(\"なし：\" + date);\n\n\n  return \"×\";\n}\n\n_c = PatternRegistrationStatus;\n\nfunction CalendarTableCell(props) {\n  _s();\n\n  var keyProps = props.keyProps,\n      wday = props.wday,\n      isTargetMonth = props.isTargetMonth,\n      isToday = props.isToday,\n      children = props.children,\n      dateData = props.dateData,\n      dispatch = props.dispatch,\n      choice = props.choice,\n      other = _objectWithoutProperties(props, [\"keyProps\", \"wday\", \"isTargetMonth\", \"isToday\", \"children\", \"dateData\", \"dispatch\", \"choice\"]);\n\n  var classes = useCalendarCellStyles(props);\n  return __jsx(TableCell, _extends({\n    key: keyProps,\n    className: classes.calendarCell\n  }, other, {\n    onClick: calendarCellClick(dateData, dispatch, choice),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  }), children);\n}\n\n_s(CalendarTableCell, \"ukLd6tf9xGCRm8TMTZd5+yrbOjY=\", false, function () {\n  return [useCalendarCellStyles];\n});\n\n_c2 = CalendarTableCell;\n\nfunction App(props) {\n  _s2();\n\n  var _this = this;\n\n  var _useState = useState(new Date()),\n      targetDate = _useState[0],\n      setTargetDate = _useState[1];\n\n  var classes = useStyles();\n  var calendar = getCalendarArray(targetDate);\n  var today = new Date();\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.tasks;\n  }),\n      userTaskInfo = _useSelector.userTaskInfo;\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }\n  }, __jsx(CssBaseline, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }\n  }), __jsx(Paper, {\n    className: classes.paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }\n  }, __jsx(Grid, {\n    container: true,\n    justify: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 17\n    }\n  }, __jsx(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    variant: \"outlined\",\n    onClick: function onClick() {\n      return setTargetDate(subMonths(targetDate, 1));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 25\n    }\n  }, \"\\u524D\\u306E\\u6708\")), __jsx(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    variant: \"outlined\",\n    onClick: function onClick() {\n      return setTargetDate(new Date());\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 25\n    }\n  }, \"\\u4ECA\\u6708\")), __jsx(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    variant: \"outlined\",\n    onClick: function onClick() {\n      return setTargetDate(addMonths(targetDate, 1));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 25\n    }\n  }, \"\\u6B21\\u306E\\u6708\"))), __jsx(Typography, {\n    variant: \"h4\",\n    align: \"center\",\n    className: classes.yearmonth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 17\n    }\n  }, format(targetDate, \"y年M月\")), __jsx(Table, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 17\n    }\n  }, __jsx(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 21\n    }\n  }, __jsx(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 25\n    }\n  }, __jsx(TableCell, {\n    align: \"center\",\n    classes: {\n      head: classes.tableHead\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 29\n    }\n  }, \"\\u65E5\"), __jsx(TableCell, {\n    align: \"center\",\n    classes: {\n      head: classes.tableHead\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 29\n    }\n  }, \"\\u6708\"), __jsx(TableCell, {\n    align: \"center\",\n    classes: {\n      head: classes.tableHead\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 29\n    }\n  }, \"\\u706B\"), __jsx(TableCell, {\n    align: \"center\",\n    classes: {\n      head: classes.tableHead\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 29\n    }\n  }, \"\\u6C34\"), __jsx(TableCell, {\n    align: \"center\",\n    classes: {\n      head: classes.tableHead\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 29\n    }\n  }, \"\\u6728\"), __jsx(TableCell, {\n    align: \"center\",\n    classes: {\n      head: classes.tableHead\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 29\n    }\n  }, \"\\u91D1\"), __jsx(TableCell, {\n    align: \"center\",\n    onClick: calendarCellClick,\n    classes: {\n      head: classes.tableHead\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 29\n    }\n  }, \"\\u571F\"))), __jsx(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 21\n    }\n  }, calendar.map(function (weekRow, rowNum) {\n    return __jsx(TableRow, {\n      key: 'tableRow_' + rowNum,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 29\n      }\n    }, weekRow.map(function (date, index) {\n      return __jsx(CalendarTableCell, {\n        key: 'CalendarTableCell_' + rowNum + \"_\" + index,\n        keyProps: getDay(date) + '_' + rowNum + \"_\" + index,\n        wday: getDay(date),\n        isTargetMonth: isSameMonth(date, targetDate),\n        isToday: isSameDay(date, today),\n        dateData: date,\n        dispatch: dispatch,\n        choice: props.choice,\n        align: \"center\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 37\n        }\n      }, getDate(date), __jsx(\"br\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 41\n        }\n      }), PatternRegistrationStatus(date, userTaskInfo));\n    }));\n  })))));\n}\n\n_s2(App, \"LKa2GoQPnhe2gLZt0KYyKyX5FwI=\", false, function () {\n  return [useStyles, useDispatch, useSelector];\n});\n\n_c3 = App;\nexport default App;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"PatternRegistrationStatus\");\n$RefreshReg$(_c2, \"CalendarTableCell\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"sources":["C:/Users/blelm/Desktop/AppCreate/habitPlan/src/components/test/Calendar3.jsx"],"names":["React","useState","useDispatch","useSelector","calendarPatternRegister","RootState","format","getDate","getDay","isSameDay","eachDayOfInterval","endOfWeek","eachWeekOfInterval","addMonths","subMonths","startOfMonth","endOfMonth","isSameMonth","makeStyles","CssBaseline","Button","Grid","Paper","Table","TableBody","TableCell","TableHead","TableRow","Typography","blue","pink","red","useStyles","theme","paper","margin","spacing","padding","breakpoints","down","width","yearmonth","tableHead","color","palette","secondary","contrastText","backgroundColor","light","useCalendarCellStyles","calendarCell","wday","isTargetMonth","text","primary","isToday","getCalendarArray","date","sundays","start","end","map","sunday","calendarCellClick","dateData","dispatch","choice","year","getFullYear","month","getMonth","console","log","PatternRegistrationStatus","userTaskInfo","calendar","PatternId","CalendarTableCell","props","keyProps","children","other","classes","App","Date","targetDate","setTargetDate","today","state","tasks","head","weekRow","rowNum","index"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { calendarPatternRegister } from \"../../modules/tasksModule\";\r\nimport { RootState } from \"../../modules/rootReducer\";\r\n\r\nimport format from \"date-fns/format\";\r\nimport getDate from \"date-fns/getDate\";\r\nimport getDay from \"date-fns/getDay\";\r\nimport isSameDay from \"date-fns/isSameDay\";\r\nimport eachDayOfInterval from \"date-fns/eachDayOfInterval\";\r\nimport endOfWeek from \"date-fns/endOfWeek\";\r\nimport eachWeekOfInterval from \"date-fns/eachWeekOfInterval\";\r\nimport addMonths from \"date-fns/addMonths\";\r\nimport subMonths from \"date-fns/subMonths\";\r\nimport startOfMonth from \"date-fns/startOfMonth\";\r\nimport endOfMonth from \"date-fns/endOfMonth\";\r\nimport isSameMonth from \"date-fns/isSameMonth\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport blue from \"@material-ui/core/colors/blue\";\r\nimport pink from \"@material-ui/core/colors/pink\";\r\nimport red from \"@material-ui/core/colors/red\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        margin: theme.spacing(5, 10),\r\n        padding: theme.spacing(5, 5),\r\n        [theme.breakpoints.down('sm')]: {\r\n            width:'100%',\r\n            // paddingLeft: '240px',\r\n            margin:'auto',\r\n            padding:0,\r\n        }\r\n    },\r\n    yearmonth: {\r\n        margin: theme.spacing(2, 0, 1, 0),\r\n    },\r\n    tableHead: {\r\n        color: theme.palette.secondary.contrastText,\r\n        backgroundColor: theme.palette.secondary.light,\r\n    },\r\n}));\r\n\r\nconst useCalendarCellStyles = makeStyles((theme) => ({\r\n    calendarCell: {\r\n        color: ({ wday, isTargetMonth }) => {\r\n            if (isTargetMonth) {\r\n                switch (wday) {\r\n                    case 0: // Sunday\r\n                        return red[500];\r\n                    case 6: // Saturday\r\n                        return blue[500];\r\n                    default:\r\n                        return theme.palette.text.primary;\r\n                }\r\n            } else {\r\n                // previous or next month\r\n                switch (wday) {\r\n                    case 0: // Sunday\r\n                        return red[200];\r\n                    case 6: // Saturday\r\n                        return blue[200];\r\n                    default:\r\n                        return theme.palette.text.secondary;\r\n                }\r\n            }\r\n        },\r\n        backgroundColor: ({ isToday }) => (isToday ? pink[50] : \"transparent\"),\r\n    },\r\n}));\r\n\r\nconst getCalendarArray = (date) => {\r\n    const sundays = eachWeekOfInterval({\r\n        start: startOfMonth(date),\r\n        end: endOfMonth(date),\r\n    });\r\n    return sundays.map((sunday) =>\r\n        eachDayOfInterval({ start: sunday, end: endOfWeek(sunday) })\r\n    );\r\n};\r\n\r\nconst calendarCellClick = (dateData, dispatch, choice) => () => {\r\n    const year = dateData.getFullYear();\r\n    const month = dateData.getMonth() + 1;\r\n    const date = dateData.getDate();\r\n    console.log('year');\r\n    console.log(year);\r\n    console.log('month');\r\n    console.log(month);\r\n    console.log('date');\r\n    console.log(date);\r\n    dispatch(calendarPatternRegister([year, month, date, choice]));\r\n};\r\n\r\n// カレンダー欄に設定されているパターンIDを表示させるための関数\r\nfunction PatternRegistrationStatus(dateData, userTaskInfo) {\r\n    const year = dateData.getFullYear();\r\n    const month = dateData.getMonth() + 1;\r\n    const date = dateData.getDate();\r\n\r\n    // console.log(\"チェック：\" + date + \":\" + month + \":\" + year);\r\n\r\n    // console.log(\"チェック2\");\r\n    // console.log(userTaskInfo.calendar[year]);\r\n    if ([year] in userTaskInfo.calendar) {\r\n        if ([month] in userTaskInfo.calendar[year]) {\r\n            if ([date] in userTaskInfo.calendar[year][month]) {\r\n                console.log('day');\r\n                console.log(year + \"/\" + month + \"/\" + date);\r\n                console.log(\"PatternId：\" + userTaskInfo.calendar[year][month][date].PatternId);\r\n                return userTaskInfo.calendar[year][month][date].PatternId;\r\n            }\r\n        }\r\n    }\r\n    // console.log(\"なし：\" + date);\r\n    return \"×\";\r\n}\r\n\r\nfunction CalendarTableCell(props) {\r\n    const {\r\n        keyProps,\r\n        wday,\r\n        isTargetMonth,\r\n        isToday,\r\n        children,\r\n        dateData,\r\n        dispatch,\r\n        choice,\r\n        ...other\r\n    } = props;\r\n    const classes = useCalendarCellStyles(props);\r\n    return (\r\n        <TableCell\r\n            key={keyProps}\r\n            className={classes.calendarCell}\r\n            {...other}\r\n            onClick={calendarCellClick(dateData, dispatch, choice)}\r\n        >\r\n            {children}\r\n        </TableCell>\r\n    );\r\n}\r\n\r\nfunction App(props) {\r\n    const [targetDate, setTargetDate] = useState(new Date());\r\n    const classes = useStyles();\r\n    const calendar = getCalendarArray(targetDate);\r\n    const today = new Date();\r\n    const dispatch = useDispatch();\r\n    const { userTaskInfo } = useSelector((state) => state.tasks);\r\n\r\n    return (\r\n        <div>\r\n            <CssBaseline />\r\n            <Paper className={classes.paper}>\r\n                <Grid container justify=\"space-between\">\r\n                    <Grid item>\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            onClick={() =>\r\n                                setTargetDate(subMonths(targetDate, 1))\r\n                            }\r\n                        >\r\n                            前の月\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            onClick={() => setTargetDate(new Date())}\r\n                        >\r\n                            今月\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            onClick={() =>\r\n                                setTargetDate(addMonths(targetDate, 1))\r\n                            }\r\n                        >\r\n                            次の月\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n                <Typography\r\n                    variant=\"h4\"\r\n                    align=\"center\"\r\n                    className={classes.yearmonth}\r\n                >\r\n                    {format(targetDate, \"y年M月\")}\r\n                </Typography>\r\n                <Table>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell\r\n                                align=\"center\"\r\n                                classes={{ head: classes.tableHead }}\r\n                            >\r\n                                日\r\n                            </TableCell>\r\n                            <TableCell\r\n                                align=\"center\"\r\n                                classes={{ head: classes.tableHead }}\r\n                            >\r\n                                月\r\n                            </TableCell>\r\n                            <TableCell\r\n                                align=\"center\"\r\n                                classes={{ head: classes.tableHead }}\r\n                            >\r\n                                火\r\n                            </TableCell>\r\n                            <TableCell\r\n                                align=\"center\"\r\n                                classes={{ head: classes.tableHead }}\r\n                            >\r\n                                水\r\n                            </TableCell>\r\n                            <TableCell\r\n                                align=\"center\"\r\n                                classes={{ head: classes.tableHead }}\r\n                            >\r\n                                木\r\n                            </TableCell>\r\n                            <TableCell\r\n                                align=\"center\"\r\n                                classes={{ head: classes.tableHead }}\r\n                            >\r\n                                金\r\n                            </TableCell>\r\n                            <TableCell\r\n                                align=\"center\"\r\n                                onClick={calendarCellClick}\r\n                                classes={{ head: classes.tableHead }}\r\n                            >\r\n                                土\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {calendar.map((weekRow, rowNum) => (\r\n                            <TableRow key={'tableRow_' + rowNum}>\r\n                                {weekRow.map((date, index) => (\r\n                                    <CalendarTableCell\r\n                                        key={'CalendarTableCell_' + rowNum + \"_\" + index}\r\n                                        keyProps={getDay(date) + '_' + rowNum + \"_\" + index}\r\n                                        wday={getDay(date)}\r\n                                        isTargetMonth={isSameMonth(\r\n                                            date,\r\n                                            targetDate\r\n                                        )}\r\n                                        isToday={isSameDay(date, today)}\r\n                                        dateData={date}\r\n                                        dispatch={dispatch}\r\n                                        choice={props.choice}\r\n                                        align=\"center\"\r\n                                    >\r\n                                        {getDate(date)}\r\n                                        <br></br>\r\n                                        {PatternRegistrationStatus(\r\n                                            date,\r\n                                            userTaskInfo\r\n                                        )}\r\n                                    </CalendarTableCell>\r\n                                ))}\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </Paper>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}