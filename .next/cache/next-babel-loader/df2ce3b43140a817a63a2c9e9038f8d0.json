{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\blelm\\\\Desktop\\\\AppCreate\\\\habitPlan\\\\src\\\\components\\\\view\\\\PatternList.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CommentIcon from \"@material-ui/icons/Comment\";\nimport RemoveCircleIcon from \"@material-ui/icons/RemoveCircle\";\nimport { useSelector } from \"react-redux\";\nvar useStyles = makeStyles(function (theme) {\n  return createStyles({\n    roots: {\n      width: \"100%\",\n      maxWidth: 720,\n      margin: \"auto\",\n      backgroundColor: theme.palette.background.paper\n    }\n  });\n});\nexport default function PatternList(props) {\n  _s();\n\n  var _this = this;\n\n  var classes = useStyles();\n\n  var _React$useState = React.useState([0]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      checked = _React$useState2[0],\n      setChecked = _React$useState2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.tasks;\n  }),\n      userTaskInfo = _useSelector.userTaskInfo;\n\n  var handleToggle = function handleToggle(value) {\n    return function () {\n      var currentIndex = checked.indexOf(value);\n\n      var newChecked = _toConsumableArray(checked);\n\n      if (currentIndex === -1) {\n        newChecked.push(value);\n      } else {\n        newChecked.splice(currentIndex, 1);\n      }\n\n      setChecked(newChecked);\n    };\n  };\n\n  var choicePatternTasks = userTaskInfo.tasks.filter(function (task) {\n    return task.patternInfo.some(function (task) {\n      return task.patternID == props.choice;\n    });\n  });\n  console.log(\"choicePatternTasks:\" + choicePatternTasks);\n  return __jsx(List, {\n    className: classes.roots,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, choicePatternTasks.map(function (task) {\n    var taskPattern = task.patternInfo.filter(function (patternInfo) {\n      return patternInfo.patternID == props.choice;\n    });\n    var labelId = \"checkbox-list-label-\".concat(taskPattern[0].patternID + taskPattern[0].order);\n    return __jsx(ListItem, {\n      key: taskPattern[0].patternID + taskPattern[0].order,\n      role: undefined,\n      dense: true,\n      button: true,\n      onClick: handleToggle(taskPattern[0].patternID + taskPattern[0].order),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }\n    }, __jsx(ListItemIcon, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 25\n      }\n    }, __jsx(IconButton, {\n      edge: \"end\",\n      \"aria-label\": \"comments\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 29\n      }\n    }, __jsx(RemoveCircleIcon, {\n      color: \"secondary\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 33\n      }\n    }))), __jsx(ListItemText, {\n      id: labelId,\n      primary: \"Line item \".concat(taskPattern[0].patternID + taskPattern[0].order, \" \").concat(task.detail1, \" \").concat(task.detail2),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 25\n      }\n    }), __jsx(ListItemSecondaryAction, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 25\n      }\n    }, __jsx(IconButton, {\n      edge: \"end\",\n      \"aria-label\": \"comments\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 29\n      }\n    }, __jsx(CommentIcon, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 33\n      }\n    }))));\n  }));\n}\n\n_s(PatternList, \"CfT5JeeJGcf5wuJxtigG2JcDEIY=\", false, function () {\n  return [useStyles, useSelector];\n});\n\n_c = PatternList;\n\nvar _c;\n\n$RefreshReg$(_c, \"PatternList\");","map":{"version":3,"sources":["C:/Users/blelm/Desktop/AppCreate/habitPlan/src/components/view/PatternList.tsx"],"names":["React","createStyles","makeStyles","List","ListItem","ListItemIcon","ListItemSecondaryAction","ListItemText","IconButton","CommentIcon","RemoveCircleIcon","useSelector","useStyles","theme","roots","width","maxWidth","margin","backgroundColor","palette","background","paper","PatternList","props","classes","useState","checked","setChecked","state","tasks","userTaskInfo","handleToggle","value","currentIndex","indexOf","newChecked","push","splice","choicePatternTasks","filter","task","patternInfo","some","patternID","choice","console","log","map","taskPattern","labelId","order","undefined","detail1","detail2"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CommentIcon from \"@material-ui/icons/Comment\";\r\nimport RemoveCircleIcon from \"@material-ui/icons/RemoveCircle\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../modules/rootReducer\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        roots: {\r\n            width: \"100%\",\r\n            maxWidth: 720,\r\n\r\n            margin: \"auto\",\r\n            backgroundColor: theme.palette.background.paper,\r\n        },\r\n    })\r\n);\r\n\r\nexport default function PatternList(props: { choice: number }) {\r\n    const classes = useStyles();\r\n    const [checked, setChecked] = React.useState([0]);\r\n    const { userTaskInfo } = useSelector((state: RootState) => state.tasks);\r\n\r\n    const handleToggle = (value: number) => () => {\r\n        const currentIndex = checked.indexOf(value);\r\n        const newChecked = [...checked];\r\n\r\n        if (currentIndex === -1) {\r\n            newChecked.push(value);\r\n        } else {\r\n            newChecked.splice(currentIndex, 1);\r\n        }\r\n\r\n        setChecked(newChecked);\r\n    };\r\n\r\n    const choicePatternTasks = userTaskInfo.tasks.filter(function (task) {\r\n        return task.patternInfo.some((task) => task.patternID == props.choice);\r\n    });\r\n\r\n    console.log(\"choicePatternTasks:\" + choicePatternTasks);\r\n\r\n    return (\r\n        <List className={classes.roots}>\r\n            {/* {[0, 1, 2, 3].map((value) => { */}\r\n            {choicePatternTasks.map((task) => {\r\n              const taskPattern = task.patternInfo.filter(function (patternInfo) {\r\n                return patternInfo.patternID == props.choice;\r\n            });\r\n                const labelId = `checkbox-list-label-${taskPattern[0].patternID+taskPattern[0].order}`;\r\n\r\n                return (\r\n                    <ListItem\r\n                        key={taskPattern[0].patternID+taskPattern[0].order}\r\n                        role={undefined}\r\n                        dense\r\n                        button\r\n                        onClick={handleToggle(taskPattern[0].patternID+taskPattern[0].order)}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <IconButton edge=\"end\" aria-label=\"comments\">\r\n                                <RemoveCircleIcon color=\"secondary\" />\r\n                            </IconButton>\r\n                        </ListItemIcon>\r\n                        <ListItemText\r\n                            id={labelId}\r\n                            primary={`Line item ${taskPattern[0].patternID+taskPattern[0].order} ${task.detail1} ${task.detail2}`}\r\n                        />\r\n                        <ListItemSecondaryAction>\r\n                            <IconButton edge=\"end\" aria-label=\"comments\">\r\n                                {/* <IconButton aria-label=\"comments\"> */}\r\n                                <CommentIcon />\r\n                            </IconButton>\r\n                        </ListItemSecondaryAction>\r\n                    </ListItem>\r\n                );\r\n            })}\r\n        </List>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}