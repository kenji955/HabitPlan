{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\blelm\\\\Desktop\\\\AppCreate\\\\habitPlan\\\\src\\\\components\\\\test\\\\Calendar3.jsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useState } from 'react';\nimport format from 'date-fns/format';\nimport getDate from 'date-fns/getDate';\nimport getDay from 'date-fns/getDay';\nimport isSameDay from 'date-fns/isSameDay';\nimport eachDayOfInterval from 'date-fns/eachDayOfInterval';\nimport endOfWeek from 'date-fns/endOfWeek';\nimport eachWeekOfInterval from 'date-fns/eachWeekOfInterval';\nimport addMonths from 'date-fns/addMonths';\nimport subMonths from 'date-fns/subMonths';\nimport startOfMonth from 'date-fns/startOfMonth';\nimport endOfMonth from 'date-fns/endOfMonth';\nimport isSameMonth from 'date-fns/isSameMonth';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\nimport blue from '@material-ui/core/colors/blue';\nimport pink from '@material-ui/core/colors/pink';\nimport red from '@material-ui/core/colors/red';\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    margin: theme.spacing(5, 10),\n    padding: theme.spacing(5, 5)\n  },\n  yearmonth: {\n    margin: theme.spacing(2, 0, 1, 0)\n  },\n  tableHead: {\n    color: theme.palette.secondary.contrastText,\n    backgroundColor: theme.palette.secondary.light\n  }\n}));\nconst useCalendarCellStyles = makeStyles(theme => ({\n  calendarCell: {\n    color: ({\n      wday,\n      isTargetMonth\n    }) => {\n      if (isTargetMonth) {\n        switch (wday) {\n          case 0:\n            // Sunday\n            return red[500];\n\n          case 6:\n            // Saturday\n            return blue[500];\n\n          default:\n            return theme.palette.text.primary;\n        }\n      } else {\n        // previous or next month\n        switch (wday) {\n          case 0:\n            // Sunday\n            return red[200];\n\n          case 6:\n            // Saturday\n            return blue[200];\n\n          default:\n            return theme.palette.text.secondary;\n        }\n      }\n    },\n    backgroundColor: ({\n      isToday\n    }) => isToday ? pink[50] : \"transparent\"\n  }\n}));\n\nconst getCalendarArray = date => {\n  const sundays = eachWeekOfInterval({\n    start: startOfMonth(date),\n    end: endOfMonth(date)\n  });\n  return sundays.map(sunday => eachDayOfInterval({\n    start: sunday,\n    end: endOfWeek(sunday)\n  }));\n};\n\nconst calendarCellClick = () => {\n  console.log('isToday');\n};\n\nfunction CalendarTableCell(props) {\n  const {\n    wday,\n    isTargetMonth,\n    isToday,\n    children\n  } = props,\n        other = _objectWithoutProperties(props, [\"wday\", \"isTargetMonth\", \"isToday\", \"children\"]);\n\n  const classes = useCalendarCellStyles(props);\n  return __jsx(TableCell, _extends({\n    className: classes.calendarCell\n  }, other, {\n    onClick: calendarCellClick(isToday),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }\n  }), children);\n}\n\nfunction App() {\n  const {\n    0: targetDate,\n    1: setTargetDate\n  } = useState(new Date());\n  const classes = useStyles();\n  const calendar = getCalendarArray(targetDate);\n  const today = new Date();\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 5\n    }\n  }, __jsx(CssBaseline, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }), __jsx(Paper, {\n    className: classes.paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }, __jsx(Grid, {\n    container: true,\n    justify: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }, __jsx(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }\n  }, __jsx(Button, {\n    variant: \"outlined\",\n    onClick: () => setTargetDate(subMonths(targetDate, 1)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  }, \"\\u524D\\u306E\\u6708\")), __jsx(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  }, __jsx(Button, {\n    variant: \"outlined\",\n    onClick: () => setTargetDate(new Date()),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }, \"\\u4ECA\\u6708\")), __jsx(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }\n  }, __jsx(Button, {\n    variant: \"outlined\",\n    onClick: () => setTargetDate(addMonths(targetDate, 1)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }, \"\\u6B21\\u306E\\u6708\"))), __jsx(Typography, {\n    variant: \"h4\",\n    align: \"center\",\n    className: classes.yearmonth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }, format(targetDate, 'y年M月')), __jsx(Table, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, __jsx(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }\n  }, __jsx(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  }, __jsx(TableCell, {\n    align: \"center\",\n    classes: {\n      head: classes.tableHead\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 15\n    }\n  }, \"\\u65E5\"), __jsx(TableCell, {\n    align: \"center\",\n    classes: {\n      head: classes.tableHead\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 15\n    }\n  }, \"\\u6708\"), __jsx(TableCell, {\n    align: \"center\",\n    classes: {\n      head: classes.tableHead\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 15\n    }\n  }, \"\\u706B\"), __jsx(TableCell, {\n    align: \"center\",\n    classes: {\n      head: classes.tableHead\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 15\n    }\n  }, \"\\u6C34\"), __jsx(TableCell, {\n    align: \"center\",\n    classes: {\n      head: classes.tableHead\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 15\n    }\n  }, \"\\u6728\"), __jsx(TableCell, {\n    align: \"center\",\n    classes: {\n      head: classes.tableHead\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 15\n    }\n  }, \"\\u91D1\"), __jsx(TableCell, {\n    align: \"center\",\n    onClick: calendarCellClick,\n    classes: {\n      head: classes.tableHead\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 15\n    }\n  }, \"\\u571F\"))), __jsx(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 11\n    }\n  }, calendar.map((weekRow, rowNum) => __jsx(TableRow, {\n    key: rowNum,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 15\n    }\n  }, weekRow.map(date => __jsx(CalendarTableCell, {\n    key: getDay(date),\n    wday: getDay(date),\n    isTargetMonth: isSameMonth(date, targetDate),\n    isToday: isSameDay(date, today),\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 19\n    }\n  }, getDate(date)))))))));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/blelm/Desktop/AppCreate/habitPlan/src/components/test/Calendar3.jsx"],"names":["React","useState","format","getDate","getDay","isSameDay","eachDayOfInterval","endOfWeek","eachWeekOfInterval","addMonths","subMonths","startOfMonth","endOfMonth","isSameMonth","makeStyles","CssBaseline","Button","Grid","Paper","Table","TableBody","TableCell","TableHead","TableRow","Typography","blue","pink","red","useStyles","theme","paper","margin","spacing","padding","yearmonth","tableHead","color","palette","secondary","contrastText","backgroundColor","light","useCalendarCellStyles","calendarCell","wday","isTargetMonth","text","primary","isToday","getCalendarArray","date","sundays","start","end","map","sunday","calendarCellClick","console","log","CalendarTableCell","props","children","other","classes","App","targetDate","setTargetDate","Date","calendar","today","head","weekRow","rowNum"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,iBAAP,MAA8B,4BAA9B;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,kBAAP,MAA+B,6BAA/B;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AAEA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,IAAP,MAAiB,+BAAjB;AACA,OAAOC,IAAP,MAAiB,+BAAjB;AACA,OAAOC,GAAP,MAAgB,8BAAhB;AAEA,MAAMC,SAAS,GAAGd,UAAU,CAACe,KAAK,KAAK;AACrCC,EAAAA,KAAK,EAAE;AACLC,IAAAA,MAAM,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,EAAiB,EAAjB,CADH;AAELC,IAAAA,OAAO,EAAEJ,KAAK,CAACG,OAAN,CAAc,CAAd,EAAiB,CAAjB;AAFJ,GAD8B;AAKrCE,EAAAA,SAAS,EAAE;AACTH,IAAAA,MAAM,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB;AADC,GAL0B;AAQrCG,EAAAA,SAAS,EAAE;AACTC,IAAAA,KAAK,EAAEP,KAAK,CAACQ,OAAN,CAAcC,SAAd,CAAwBC,YADtB;AAETC,IAAAA,eAAe,EAAEX,KAAK,CAACQ,OAAN,CAAcC,SAAd,CAAwBG;AAFhC;AAR0B,CAAL,CAAN,CAA5B;AAcA,MAAMC,qBAAqB,GAAG5B,UAAU,CAACe,KAAK,KAAK;AACjDc,EAAAA,YAAY,EAAE;AACZP,IAAAA,KAAK,EAAE,CAAC;AAACQ,MAAAA,IAAD;AAAOC,MAAAA;AAAP,KAAD,KAA2B;AAChC,UAAGA,aAAH,EAAkB;AAChB,gBAAOD,IAAP;AACE,eAAK,CAAL;AAAQ;AACN,mBAAOjB,GAAG,CAAC,GAAD,CAAV;;AACF,eAAK,CAAL;AAAQ;AACN,mBAAOF,IAAI,CAAC,GAAD,CAAX;;AACF;AACE,mBAAOI,KAAK,CAACQ,OAAN,CAAcS,IAAd,CAAmBC,OAA1B;AANJ;AAQD,OATD,MASO;AACL;AACA,gBAAOH,IAAP;AACI,eAAK,CAAL;AAAQ;AACR,mBAAOjB,GAAG,CAAC,GAAD,CAAV;;AACF,eAAK,CAAL;AAAQ;AACN,mBAAOF,IAAI,CAAC,GAAD,CAAX;;AACF;AACE,mBAAOI,KAAK,CAACQ,OAAN,CAAcS,IAAd,CAAmBR,SAA1B;AANJ;AAQD;AACF,KAtBW;AAuBZE,IAAAA,eAAe,EAAE,CAAC;AAACQ,MAAAA;AAAD,KAAD,KACfA,OAAO,GAAGtB,IAAI,CAAC,EAAD,CAAP,GAAc;AAxBX;AADmC,CAAL,CAAN,CAAxC;;AA6BA,MAAMuB,gBAAgB,GAAGC,IAAI,IAAI;AAC/B,QAAMC,OAAO,GAAG3C,kBAAkB,CAAC;AACjC4C,IAAAA,KAAK,EAAEzC,YAAY,CAACuC,IAAD,CADc;AAEjCG,IAAAA,GAAG,EAAEzC,UAAU,CAACsC,IAAD;AAFkB,GAAD,CAAlC;AAIA,SAAOC,OAAO,CAACG,GAAR,CAAYC,MAAM,IACvBjD,iBAAiB,CAAC;AAAC8C,IAAAA,KAAK,EAAEG,MAAR;AAAgBF,IAAAA,GAAG,EAAE9C,SAAS,CAACgD,MAAD;AAA9B,GAAD,CADZ,CAAP;AAGD,CARD;;AAUA,MAAMC,iBAAiB,GAAC,MAAI;AAC1BC,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACD,CAFD;;AAIA,SAASC,iBAAT,CAA2BC,KAA3B,EAAkC;AAChC,QAAM;AAAChB,IAAAA,IAAD;AAAOC,IAAAA,aAAP;AAAsBG,IAAAA,OAAtB;AAA+Ba,IAAAA;AAA/B,MAAqDD,KAA3D;AAAA,QAAkDE,KAAlD,4BAA2DF,KAA3D;;AACA,QAAMG,OAAO,GAAGrB,qBAAqB,CAACkB,KAAD,CAArC;AACA,SAAQ,MAAC,SAAD;AAAW,IAAA,SAAS,EAAEG,OAAO,CAACpB;AAA9B,KAAgDmB,KAAhD;AAAuD,IAAA,OAAO,EAAEN,iBAAiB,CAACR,OAAD,CAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA6Fa,QAA7F,CAAR;AACD;;AAED,SAASG,GAAT,GAAe;AACb,QAAM;AAAA,OAACC,UAAD;AAAA,OAAaC;AAAb,MAA8BjE,QAAQ,CAAC,IAAIkE,IAAJ,EAAD,CAA5C;AACA,QAAMJ,OAAO,GAAGnC,SAAS,EAAzB;AACA,QAAMwC,QAAQ,GAAGnB,gBAAgB,CAACgB,UAAD,CAAjC;AACA,QAAMI,KAAK,GAAG,IAAIF,IAAJ,EAAd;AAEA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,KAAD;AAAO,IAAA,SAAS,EAAEJ,OAAO,CAACjC,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAgB,IAAA,OAAO,EAAC,eAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,UAAhB;AAA2B,IAAA,OAAO,EAAE,MAAMoC,aAAa,CAACxD,SAAS,CAACuD,UAAD,EAAa,CAAb,CAAV,CAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,CADF,EAIE,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,UAAhB;AAA2B,IAAA,OAAO,EAAE,MAAMC,aAAa,CAAC,IAAIC,IAAJ,EAAD,CAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,CAJF,EAOE,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,UAAhB;AAA2B,IAAA,OAAO,EAAE,MAAMD,aAAa,CAACzD,SAAS,CAACwD,UAAD,EAAa,CAAb,CAAV,CAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,CAPF,CADF,EAYE,MAAC,UAAD;AAAY,IAAA,OAAO,EAAC,IAApB;AAAyB,IAAA,KAAK,EAAC,QAA/B;AAAwC,IAAA,SAAS,EAAEF,OAAO,CAAC7B,SAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAuEhC,MAAM,CAAC+D,UAAD,EAAa,MAAb,CAA7E,CAZF,EAaE,MAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAW,IAAA,KAAK,EAAC,QAAjB;AAA0B,IAAA,OAAO,EAAE;AAACK,MAAAA,IAAI,EAAEP,OAAO,CAAC5B;AAAf,KAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEE,MAAC,SAAD;AAAW,IAAA,KAAK,EAAC,QAAjB;AAA0B,IAAA,OAAO,EAAE;AAACmC,MAAAA,IAAI,EAAEP,OAAO,CAAC5B;AAAf,KAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,EAGE,MAAC,SAAD;AAAW,IAAA,KAAK,EAAC,QAAjB;AAA0B,IAAA,OAAO,EAAE;AAACmC,MAAAA,IAAI,EAAEP,OAAO,CAAC5B;AAAf,KAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,EAIE,MAAC,SAAD;AAAW,IAAA,KAAK,EAAC,QAAjB;AAA0B,IAAA,OAAO,EAAE;AAACmC,MAAAA,IAAI,EAAEP,OAAO,CAAC5B;AAAf,KAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,EAKE,MAAC,SAAD;AAAW,IAAA,KAAK,EAAC,QAAjB;AAA0B,IAAA,OAAO,EAAE;AAACmC,MAAAA,IAAI,EAAEP,OAAO,CAAC5B;AAAf,KAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALF,EAME,MAAC,SAAD;AAAW,IAAA,KAAK,EAAC,QAAjB;AAA0B,IAAA,OAAO,EAAE;AAACmC,MAAAA,IAAI,EAAEP,OAAO,CAAC5B;AAAf,KAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANF,EAOE,MAAC,SAAD;AAAW,IAAA,KAAK,EAAC,QAAjB;AAA0B,IAAA,OAAO,EAAEqB,iBAAnC;AAAsD,IAAA,OAAO,EAAE;AAACc,MAAAA,IAAI,EAAEP,OAAO,CAAC5B;AAAf,KAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPF,CADF,CADF,EAYE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGiC,QAAQ,CAACd,GAAT,CAAa,CAACiB,OAAD,EAAUC,MAAV,KACZ,MAAC,QAAD;AAAU,IAAA,GAAG,EAAEA,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,OAAO,CAACjB,GAAR,CAAYJ,IAAI,IACf,MAAC,iBAAD;AAAmB,IAAA,GAAG,EAAE9C,MAAM,CAAC8C,IAAD,CAA9B;AAAsC,IAAA,IAAI,EAAE9C,MAAM,CAAC8C,IAAD,CAAlD;AAA0D,IAAA,aAAa,EAAErC,WAAW,CAACqC,IAAD,EAAOe,UAAP,CAApF;AAAwG,IAAA,OAAO,EAAE5D,SAAS,CAAC6C,IAAD,EAAOmB,KAAP,CAA1H;AAAyI,IAAA,KAAK,EAAC,QAA/I;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGlE,OAAO,CAAC+C,IAAD,CADV,CADD,CADH,CADD,CADH,CAZF,CAbF,CAFF,CADF;AA2CD;;AAED,eAAec,GAAf","sourcesContent":["import React, { useState }  from 'react'\r\nimport format from 'date-fns/format'\r\nimport getDate from 'date-fns/getDate'\r\nimport getDay from 'date-fns/getDay'\r\nimport isSameDay from 'date-fns/isSameDay'\r\nimport eachDayOfInterval from 'date-fns/eachDayOfInterval'\r\nimport endOfWeek from 'date-fns/endOfWeek'\r\nimport eachWeekOfInterval from 'date-fns/eachWeekOfInterval'\r\nimport addMonths from 'date-fns/addMonths'\r\nimport subMonths from 'date-fns/subMonths'\r\nimport startOfMonth from 'date-fns/startOfMonth'\r\nimport endOfMonth from 'date-fns/endOfMonth'\r\nimport isSameMonth from 'date-fns/isSameMonth'\r\n\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport CssBaseline from '@material-ui/core/CssBaseline'\r\nimport Button from '@material-ui/core/Button'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport blue from '@material-ui/core/colors/blue'\r\nimport pink from '@material-ui/core/colors/pink'\r\nimport red from '@material-ui/core/colors/red'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  paper: {\r\n    margin: theme.spacing(5, 10),\r\n    padding: theme.spacing(5, 5),\r\n  },\r\n  yearmonth: {\r\n    margin: theme.spacing(2, 0, 1, 0),\r\n  },\r\n  tableHead: {\r\n    color: theme.palette.secondary.contrastText,\r\n    backgroundColor: theme.palette.secondary.light,\r\n  },\r\n}))\r\n\r\nconst useCalendarCellStyles = makeStyles(theme => ({\r\n  calendarCell: {\r\n    color: ({wday, isTargetMonth}) => {\r\n      if(isTargetMonth) {\r\n        switch(wday) {\r\n          case 0: // Sunday\r\n            return red[500]\r\n          case 6: // Saturday\r\n            return blue[500]\r\n          default:\r\n            return theme.palette.text.primary\r\n        }\r\n      } else {\r\n        // previous or next month\r\n        switch(wday) {\r\n            case 0: // Sunday\r\n            return red[200]\r\n          case 6: // Saturday\r\n            return blue[200]\r\n          default:\r\n            return theme.palette.text.secondary\r\n        }\r\n      }\r\n    },\r\n    backgroundColor: ({isToday}) =>\r\n      isToday ? pink[50] : \"transparent\"\r\n  },\r\n}))\r\n\r\nconst getCalendarArray = date => {\r\n  const sundays = eachWeekOfInterval({\r\n    start: startOfMonth(date),\r\n    end: endOfMonth(date)\r\n  })\r\n  return sundays.map(sunday =>\r\n    eachDayOfInterval({start: sunday, end: endOfWeek(sunday)})\r\n  )\r\n}\r\n\r\nconst calendarCellClick=()=>{\r\n  console.log('isToday');\r\n}\r\n\r\nfunction CalendarTableCell(props) {\r\n  const {wday, isTargetMonth, isToday, children, ...other} = props\r\n  const classes = useCalendarCellStyles(props)\r\n  return (<TableCell className={classes.calendarCell} {...other} onClick={calendarCellClick(isToday)}>{children}</TableCell>)\r\n}\r\n\r\nfunction App() {\r\n  const [targetDate, setTargetDate] = useState(new Date())\r\n  const classes = useStyles()\r\n  const calendar = getCalendarArray(targetDate)\r\n  const today = new Date()\r\n\r\n  return (\r\n    <div>\r\n      <CssBaseline />\r\n      <Paper className={classes.paper}>\r\n        <Grid container justify=\"space-between\">\r\n          <Grid item>\r\n            <Button variant=\"outlined\" onClick={() => setTargetDate(subMonths(targetDate, 1))}>前の月</Button>\r\n          </Grid>\r\n          <Grid item>\r\n            <Button variant=\"outlined\" onClick={() => setTargetDate(new Date())}>今月</Button>\r\n          </Grid>\r\n          <Grid item>\r\n            <Button variant=\"outlined\" onClick={() => setTargetDate(addMonths(targetDate, 1))}>次の月</Button>\r\n          </Grid>\r\n        </Grid>\r\n        <Typography variant=\"h4\" align=\"center\" className={classes.yearmonth}>{format(targetDate, 'y年M月')}</Typography>\r\n        <Table>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell align=\"center\" classes={{head: classes.tableHead, }}>日</TableCell>\r\n              <TableCell align=\"center\" classes={{head: classes.tableHead, }}>月</TableCell>\r\n              <TableCell align=\"center\" classes={{head: classes.tableHead, }}>火</TableCell>\r\n              <TableCell align=\"center\" classes={{head: classes.tableHead, }}>水</TableCell>\r\n              <TableCell align=\"center\" classes={{head: classes.tableHead, }}>木</TableCell>\r\n              <TableCell align=\"center\" classes={{head: classes.tableHead, }}>金</TableCell>\r\n              <TableCell align=\"center\" onClick={calendarCellClick} classes={{head: classes.tableHead, }}>土</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {calendar.map((weekRow, rowNum) => (\r\n              <TableRow key={rowNum}>\r\n                {weekRow.map(date => (\r\n                  <CalendarTableCell key={getDay(date)} wday={getDay(date)} isTargetMonth={isSameMonth(date, targetDate)} isToday={isSameDay(date, today)} align=\"center\">\r\n                    {getDate(date)}\r\n                  </CalendarTableCell>\r\n                ))}\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </Paper>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App"]},"metadata":{},"sourceType":"module"}