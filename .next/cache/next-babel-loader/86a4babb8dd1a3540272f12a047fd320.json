{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CommentIcon from \"@material-ui/icons/Comment\";\nimport RemoveCircleIcon from \"@material-ui/icons/RemoveCircle\";\nimport { useSelector } from \"react-redux\";\nconst useStyles = makeStyles(theme => createStyles({\n  roots: {\n    width: \"100%\",\n    maxWidth: 720,\n    margin: \"auto\",\n    backgroundColor: theme.palette.background.paper\n  }\n}));\nexport default function PatternList(props) {\n  const classes = useStyles();\n  const [checked, setChecked] = React.useState([0]);\n  const {\n    userTaskInfo\n  } = useSelector(state => state.tasks);\n\n  const handleToggle = value => () => {\n    const currentIndex = checked.indexOf(value);\n    const newChecked = [...checked];\n\n    if (currentIndex === -1) {\n      newChecked.push(value);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n\n    setChecked(newChecked);\n  };\n\n  const choicePatternTasks = userTaskInfo.tasks.filter(function (task) {\n    return task.patternInfo.some(task => task.patternID == props.choice);\n  });\n  console.log(\"choicePatternTasks:\" + choicePatternTasks);\n  return __jsx(List, {\n    className: classes.roots\n  }, choicePatternTasks.map(task => {\n    const taskPattern = task.patternInfo.filter(function (patternInfo) {\n      return patternInfo.patternID == props.choice;\n    });\n    const labelId = `checkbox-list-label-${taskPattern[0].patternID + taskPattern[0].order}`;\n    return __jsx(ListItem, {\n      key: taskPattern[0].patternID + taskPattern[0].order,\n      role: undefined,\n      dense: true,\n      button: true,\n      onClick: handleToggle(taskPattern[0].patternID + taskPattern[0].order)\n    }, __jsx(ListItemIcon, null, __jsx(IconButton, {\n      edge: \"end\",\n      \"aria-label\": \"comments\"\n    }, __jsx(RemoveCircleIcon, {\n      color: \"secondary\"\n    }))), __jsx(ListItemText, {\n      id: labelId,\n      primary: `Line item ${taskPattern[0].patternID + taskPattern[0].order} ${task.detail[\"testDetail1\"]} ${task.detail[\"testDetail2\"]}`\n    }), __jsx(ListItemSecondaryAction, null, __jsx(IconButton, {\n      edge: \"end\",\n      \"aria-label\": \"comments\"\n    }, __jsx(CommentIcon, null))));\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}