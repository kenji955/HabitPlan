{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\blelm\\\\Desktop\\\\AppCreate\\\\habitPlan\\\\src\\\\components\\\\view\\\\InputNormal.tsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { taskDetailRegister } from \"../../modules/tasksModule\";\nconst useStyles = makeStyles(theme => createStyles({\n  root: {\n    \"& .MuiTextField-root\": {\n      margin: theme.spacing(1),\n      width: \"25ch\"\n    }\n  }\n}));\nexport default function FormPropsTextFields(props) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const {\n    userTaskInfo\n  } = useSelector(state => state.tasks);\n\n  const onChangeHandler = event => {\n    // console.log(event.target.value);\n    // ここでevent.target.valueとラベル(連想配列のキー)を送って処理する。処理も未作成\n    dispatch(taskDetailRegister([event.target.value, props.label, props.index]));\n  };\n\n  const newTaskOnChangeHandler = event => {\n    // console.log(event.target.value);\n    // ここでevent.target.valueとラベル(連想配列のキー)を送って処理する。処理も未作成\n    const contentsCopy = props.contents.slice();\n    contentsCopy[props.contentIndex].value = event.target.value;\n    props.setContents(contentsCopy);\n  }; // 新規登録か更新かをチェックする。新規であればTrue\n\n\n  const checkNew = userTaskInfo.tasks.length < parseInt(props.index);\n\n  if (checkNew) {\n    return (// <form className={classes.root} noValidate autoComplete=\"off\">\n      __jsx(TextField, {\n        required: true,\n        id: \"standard-basic\",\n        label: props.label,\n        onChange: newTaskOnChangeHandler,\n        value: props.contents[props.contentIndex].value,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }\n      }) // </form>\n\n    );\n  } else if (props.required) {\n    return (// <form className={classes.root} noValidate autoComplete=\"off\">\n      __jsx(TextField, {\n        required: true,\n        id: \"standard-basic\",\n        label: props.label,\n        onChange: onChangeHandler,\n        value: userTaskInfo.tasks[parseInt(props.index)].detail[props.label],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }\n      }) // </form>\n\n    );\n  }\n\n  let valueContent;\n\n  if (userTaskInfo.tasks[parseInt(props.index)].detail[props.label]) {\n    valueContent = userTaskInfo.tasks[parseInt(props.index)].detail[props.label];\n  } else {\n    valueContent = \"\";\n  }\n\n  return (// <form className={classes.root} noValidate autoComplete=\"off\">\n    __jsx(TextField, {\n      id: \"standard-basic\",\n      label: props.label,\n      onChange: onChangeHandler,\n      value: valueContent // value={\n      //     userTaskInfo.tasks[parseInt(props.index)].detail[props.label]\n      // }\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }\n    }) // </form>\n\n  );\n}","map":{"version":3,"sources":["C:/Users/blelm/Desktop/AppCreate/habitPlan/src/components/view/InputNormal.tsx"],"names":["React","TextField","createStyles","makeStyles","useDispatch","useSelector","taskDetailRegister","useStyles","theme","root","margin","spacing","width","FormPropsTextFields","props","classes","dispatch","userTaskInfo","state","tasks","onChangeHandler","event","target","value","label","index","newTaskOnChangeHandler","contentsCopy","contents","slice","contentIndex","setContents","checkNew","length","parseInt","required","detail","valueContent"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../modules/rootReducer\";\r\nimport { taskDetailRegister } from \"../../modules/tasksModule\";\r\nimport { tasks } from \"../../modules/userTasksType\";\r\n\r\ntype newTasksType = {\r\n    [content: string]: string;\r\n};\r\n\r\ninterface props {\r\n    label: string;\r\n    required: boolean;\r\n    index: string;\r\n    contentIndex: number;\r\n    contents: {\r\n        label: string;\r\n        value: string;\r\n    }[];\r\n    setContents: React.Dispatch<\r\n        React.SetStateAction<\r\n            {\r\n                label: string;\r\n                value: string;\r\n            }[]\r\n        >\r\n    >;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            \"& .MuiTextField-root\": {\r\n                margin: theme.spacing(1),\r\n                width: \"25ch\",\r\n            },\r\n        },\r\n    })\r\n);\r\n\r\nexport default function FormPropsTextFields(props: props) {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const { userTaskInfo } = useSelector((state: RootState) => state.tasks);\r\n    const onChangeHandler = (event: any) => {\r\n        // console.log(event.target.value);\r\n        // ここでevent.target.valueとラベル(連想配列のキー)を送って処理する。処理も未作成\r\n        dispatch(\r\n            taskDetailRegister([event.target.value, props.label, props.index])\r\n        );\r\n    };\r\n    const newTaskOnChangeHandler = (event: any) => {\r\n        // console.log(event.target.value);\r\n        // ここでevent.target.valueとラベル(連想配列のキー)を送って処理する。処理も未作成\r\n\r\n        const contentsCopy = props.contents.slice();\r\n        contentsCopy[props.contentIndex].value = event.target.value;\r\n\r\n        props.setContents(contentsCopy);\r\n    };\r\n\r\n    // 新規登録か更新かをチェックする。新規であればTrue\r\n    const checkNew = userTaskInfo.tasks.length < parseInt(props.index);\r\n\r\n    if (checkNew) {\r\n        return (\r\n            // <form className={classes.root} noValidate autoComplete=\"off\">\r\n            <TextField\r\n                required\r\n                id=\"standard-basic\"\r\n                label={props.label}\r\n                onChange={newTaskOnChangeHandler}\r\n                value={props.contents[props.contentIndex].value}\r\n            />\r\n            // </form>\r\n        );\r\n    } else if (props.required) {\r\n        return (\r\n            // <form className={classes.root} noValidate autoComplete=\"off\">\r\n            <TextField\r\n                required\r\n                id=\"standard-basic\"\r\n                label={props.label}\r\n                onChange={onChangeHandler}\r\n                value={\r\n                    userTaskInfo.tasks[parseInt(props.index)].detail[\r\n                        props.label\r\n                    ]\r\n                }\r\n            />\r\n            // </form>\r\n        );\r\n    }\r\n    let valueContent;\r\n    if (userTaskInfo.tasks[parseInt(props.index)].detail[props.label]) {\r\n        valueContent =\r\n            userTaskInfo.tasks[parseInt(props.index)].detail[props.label];\r\n    } else {\r\n        valueContent = \"\";\r\n    }\r\n    return (\r\n        // <form className={classes.root} noValidate autoComplete=\"off\">\r\n        <TextField\r\n            id=\"standard-basic\"\r\n            label={props.label}\r\n            onChange={onChangeHandler}\r\n            value={valueContent}\r\n            // value={\r\n            //     userTaskInfo.tasks[parseInt(props.index)].detail[props.label]\r\n            // }\r\n        />\r\n        // </form>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}