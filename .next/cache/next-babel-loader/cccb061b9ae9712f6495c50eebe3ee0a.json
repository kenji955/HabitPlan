{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\blelm\\\\Desktop\\\\AppCreate\\\\habitPlan\\\\src\\\\components\\\\test\\\\Days.jsx\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport ScheduleOfTheDay from './ScheduleOfTheDay';\nexport default class Days extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modalIsOpen: false,\n      scheduleOfTheDay: 'loading...'\n    };\n    this.createTable = this.createTable.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n    this.getScheduleInfo = this.getScheduleInfo.bind(this);\n  }\n\n  getScheduleInfo(id) {\n    //You can add fetch api here to get schedules for today from api you built.\n    //Of course, you need to set up backend (e.g. Node.js, Express and PostgreSQL). \n    //The following variable: scheduleOfTheDay is a sample data. You enjoy BBQ every day.\n    const scheduleOfTheDay = {\n      1: 'BBQ',\n      2: 'BBQ',\n      3: 'BBQ',\n      4: 'BBQ',\n      5: 'BBQ',\n      6: 'BBQ',\n      7: 'BBQ',\n      8: 'BBQ',\n      9: 'BBQ',\n      10: 'BBQ',\n      11: 'BBQ',\n      12: 'BBQ',\n      13: 'BBQ',\n      14: 'BBQ',\n      15: 'BBQ',\n      16: 'BBQ',\n      17: 'BBQ',\n      18: 'BBQ',\n      19: 'BBQ',\n      20: 'BBQ',\n      21: 'BBQ',\n      22: 'BBQ',\n      23: 'BBQ',\n      24: 'BBQ',\n      25: 'BBQ',\n      26: 'BBQ',\n      27: 'BBQ',\n      28: 'BBQ',\n      29: 'BBQ',\n      30: 'BBQ',\n      31: 'BBQ'\n    };\n    return scheduleOfTheDay[id];\n  }\n\n  openModal(day, e) {\n    e.preventDefault();\n    const scheduleInfo = this.getScheduleInfo(day);\n    this.setState({\n      modalIsOpen: true,\n      scheduleOfTheDay: scheduleInfo\n    });\n  }\n\n  closeModal() {\n    this.setState({\n      modalIsOpen: false\n    });\n  }\n\n  createTable(year, month) {\n    const startDate = new Date(year, month, 1);\n    const endDate = new Date(year, month + 1, 0);\n    const numberOfWeeks = Math.ceil(((endDate - startDate) / (24 * 3600 * 1000) + 1) / 7) + 1;\n    const table = [];\n\n    for (let i = 0; i < numberOfWeeks; i += 1) {\n      table.push([]);\n\n      for (let j = 0; j < 7; j += 1) {\n        if (startDate.getMonth() === month && j === startDate.getDay()) {\n          table[i].push(startDate.getDate());\n          startDate.setDate(startDate.getDate() + 1);\n        } else {\n          table[i].push(null);\n        }\n      }\n    }\n\n    const dayOfWeeks = ['SUN', 'MON', 'TUE', 'WED', 'THR', 'FRI', 'SAT'];\n    return __jsx(Table, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 7\n      }\n    }, __jsx(TableHead, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }\n    }, __jsx(TableRow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }\n    }, dayOfWeeks.map((dayOfWeek, index) => {\n      if (index === 0 || index === 6) {\n        return __jsx(TableCell, {\n          className: \"holidays\",\n          numeric: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 19\n          }\n        }, dayOfWeek);\n      } else {\n        return __jsx(TableCell, {\n          numeric: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 19\n          }\n        }, dayOfWeek);\n      }\n    }))), __jsx(TableBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }\n    }, table.map(line => {\n      return __jsx(TableRow, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 15\n        }\n      }, line.map((day, index) => {\n        if (year === new Date().getFullYear() && month === new Date().getMonth() && day === new Date().getDate()) {\n          if (index === 0 || index === 6) {\n            return __jsx(TableCell, {\n              className: \"today chosenDay\",\n              numeric: true,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 25\n              }\n            }, __jsx(\"div\", {\n              className: \"holidays\",\n              onClick: this.openModal.bind(this, day),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 98,\n                columnNumber: 27\n              }\n            }, day), __jsx(ScheduleOfTheDay, {\n              isOpen: this.state.modalIsOpen,\n              onAfterOpen: this.afterOpenModal,\n              onRequestClose: this.closeModal,\n              scheduleOfTheDay: this.state.scheduleOfTheDay,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 27\n              }\n            }));\n          } else {\n            return __jsx(TableCell, {\n              className: \"today chosenDay\",\n              numeric: true,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 25\n              }\n            }, __jsx(\"div\", {\n              onClick: this.openModal.bind(this, day),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 27\n              }\n            }, day), __jsx(ScheduleOfTheDay, {\n              isOpen: this.state.modalIsOpen,\n              onAfterOpen: this.afterOpenModal,\n              onRequestClose: this.closeModal,\n              scheduleOfTheDay: this.state.scheduleOfTheDay,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 111,\n                columnNumber: 27\n              }\n            }));\n          }\n        } else {\n          if (index === 0 || index === 6) {\n            return __jsx(TableCell, {\n              className: \"chosenDay\",\n              numeric: true,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 25\n              }\n            }, __jsx(\"div\", {\n              className: \"holidays\",\n              onClick: this.openModal.bind(this, day),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 27\n              }\n            }, day), __jsx(ScheduleOfTheDay, {\n              isOpen: this.state.modalIsOpen,\n              onAfterOpen: this.afterOpenModal,\n              onRequestClose: this.closeModal,\n              scheduleOfTheDay: this.state.scheduleOfTheDay,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 27\n              }\n            }));\n          } else {\n            return __jsx(TableCell, {\n              className: \"chosenDay\",\n              numeric: true,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 25\n              }\n            }, __jsx(\"div\", {\n              onClick: this.openModal.bind(this, day),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 27\n              }\n            }, day), __jsx(ScheduleOfTheDay, {\n              isOpen: this.state.modalIsOpen,\n              onRequestClose: this.closeModal,\n              scheduleOfTheDay: this.state.scheduleOfTheDay,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 27\n              }\n            }));\n          }\n        }\n      }));\n    })));\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      className: \"days\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 7\n      }\n    }, __jsx(Paper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }\n    }, this.createTable(this.props.year, this.props.month)));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/blelm/Desktop/AppCreate/habitPlan/src/components/test/Days.jsx"],"names":["React","Component","Table","TableBody","TableCell","TableHead","TableRow","Paper","ScheduleOfTheDay","Days","constructor","props","state","modalIsOpen","scheduleOfTheDay","createTable","bind","closeModal","getScheduleInfo","id","openModal","day","e","preventDefault","scheduleInfo","setState","year","month","startDate","Date","endDate","numberOfWeeks","Math","ceil","table","i","push","j","getMonth","getDay","getDate","setDate","dayOfWeeks","map","dayOfWeek","index","line","getFullYear","afterOpenModal","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport ScheduleOfTheDay from './ScheduleOfTheDay';\r\n\r\n\r\nexport default class Days extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      modalIsOpen: false,\r\n      scheduleOfTheDay: 'loading...'\r\n    };\r\n\r\n    this.createTable = this.createTable.bind(this);\r\n    this.closeModal = this.closeModal.bind(this);\r\n    this.getScheduleInfo = this.getScheduleInfo.bind(this);\r\n  }\r\n\r\n  getScheduleInfo(id) {\r\n    //You can add fetch api here to get schedules for today from api you built.\r\n    //Of course, you need to set up backend (e.g. Node.js, Express and PostgreSQL). \r\n    //The following variable: scheduleOfTheDay is a sample data. You enjoy BBQ every day.\r\n    const scheduleOfTheDay = {\r\n      1: 'BBQ', 2: 'BBQ', 3: 'BBQ', 4: 'BBQ', 5: 'BBQ', 6: 'BBQ', 7: 'BBQ', 8: 'BBQ', 9: 'BBQ', 10: 'BBQ',\r\n      11: 'BBQ', 12: 'BBQ', 13: 'BBQ', 14: 'BBQ', 15: 'BBQ', 16: 'BBQ', 17: 'BBQ', 18: 'BBQ', 19: 'BBQ', 20: 'BBQ',\r\n      21: 'BBQ', 22: 'BBQ', 23: 'BBQ', 24: 'BBQ', 25: 'BBQ', 26: 'BBQ', 27: 'BBQ', 28: 'BBQ', 29: 'BBQ', 30: 'BBQ', 31: 'BBQ'\r\n    };\r\n\r\n    return scheduleOfTheDay[id];\r\n  }\r\n\r\n  openModal(day, e) {\r\n    e.preventDefault();\r\n    const scheduleInfo = this.getScheduleInfo(day);\r\n    this.setState({\r\n      modalIsOpen: true,\r\n      scheduleOfTheDay: scheduleInfo\r\n    });\r\n  }\r\n\r\n  closeModal() {\r\n    this.setState({\r\n      modalIsOpen: false\r\n    });\r\n  }\r\n\r\n  createTable(year, month) {\r\n    const startDate = new Date(year, month, 1);\r\n    const endDate = new Date(year, month + 1, 0);\r\n    const numberOfWeeks = Math.ceil(((endDate - startDate) / (24 * 3600 * 1000) + 1) / 7) + 1;\r\n\r\n    const table = [];\r\n    for (let i = 0; i < numberOfWeeks; i += 1) {\r\n      table.push([]);\r\n      for (let j = 0; j < 7; j += 1) {\r\n        if (startDate.getMonth() === month && j === startDate.getDay()) {\r\n          table[i].push(startDate.getDate());\r\n          startDate.setDate(startDate.getDate() + 1);\r\n        } else {\r\n          table[i].push(null);\r\n        }\r\n      }\r\n    }\r\n\r\n    const dayOfWeeks = ['SUN', 'MON', 'TUE', 'WED', 'THR', 'FRI', 'SAT'];\r\n\r\n    return (\r\n      <Table>\r\n        <TableHead>\r\n          <TableRow>\r\n            {dayOfWeeks.map((dayOfWeek, index) => {\r\n              if (index === 0 || index === 6) {\r\n                return (\r\n                  <TableCell className='holidays' numeric>{dayOfWeek}</TableCell>\r\n                )\r\n              } else {\r\n                return (\r\n                  <TableCell numeric>{dayOfWeek}</TableCell>\r\n                )\r\n              }\r\n            })}\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {table.map(line => {\r\n            return (\r\n              <TableRow>\r\n                {line.map((day, index) => {\r\n                  if (year === new Date().getFullYear() && month === new Date().getMonth() && day === new Date().getDate()) {\r\n                    if (index === 0 || index === 6) {\r\n                      return (\r\n                        <TableCell className='today chosenDay' numeric>\r\n                          <div className='holidays' onClick={this.openModal.bind(this, day)}>{day}</div>\r\n                          <ScheduleOfTheDay \r\n                            isOpen={this.state.modalIsOpen}\r\n                            onAfterOpen={this.afterOpenModal}\r\n                            onRequestClose={this.closeModal}\r\n                            scheduleOfTheDay={this.state.scheduleOfTheDay}\r\n                          />\r\n                        </TableCell>\r\n                      )\r\n                    } else {\r\n                      return (\r\n                        <TableCell className='today chosenDay' numeric>\r\n                          <div onClick={this.openModal.bind(this, day)}>{day}</div>\r\n                          <ScheduleOfTheDay \r\n                            isOpen={this.state.modalIsOpen}\r\n                            onAfterOpen={this.afterOpenModal}\r\n                            onRequestClose={this.closeModal}\r\n                            scheduleOfTheDay={this.state.scheduleOfTheDay}\r\n                          />\r\n                        </TableCell>\r\n                      )\r\n                    }\r\n                  } else {\r\n                    if (index === 0 || index === 6) {\r\n                      return (\r\n                        <TableCell className='chosenDay' numeric>\r\n                          <div className='holidays' onClick={this.openModal.bind(this, day)}>{day}</div>\r\n                          <ScheduleOfTheDay \r\n                            isOpen={this.state.modalIsOpen}\r\n                            onAfterOpen={this.afterOpenModal}\r\n                            onRequestClose={this.closeModal}\r\n                            scheduleOfTheDay={this.state.scheduleOfTheDay}\r\n                          />\r\n                        </TableCell>\r\n                      )\r\n                    } else {\r\n                      return (\r\n                        <TableCell className='chosenDay' numeric>\r\n                          <div onClick={this.openModal.bind(this, day)}>{day}</div>\r\n                          <ScheduleOfTheDay \r\n                            isOpen={this.state.modalIsOpen}\r\n                            onRequestClose={this.closeModal}\r\n                            scheduleOfTheDay={this.state.scheduleOfTheDay}\r\n                          />\r\n                        </TableCell>\r\n                      )\r\n                    }\r\n                  }\r\n                })}\r\n              </TableRow>\r\n            )\r\n          })}\r\n        </TableBody>\r\n      </Table>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='days'>\r\n        <Paper>\r\n          {this.createTable(this.props.year, this.props.month)}\r\n        </Paper>\r\n      </div>\r\n    )\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}