{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\blelm\\\\Desktop\\\\AppCreate\\\\habitPlan\\\\src\\\\components\\\\test\\\\firebaseTest\\\\FirebaseAuthComponent.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { firebase } from \"./firebaseTest\"; // ログイン、ログアウトボタン実装\n\nexport default function FirebaseAuthComponent() {\n  _s();\n\n  var loggedin = useFirebaseLogin();\n  console.log('loggedin');\n  console.log(loggedin);\n\n  if (!loggedin) {\n    // ログインしていなければログインボタンを表示\n    return __jsx(\"button\", {\n      onClick: function onClick() {\n        return signInWithPopup();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 16\n      }\n    }, \"\\u30ED\\u30B0\\u30A4\\u30F3\");\n  } // ログインしているならログアウトボタンを表示\n\n\n  return __jsx(\"button\", {\n    onClick: function onClick() {\n      return signOut();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 12\n    }\n  }, \"\\u30ED\\u30B0\\u30A2\\u30A6\\u30C8\");\n} // ログイン処理\n\n_s(FirebaseAuthComponent, \"w5Vs//JmD7CglWAG3fAH0WdbCyk=\", false, function () {\n  return [useFirebaseLogin];\n});\n\n_c = FirebaseAuthComponent;\n\nvar signInWithPopup = function signInWithPopup() {\n  // Googleプロバイダオブジェクトのインスタンスを作成\n  var googleAuthProvider = new firebase.auth.GoogleAuthProvider(); // 別タブでログイン画面に飛ばしたいため、signInWithPopupを使う\n  // リダイレクトでログイン画面に飛ばしたい場合はsignInWithRedirectを使う\n\n  return firebase.auth().signInWithPopup(googleAuthProvider);\n}; // ログアウト処理\n\n\nvar signOut = function signOut() {\n  // signOutを呼び出すだけでOK\n  return firebase.auth().signOut();\n}; // ログインしているかチェックするカスタムフックを作る\n\n\nvar useFirebaseLogin = function useFirebaseLogin() {\n  _s2();\n\n  // stateでログイン状態を保持\n  var _useState = useState(false),\n      loggedin = _useState[0],\n      setLoggedin = _useState[1];\n\n  useEffect(function () {\n    // 現在ログインしているユーザを取得\n    firebase.auth().onAuthStateChanged(function (user) {\n      // ユーザ情報が取れればログイン状態\n      console.log('user');\n      console.log(user.uid);\n      setLoggedin(!!user);\n    });\n  }, []); // ログイン情報を返却\n\n  return loggedin;\n};\n\n_s2(useFirebaseLogin, \"ItU6/jvOVM8xuqe0HJErPC+yG4k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"FirebaseAuthComponent\");","map":{"version":3,"sources":["C:/Users/blelm/Desktop/AppCreate/habitPlan/src/components/test/firebaseTest/FirebaseAuthComponent.tsx"],"names":["React","useState","useEffect","firebase","FirebaseAuthComponent","loggedin","useFirebaseLogin","console","log","signInWithPopup","signOut","googleAuthProvider","auth","GoogleAuthProvider","setLoggedin","onAuthStateChanged","user","uid"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,QAAT,QAAyB,gBAAzB,C,CAEA;;AACA,eAAe,SAASC,qBAAT,GAAiC;AAAA;;AAC5C,MAAMC,QAAQ,GAAGC,gBAAgB,EAAjC;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;;AACA,MAAI,CAACA,QAAL,EAAe;AACX;AACA,WAAO;AAAQ,MAAA,OAAO,EAAE;AAAA,eAAMI,eAAe,EAArB;AAAA,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAAP;AACH,GAP2C,CAQ5C;;;AACA,SAAO;AAAQ,IAAA,OAAO,EAAE;AAAA,aAAMC,OAAO,EAAb;AAAA,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAAP;AACH,C,CAED;;GAZwBN,qB;UACHE,gB;;;KADGF,qB;;AAaxB,IAAMK,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC1B;AACA,MAAME,kBAAkB,GAAG,IAAIR,QAAQ,CAACS,IAAT,CAAcC,kBAAlB,EAA3B,CAF0B,CAG1B;AACA;;AACA,SAAOV,QAAQ,CAACS,IAAT,GAAgBH,eAAhB,CAAgCE,kBAAhC,CAAP;AACH,CAND,C,CAQA;;;AACA,IAAMD,OAAO,GAAG,SAAVA,OAAU,GAAM;AAClB;AACA,SAAOP,QAAQ,CAACS,IAAT,GAAgBF,OAAhB,EAAP;AACH,CAHD,C,CAKA;;;AACA,IAAMJ,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAAA;;AAC3B;AAD2B,kBAEKL,QAAQ,CAAC,KAAD,CAFb;AAAA,MAEpBI,QAFoB;AAAA,MAEVS,WAFU;;AAG3BZ,EAAAA,SAAS,CAAC,YAAM;AACZ;AACAC,IAAAA,QAAQ,CAACS,IAAT,GAAgBG,kBAAhB,CAAmC,UAACC,IAAD,EAAU;AACzC;AACAT,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYQ,IAAI,CAACC,GAAjB;AACAH,MAAAA,WAAW,CAAC,CAAC,CAACE,IAAH,CAAX;AACH,KALD;AAMH,GARQ,EAQN,EARM,CAAT,CAH2B,CAY3B;;AACA,SAAOX,QAAP;AACH,CAdD;;IAAMC,gB","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { firebase } from \"./firebaseTest\";\r\n\r\n// ログイン、ログアウトボタン実装\r\nexport default function FirebaseAuthComponent() {\r\n    const loggedin = useFirebaseLogin();\r\n    console.log('loggedin');\r\n    console.log(loggedin);\r\n    if (!loggedin) {\r\n        // ログインしていなければログインボタンを表示\r\n        return <button onClick={() => signInWithPopup()}>ログイン</button>;\r\n    }\r\n    // ログインしているならログアウトボタンを表示\r\n    return <button onClick={() => signOut()}>ログアウト</button>;\r\n}\r\n\r\n// ログイン処理\r\nconst signInWithPopup = () => {\r\n    // Googleプロバイダオブジェクトのインスタンスを作成\r\n    const googleAuthProvider = new firebase.auth.GoogleAuthProvider();\r\n    // 別タブでログイン画面に飛ばしたいため、signInWithPopupを使う\r\n    // リダイレクトでログイン画面に飛ばしたい場合はsignInWithRedirectを使う\r\n    return firebase.auth().signInWithPopup(googleAuthProvider);\r\n};\r\n\r\n// ログアウト処理\r\nconst signOut = () => {\r\n    // signOutを呼び出すだけでOK\r\n    return firebase.auth().signOut();\r\n};\r\n\r\n// ログインしているかチェックするカスタムフックを作る\r\nconst useFirebaseLogin = () => {\r\n    // stateでログイン状態を保持\r\n    const [loggedin, setLoggedin] = useState(false);\r\n    useEffect(() => {\r\n        // 現在ログインしているユーザを取得\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            // ユーザ情報が取れればログイン状態\r\n            console.log('user');\r\n            console.log(user.uid);\r\n            setLoggedin(!!user);\r\n        });\r\n    }, []);\r\n    // ログイン情報を返却\r\n    return loggedin;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}