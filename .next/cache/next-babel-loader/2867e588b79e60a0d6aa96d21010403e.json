{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\blelm\\\\Desktop\\\\AppCreate\\\\habitPlan\\\\src\\\\components\\\\test\\\\firebaseTest\\\\FirebaseAuthComponent.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { firebase } from \"./firebaseTest\";\nimport { login } from \"../../../modules/userModule\";\nimport { useSelector, useDispatch } from \"react-redux\";\n// ログイン、ログアウトボタン実装\nexport default function FirebaseAuthComponent() {\n  const loggedin = useFirebaseLogin(); // console.log('loggedin');\n  // console.log(loggedin);\n\n  const dispatch = useDispatch();\n  const {\n    userId\n  } = useSelector(state => state.user);\n\n  if (!loggedin) {\n    // ログインしていなければログインボタンを表示\n    return __jsx(\"button\", {\n      onClick: () => signInWithPopup(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 16\n      }\n    }, \"\\u30ED\\u30B0\\u30A4\\u30F3\");\n  } // ログインしているならログアウトボタンを表示\n\n\n  return __jsx(\"button\", {\n    onClick: () => signOut(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 12\n    }\n  }, \"\\u30ED\\u30B0\\u30A2\\u30A6\\u30C8\");\n} // ログイン処理\n\nconst signInWithPopup = () => {\n  // Googleプロバイダオブジェクトのインスタンスを作成\n  const googleAuthProvider = new firebase.auth.GoogleAuthProvider(); // 別タブでログイン画面に飛ばしたいため、signInWithPopupを使う\n  // リダイレクトでログイン画面に飛ばしたい場合はsignInWithRedirectを使う\n\n  return firebase.auth().signInWithPopup(googleAuthProvider);\n}; // ログアウト処理\n\n\nconst signOut = () => {\n  // signOutを呼び出すだけでOK\n  return firebase.auth().signOut();\n}; // ログインしているかチェックするカスタムフックを作る\n\n\nconst useFirebaseLogin = () => {\n  // stateでログイン状態を保持\n  const {\n    0: loggedin,\n    1: setLoggedin\n  } = useState(false);\n  const dispatch = useDispatch();\n  const {\n    userId\n  } = useSelector(state => state.user);\n  useEffect(() => {\n    // 現在ログインしているユーザを取得\n    firebase.auth().onAuthStateChanged(user => {\n      // ユーザ情報が取れればログイン状態\n      console.log('user');\n      let userIdCheck;\n      !!user ? userIdCheck = user.uid : userIdCheck = ''; // これをreduxで管理する\n\n      dispatch(login(userIdCheck));\n      console.log(userId);\n      setLoggedin(!!user);\n    });\n  }, []); // ログイン情報を返却\n\n  return loggedin;\n};","map":{"version":3,"sources":["C:/Users/blelm/Desktop/AppCreate/habitPlan/src/components/test/firebaseTest/FirebaseAuthComponent.tsx"],"names":["React","useState","useEffect","firebase","login","useSelector","useDispatch","FirebaseAuthComponent","loggedin","useFirebaseLogin","dispatch","userId","state","user","signInWithPopup","signOut","googleAuthProvider","auth","GoogleAuthProvider","setLoggedin","onAuthStateChanged","console","log","userIdCheck","uid"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,KAAT,QAAsB,6BAAtB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAGA;AACA,eAAe,SAASC,qBAAT,GAAiC;AAC5C,QAAMC,QAAQ,GAAGC,gBAAgB,EAAjC,CAD4C,CAE5C;AACA;;AAEA,QAAMC,QAAQ,GAAGJ,WAAW,EAA5B;AAEA,QAAM;AAAEK,IAAAA;AAAF,MAAaN,WAAW,CAAEO,KAAD,IAAsBA,KAAK,CAACC,IAA7B,CAA9B;;AAEA,MAAI,CAACL,QAAL,EAAe;AACX;AACA,WAAO;AAAQ,MAAA,OAAO,EAAE,MAAMM,eAAe,EAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAAP;AACH,GAZ2C,CAa5C;;;AACA,SAAO;AAAQ,IAAA,OAAO,EAAE,MAAMC,OAAO,EAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAAP;AACH,C,CAED;;AACA,MAAMD,eAAe,GAAG,MAAM;AAC1B;AACA,QAAME,kBAAkB,GAAG,IAAIb,QAAQ,CAACc,IAAT,CAAcC,kBAAlB,EAA3B,CAF0B,CAG1B;AACA;;AACA,SAAOf,QAAQ,CAACc,IAAT,GAAgBH,eAAhB,CAAgCE,kBAAhC,CAAP;AACH,CAND,C,CAQA;;;AACA,MAAMD,OAAO,GAAG,MAAM;AAClB;AACA,SAAOZ,QAAQ,CAACc,IAAT,GAAgBF,OAAhB,EAAP;AACH,CAHD,C,CAKA;;;AACA,MAAMN,gBAAgB,GAAG,MAAM;AAC3B;AACA,QAAM;AAAA,OAACD,QAAD;AAAA,OAAWW;AAAX,MAA0BlB,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAMS,QAAQ,GAAGJ,WAAW,EAA5B;AAEA,QAAM;AAAEK,IAAAA;AAAF,MAAaN,WAAW,CAAEO,KAAD,IAAsBA,KAAK,CAACC,IAA7B,CAA9B;AAEAX,EAAAA,SAAS,CAAC,MAAM;AACZ;AACAC,IAAAA,QAAQ,CAACc,IAAT,GAAgBG,kBAAhB,CAAoCP,IAAD,IAAU;AACzC;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACA,UAAIC,WAAJ;AACA,OAAC,CAACV,IAAF,GAASU,WAAW,GAAGV,IAAI,CAACW,GAA5B,GAAkCD,WAAW,GAAG,EAAhD,CAJyC,CAKzC;;AACAb,MAAAA,QAAQ,CAACN,KAAK,CAACmB,WAAD,CAAN,CAAR;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAYX,MAAZ;AAEAQ,MAAAA,WAAW,CAAC,CAAC,CAACN,IAAH,CAAX;AACH,KAVD;AAWH,GAbQ,EAaN,EAbM,CAAT,CAP2B,CAqB3B;;AACA,SAAOL,QAAP;AACH,CAvBD","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { firebase } from \"./firebaseTest\";\r\nimport { login } from \"../../../modules/userModule\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { RootState } from \"../../../modules/rootReducer\";\r\n\r\n// ログイン、ログアウトボタン実装\r\nexport default function FirebaseAuthComponent() {\r\n    const loggedin = useFirebaseLogin();\r\n    // console.log('loggedin');\r\n    // console.log(loggedin);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const { userId } = useSelector((state: RootState) => state.user);\r\n\r\n    if (!loggedin) {\r\n        // ログインしていなければログインボタンを表示\r\n        return <button onClick={() => signInWithPopup()}>ログイン</button>;\r\n    }\r\n    // ログインしているならログアウトボタンを表示\r\n    return <button onClick={() => signOut()}>ログアウト</button>;\r\n}\r\n\r\n// ログイン処理\r\nconst signInWithPopup = () => {\r\n    // Googleプロバイダオブジェクトのインスタンスを作成\r\n    const googleAuthProvider = new firebase.auth.GoogleAuthProvider();\r\n    // 別タブでログイン画面に飛ばしたいため、signInWithPopupを使う\r\n    // リダイレクトでログイン画面に飛ばしたい場合はsignInWithRedirectを使う\r\n    return firebase.auth().signInWithPopup(googleAuthProvider);\r\n};\r\n\r\n// ログアウト処理\r\nconst signOut = () => {\r\n    // signOutを呼び出すだけでOK\r\n    return firebase.auth().signOut();\r\n};\r\n\r\n// ログインしているかチェックするカスタムフックを作る\r\nconst useFirebaseLogin = () => {\r\n    // stateでログイン状態を保持\r\n    const [loggedin, setLoggedin] = useState(false);\r\n    const dispatch = useDispatch();\r\n\r\n    const { userId } = useSelector((state: RootState) => state.user);\r\n\r\n    useEffect(() => {\r\n        // 現在ログインしているユーザを取得\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            // ユーザ情報が取れればログイン状態\r\n            console.log('user');\r\n            let userIdCheck:string;\r\n            !!user ? userIdCheck = user.uid : userIdCheck = '';\r\n            // これをreduxで管理する\r\n            dispatch(login(userIdCheck));\r\n            console.log(userId);\r\n\r\n            setLoggedin(!!user);\r\n        });\r\n    }, []);\r\n    // ログイン情報を返却\r\n    return loggedin;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}