{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CommentIcon from \"@material-ui/icons/Comment\";\nimport RemoveCircleIcon from \"@material-ui/icons/RemoveCircle\";\nimport { useSelector } from \"react-redux\";\nvar useStyles = makeStyles(function (theme) {\n  return createStyles({\n    roots: {\n      width: \"100%\",\n      maxWidth: 720,\n      margin: \"auto\",\n      backgroundColor: theme.palette.background.paper\n    }\n  });\n});\nexport default function PatternList(props) {\n  var classes = useStyles();\n\n  var _React$useState = React.useState([0]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      checked = _React$useState2[0],\n      setChecked = _React$useState2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.tasks;\n  }),\n      userTaskInfo = _useSelector.userTaskInfo;\n\n  var handleToggle = function handleToggle(value) {\n    return function () {\n      var currentIndex = checked.indexOf(value);\n\n      var newChecked = _toConsumableArray(checked);\n\n      if (currentIndex === -1) {\n        newChecked.push(value);\n      } else {\n        newChecked.splice(currentIndex, 1);\n      }\n\n      setChecked(newChecked);\n    };\n  };\n\n  var choicePatternTasks = userTaskInfo.tasks.filter(function (task) {\n    return task.patternInfo.some(function (task) {\n      return task.patternID == props.choice;\n    });\n  });\n  console.log(\"choicePatternTasks:\" + choicePatternTasks);\n  return __jsx(List, {\n    className: classes.roots\n  }, choicePatternTasks.map(function (task) {\n    var taskPattern = task.patternInfo.filter(function (patternInfo) {\n      return patternInfo.patternID == props.choice;\n    });\n    var labelId = \"checkbox-list-label-\".concat(taskPattern[0].patternID + taskPattern[0].order);\n    return __jsx(ListItem, {\n      key: taskPattern[0].patternID + taskPattern[0].order,\n      role: undefined,\n      dense: true,\n      button: true,\n      onClick: handleToggle(taskPattern[0].patternID + taskPattern[0].order)\n    }, __jsx(ListItemIcon, null, __jsx(IconButton, {\n      edge: \"end\",\n      \"aria-label\": \"comments\"\n    }, __jsx(RemoveCircleIcon, {\n      color: \"secondary\"\n    }))), __jsx(ListItemText, {\n      id: labelId,\n      primary: \"Line item \".concat(taskPattern[0].patternID + '_' + taskPattern[0].order, \" \").concat(task.detail[\"testDetail1\"], \" \").concat(task.detail[\"testDetail2\"])\n    }), __jsx(ListItemSecondaryAction, null, __jsx(IconButton, {\n      edge: \"end\",\n      \"aria-label\": \"comments\"\n    }, __jsx(CommentIcon, null))));\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}