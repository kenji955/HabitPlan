{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\blelm\\\\Desktop\\\\AppCreate\\\\habitPlan\\\\src\\\\components\\\\test\\\\Calendar3.jsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { calendarPatternRegster } from \"../../modules/tasksModule\";\nimport { RootState } from \"../../modules/rootReducer\";\nimport format from \"date-fns/format\";\nimport getDate from \"date-fns/getDate\";\nimport getDay from \"date-fns/getDay\";\nimport isSameDay from \"date-fns/isSameDay\";\nimport eachDayOfInterval from \"date-fns/eachDayOfInterval\";\nimport endOfWeek from \"date-fns/endOfWeek\";\nimport eachWeekOfInterval from \"date-fns/eachWeekOfInterval\";\nimport addMonths from \"date-fns/addMonths\";\nimport subMonths from \"date-fns/subMonths\";\nimport startOfMonth from \"date-fns/startOfMonth\";\nimport endOfMonth from \"date-fns/endOfMonth\";\nimport isSameMonth from \"date-fns/isSameMonth\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Typography from \"@material-ui/core/Typography\";\nimport blue from \"@material-ui/core/colors/blue\";\nimport pink from \"@material-ui/core/colors/pink\";\nimport red from \"@material-ui/core/colors/red\";\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    margin: theme.spacing(5, 10),\n    padding: theme.spacing(5, 5)\n  },\n  yearmonth: {\n    margin: theme.spacing(2, 0, 1, 0)\n  },\n  tableHead: {\n    color: theme.palette.secondary.contrastText,\n    backgroundColor: theme.palette.secondary.light\n  }\n}));\nconst useCalendarCellStyles = makeStyles(theme => ({\n  calendarCell: {\n    color: ({\n      wday,\n      isTargetMonth\n    }) => {\n      if (isTargetMonth) {\n        switch (wday) {\n          case 0:\n            // Sunday\n            return red[500];\n\n          case 6:\n            // Saturday\n            return blue[500];\n\n          default:\n            return theme.palette.text.primary;\n        }\n      } else {\n        // previous or next month\n        switch (wday) {\n          case 0:\n            // Sunday\n            return red[200];\n\n          case 6:\n            // Saturday\n            return blue[200];\n\n          default:\n            return theme.palette.text.secondary;\n        }\n      }\n    },\n    backgroundColor: ({\n      isToday\n    }) => isToday ? pink[50] : \"transparent\"\n  }\n}));\n\nconst getCalendarArray = date => {\n  const sundays = eachWeekOfInterval({\n    start: startOfMonth(date),\n    end: endOfMonth(date)\n  });\n  return sundays.map(sunday => eachDayOfInterval({\n    start: sunday,\n    end: endOfWeek(sunday)\n  }));\n};\n\nconst calendarCellClick = (dateData, dispatch, choice) => () => {\n  const year = dateData.getFullYear();\n  const month = dateData.getMonth() + 1;\n  const date = dateData.getDate();\n  dispatch(calendarPatternRegster([year, month, date, choice]));\n};\n\nfunction PatternRegistrationStatus(dateData, userTaskInfo) {\n  const year = dateData.getFullYear();\n  const month = dateData.getMonth() + 1;\n  const date = dateData.getDate();\n  console.log(\"チェック：\" + date + \":\" + month + \":\" + year);\n  console.log(\"チェック2\");\n  console.log(userTaskInfo.calendar[year]);\n\n  if ([date] in userTaskInfo.calendar[year][month]) {\n    //存在する場合の処理\n    console.log(\"dateあり：\" + date);\n    return \"あり\";\n  } else {\n    console.log(\"dateなし：\" + date);\n    return \"なし\";\n  }\n}\n\n;\n\nfunction CalendarTableCell(props) {\n  const {\n    key,\n    wday,\n    isTargetMonth,\n    isToday,\n    children,\n    dateData,\n    dispatch,\n    choice\n  } = props,\n        other = _objectWithoutProperties(props, [\"key\", \"wday\", \"isTargetMonth\", \"isToday\", \"children\", \"dateData\", \"dispatch\", \"choice\"]);\n\n  const classes = useCalendarCellStyles(props);\n  return __jsx(TableCell, _extends({\n    className: classes.calendarCell\n  }, other, {\n    onClick: calendarCellClick(dateData, dispatch, choice),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  }), children);\n}\n\nfunction App(props) {\n  const {\n    0: targetDate,\n    1: setTargetDate\n  } = useState(new Date());\n  const classes = useStyles();\n  const calendar = getCalendarArray(targetDate);\n  const today = new Date();\n  const dispatch = useDispatch();\n  const {\n    userTaskInfo\n  } = useSelector(state => state.tasks);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }\n  }, __jsx(CssBaseline, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }\n  }), __jsx(Paper, {\n    className: classes.paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }\n  }, __jsx(Grid, {\n    container: true,\n    justify: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 17\n    }\n  }, __jsx(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    variant: \"outlined\",\n    onClick: () => setTargetDate(subMonths(targetDate, 1)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 25\n    }\n  }, \"\\u524D\\u306E\\u6708\")), __jsx(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    variant: \"outlined\",\n    onClick: () => setTargetDate(new Date()),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 25\n    }\n  }, \"\\u4ECA\\u6708\")), __jsx(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    variant: \"outlined\",\n    onClick: () => setTargetDate(addMonths(targetDate, 1)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 25\n    }\n  }, \"\\u6B21\\u306E\\u6708\"))), __jsx(Typography, {\n    variant: \"h4\",\n    align: \"center\",\n    className: classes.yearmonth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 17\n    }\n  }, format(targetDate, \"y年M月\")), __jsx(Table, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 17\n    }\n  }, __jsx(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 21\n    }\n  }, __jsx(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 25\n    }\n  }, __jsx(TableCell, {\n    align: \"center\",\n    classes: {\n      head: classes.tableHead\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 29\n    }\n  }, \"\\u65E5\"), __jsx(TableCell, {\n    align: \"center\",\n    classes: {\n      head: classes.tableHead\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 29\n    }\n  }, \"\\u6708\"), __jsx(TableCell, {\n    align: \"center\",\n    classes: {\n      head: classes.tableHead\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 29\n    }\n  }, \"\\u706B\"), __jsx(TableCell, {\n    align: \"center\",\n    classes: {\n      head: classes.tableHead\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 29\n    }\n  }, \"\\u6C34\"), __jsx(TableCell, {\n    align: \"center\",\n    classes: {\n      head: classes.tableHead\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 29\n    }\n  }, \"\\u6728\"), __jsx(TableCell, {\n    align: \"center\",\n    classes: {\n      head: classes.tableHead\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 29\n    }\n  }, \"\\u91D1\"), __jsx(TableCell, {\n    align: \"center\",\n    onClick: calendarCellClick,\n    classes: {\n      head: classes.tableHead\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 29\n    }\n  }, \"\\u571F\"))), __jsx(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 21\n    }\n  }, calendar.map((weekRow, rowNum) => __jsx(TableRow, {\n    key: rowNum,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 29\n    }\n  }, weekRow.map(date => __jsx(CalendarTableCell, {\n    key: getDay(date),\n    wday: getDay(date),\n    isTargetMonth: isSameMonth(date, targetDate),\n    isToday: isSameDay(date, today),\n    dateData: date,\n    dispatch: dispatch,\n    choice: props.choice,\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 37\n    }\n  }, getDate(date), PatternRegistrationStatus(date, userTaskInfo)))))))));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/blelm/Desktop/AppCreate/habitPlan/src/components/test/Calendar3.jsx"],"names":["React","useState","useDispatch","useSelector","calendarPatternRegster","RootState","format","getDate","getDay","isSameDay","eachDayOfInterval","endOfWeek","eachWeekOfInterval","addMonths","subMonths","startOfMonth","endOfMonth","isSameMonth","makeStyles","CssBaseline","Button","Grid","Paper","Table","TableBody","TableCell","TableHead","TableRow","Typography","blue","pink","red","useStyles","theme","paper","margin","spacing","padding","yearmonth","tableHead","color","palette","secondary","contrastText","backgroundColor","light","useCalendarCellStyles","calendarCell","wday","isTargetMonth","text","primary","isToday","getCalendarArray","date","sundays","start","end","map","sunday","calendarCellClick","dateData","dispatch","choice","year","getFullYear","month","getMonth","PatternRegistrationStatus","userTaskInfo","console","log","calendar","CalendarTableCell","props","key","children","other","classes","App","targetDate","setTargetDate","Date","today","state","tasks","head","weekRow","rowNum"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,sBAAT,QAAuC,2BAAvC;AACA,SAASC,SAAT,QAA0B,2BAA1B;AAEA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,iBAAP,MAA8B,4BAA9B;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,kBAAP,MAA+B,6BAA/B;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AAEA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,IAAP,MAAiB,+BAAjB;AACA,OAAOC,IAAP,MAAiB,+BAAjB;AACA,OAAOC,GAAP,MAAgB,8BAAhB;AAEA,MAAMC,SAAS,GAAGd,UAAU,CAAEe,KAAD,KAAY;AACrCC,EAAAA,KAAK,EAAE;AACHC,IAAAA,MAAM,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,EAAiB,EAAjB,CADL;AAEHC,IAAAA,OAAO,EAAEJ,KAAK,CAACG,OAAN,CAAc,CAAd,EAAiB,CAAjB;AAFN,GAD8B;AAKrCE,EAAAA,SAAS,EAAE;AACPH,IAAAA,MAAM,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB;AADD,GAL0B;AAQrCG,EAAAA,SAAS,EAAE;AACPC,IAAAA,KAAK,EAAEP,KAAK,CAACQ,OAAN,CAAcC,SAAd,CAAwBC,YADxB;AAEPC,IAAAA,eAAe,EAAEX,KAAK,CAACQ,OAAN,CAAcC,SAAd,CAAwBG;AAFlC;AAR0B,CAAZ,CAAD,CAA5B;AAcA,MAAMC,qBAAqB,GAAG5B,UAAU,CAAEe,KAAD,KAAY;AACjDc,EAAAA,YAAY,EAAE;AACVP,IAAAA,KAAK,EAAE,CAAC;AAAEQ,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAD,KAA6B;AAChC,UAAIA,aAAJ,EAAmB;AACf,gBAAQD,IAAR;AACI,eAAK,CAAL;AAAQ;AACJ,mBAAOjB,GAAG,CAAC,GAAD,CAAV;;AACJ,eAAK,CAAL;AAAQ;AACJ,mBAAOF,IAAI,CAAC,GAAD,CAAX;;AACJ;AACI,mBAAOI,KAAK,CAACQ,OAAN,CAAcS,IAAd,CAAmBC,OAA1B;AANR;AAQH,OATD,MASO;AACH;AACA,gBAAQH,IAAR;AACI,eAAK,CAAL;AAAQ;AACJ,mBAAOjB,GAAG,CAAC,GAAD,CAAV;;AACJ,eAAK,CAAL;AAAQ;AACJ,mBAAOF,IAAI,CAAC,GAAD,CAAX;;AACJ;AACI,mBAAOI,KAAK,CAACQ,OAAN,CAAcS,IAAd,CAAmBR,SAA1B;AANR;AAQH;AACJ,KAtBS;AAuBVE,IAAAA,eAAe,EAAE,CAAC;AAAEQ,MAAAA;AAAF,KAAD,KAAkBA,OAAO,GAAGtB,IAAI,CAAC,EAAD,CAAP,GAAc;AAvB9C;AADmC,CAAZ,CAAD,CAAxC;;AA4BA,MAAMuB,gBAAgB,GAAIC,IAAD,IAAU;AAC/B,QAAMC,OAAO,GAAG3C,kBAAkB,CAAC;AAC/B4C,IAAAA,KAAK,EAAEzC,YAAY,CAACuC,IAAD,CADY;AAE/BG,IAAAA,GAAG,EAAEzC,UAAU,CAACsC,IAAD;AAFgB,GAAD,CAAlC;AAIA,SAAOC,OAAO,CAACG,GAAR,CAAaC,MAAD,IACfjD,iBAAiB,CAAC;AAAE8C,IAAAA,KAAK,EAAEG,MAAT;AAAiBF,IAAAA,GAAG,EAAE9C,SAAS,CAACgD,MAAD;AAA/B,GAAD,CADd,CAAP;AAGH,CARD;;AAUA,MAAMC,iBAAiB,GAAG,CAACC,QAAD,EAAWC,QAAX,EAAqBC,MAArB,KAAgC,MAAM;AAC5D,QAAMC,IAAI,GAAGH,QAAQ,CAACI,WAAT,EAAb;AACA,QAAMC,KAAK,GAAGL,QAAQ,CAACM,QAAT,KAAsB,CAApC;AACA,QAAMb,IAAI,GAAGO,QAAQ,CAACtD,OAAT,EAAb;AACAuD,EAAAA,QAAQ,CAAC1D,sBAAsB,CAAC,CAAC4D,IAAD,EAAOE,KAAP,EAAcZ,IAAd,EAAoBS,MAApB,CAAD,CAAvB,CAAR;AACH,CALD;;AAOA,SAASK,yBAAT,CAAmCP,QAAnC,EAA6CQ,YAA7C,EAA0D;AACtD,QAAML,IAAI,GAAGH,QAAQ,CAACI,WAAT,EAAb;AACA,QAAMC,KAAK,GAAGL,QAAQ,CAACM,QAAT,KAAsB,CAApC;AACA,QAAMb,IAAI,GAAGO,QAAQ,CAACtD,OAAT,EAAb;AAEA+D,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAUjB,IAAV,GAAgB,GAAhB,GAAoBY,KAApB,GAA0B,GAA1B,GAA8BF,IAA1C;AAEAM,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYF,YAAY,CAACG,QAAb,CAAsBR,IAAtB,CAAZ;;AACA,MAAI,CAACV,IAAD,KAAUe,YAAY,CAACG,QAAb,CAAsBR,IAAtB,EAA4BE,KAA5B,CAAd,EAAkD;AAC9C;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAYjB,IAAxB;AACA,WAAO,IAAP;AACH,GAJD,MAIO;AACHgB,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAYjB,IAAxB;AACA,WAAO,IAAP;AACH;AACJ;;AAAA;;AAED,SAASmB,iBAAT,CAA2BC,KAA3B,EAAkC;AAC9B,QAAM;AACFC,IAAAA,GADE;AAEF3B,IAAAA,IAFE;AAGFC,IAAAA,aAHE;AAIFG,IAAAA,OAJE;AAKFwB,IAAAA,QALE;AAMFf,IAAAA,QANE;AAOFC,IAAAA,QAPE;AAQFC,IAAAA;AARE,MAUFW,KAVJ;AAAA,QASOG,KATP,4BAUIH,KAVJ;;AAWA,QAAMI,OAAO,GAAGhC,qBAAqB,CAAC4B,KAAD,CAArC;AACA,SACI,MAAC,SAAD;AACI,IAAA,SAAS,EAAEI,OAAO,CAAC/B;AADvB,KAEQ8B,KAFR;AAGI,IAAA,OAAO,EAAEjB,iBAAiB,CAACC,QAAD,EAAWC,QAAX,EAAqBC,MAArB,CAH9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAKKa,QALL,CADJ;AASH;;AAED,SAASG,GAAT,CAAaL,KAAb,EAAoB;AAChB,QAAM;AAAA,OAACM,UAAD;AAAA,OAAaC;AAAb,MAA8BhF,QAAQ,CAAC,IAAIiF,IAAJ,EAAD,CAA5C;AACA,QAAMJ,OAAO,GAAG9C,SAAS,EAAzB;AACA,QAAMwC,QAAQ,GAAGnB,gBAAgB,CAAC2B,UAAD,CAAjC;AACA,QAAMG,KAAK,GAAG,IAAID,IAAJ,EAAd;AACA,QAAMpB,QAAQ,GAAG5D,WAAW,EAA5B;AACA,QAAM;AAAEmE,IAAAA;AAAF,MAAmBlE,WAAW,CAAEiF,KAAD,IAAWA,KAAK,CAACC,KAAlB,CAApC;AAEA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,MAAC,KAAD;AAAO,IAAA,SAAS,EAAEP,OAAO,CAAC5C,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAgB,IAAA,OAAO,EAAC,eAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,MAAD;AACI,IAAA,OAAO,EAAC,UADZ;AAEI,IAAA,OAAO,EAAE,MACL+C,aAAa,CAACnE,SAAS,CAACkE,UAAD,EAAa,CAAb,CAAV,CAHrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,CADJ,EAWI,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,MAAD;AACI,IAAA,OAAO,EAAC,UADZ;AAEI,IAAA,OAAO,EAAE,MAAMC,aAAa,CAAC,IAAIC,IAAJ,EAAD,CAFhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,CAXJ,EAmBI,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,MAAD;AACI,IAAA,OAAO,EAAC,UADZ;AAEI,IAAA,OAAO,EAAE,MACLD,aAAa,CAACpE,SAAS,CAACmE,UAAD,EAAa,CAAb,CAAV,CAHrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,CAnBJ,CADJ,EA+BI,MAAC,UAAD;AACI,IAAA,OAAO,EAAC,IADZ;AAEI,IAAA,KAAK,EAAC,QAFV;AAGI,IAAA,SAAS,EAAEF,OAAO,CAACxC,SAHvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKKhC,MAAM,CAAC0E,UAAD,EAAa,MAAb,CALX,CA/BJ,EAsCI,MAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,SAAD;AACI,IAAA,KAAK,EAAC,QADV;AAEI,IAAA,OAAO,EAAE;AAAEM,MAAAA,IAAI,EAAER,OAAO,CAACvC;AAAhB,KAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAOI,MAAC,SAAD;AACI,IAAA,KAAK,EAAC,QADV;AAEI,IAAA,OAAO,EAAE;AAAE+C,MAAAA,IAAI,EAAER,OAAO,CAACvC;AAAhB,KAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPJ,EAaI,MAAC,SAAD;AACI,IAAA,KAAK,EAAC,QADV;AAEI,IAAA,OAAO,EAAE;AAAE+C,MAAAA,IAAI,EAAER,OAAO,CAACvC;AAAhB,KAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAbJ,EAmBI,MAAC,SAAD;AACI,IAAA,KAAK,EAAC,QADV;AAEI,IAAA,OAAO,EAAE;AAAE+C,MAAAA,IAAI,EAAER,OAAO,CAACvC;AAAhB,KAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAnBJ,EAyBI,MAAC,SAAD;AACI,IAAA,KAAK,EAAC,QADV;AAEI,IAAA,OAAO,EAAE;AAAE+C,MAAAA,IAAI,EAAER,OAAO,CAACvC;AAAhB,KAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAzBJ,EA+BI,MAAC,SAAD;AACI,IAAA,KAAK,EAAC,QADV;AAEI,IAAA,OAAO,EAAE;AAAE+C,MAAAA,IAAI,EAAER,OAAO,CAACvC;AAAhB,KAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA/BJ,EAqCI,MAAC,SAAD;AACI,IAAA,KAAK,EAAC,QADV;AAEI,IAAA,OAAO,EAAEqB,iBAFb;AAGI,IAAA,OAAO,EAAE;AAAE0B,MAAAA,IAAI,EAAER,OAAO,CAACvC;AAAhB,KAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cArCJ,CADJ,CADJ,EAgDI,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKiC,QAAQ,CAACd,GAAT,CAAa,CAAC6B,OAAD,EAAUC,MAAV,KACV,MAAC,QAAD;AAAU,IAAA,GAAG,EAAEA,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKD,OAAO,CAAC7B,GAAR,CAAaJ,IAAD,IACT,MAAC,iBAAD;AACI,IAAA,GAAG,EAAE9C,MAAM,CAAC8C,IAAD,CADf;AAEI,IAAA,IAAI,EAAE9C,MAAM,CAAC8C,IAAD,CAFhB;AAGI,IAAA,aAAa,EAAErC,WAAW,CACtBqC,IADsB,EAEtB0B,UAFsB,CAH9B;AAOI,IAAA,OAAO,EAAEvE,SAAS,CAAC6C,IAAD,EAAO6B,KAAP,CAPtB;AAQI,IAAA,QAAQ,EAAE7B,IARd;AASI,IAAA,QAAQ,EAAEQ,QATd;AAUI,IAAA,MAAM,EAAEY,KAAK,CAACX,MAVlB;AAWI,IAAA,KAAK,EAAC,QAXV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAaKxD,OAAO,CAAC+C,IAAD,CAbZ,EAcKc,yBAAyB,CACtBd,IADsB,EAEtBe,YAFsB,CAd9B,CADH,CADL,CADH,CADL,CAhDJ,CAtCJ,CAFJ,CADJ;AAwHH;;AAED,eAAeU,GAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { calendarPatternRegster } from \"../../modules/tasksModule\";\r\nimport { RootState } from \"../../modules/rootReducer\";\r\n\r\nimport format from \"date-fns/format\";\r\nimport getDate from \"date-fns/getDate\";\r\nimport getDay from \"date-fns/getDay\";\r\nimport isSameDay from \"date-fns/isSameDay\";\r\nimport eachDayOfInterval from \"date-fns/eachDayOfInterval\";\r\nimport endOfWeek from \"date-fns/endOfWeek\";\r\nimport eachWeekOfInterval from \"date-fns/eachWeekOfInterval\";\r\nimport addMonths from \"date-fns/addMonths\";\r\nimport subMonths from \"date-fns/subMonths\";\r\nimport startOfMonth from \"date-fns/startOfMonth\";\r\nimport endOfMonth from \"date-fns/endOfMonth\";\r\nimport isSameMonth from \"date-fns/isSameMonth\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport blue from \"@material-ui/core/colors/blue\";\r\nimport pink from \"@material-ui/core/colors/pink\";\r\nimport red from \"@material-ui/core/colors/red\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        margin: theme.spacing(5, 10),\r\n        padding: theme.spacing(5, 5),\r\n    },\r\n    yearmonth: {\r\n        margin: theme.spacing(2, 0, 1, 0),\r\n    },\r\n    tableHead: {\r\n        color: theme.palette.secondary.contrastText,\r\n        backgroundColor: theme.palette.secondary.light,\r\n    },\r\n}));\r\n\r\nconst useCalendarCellStyles = makeStyles((theme) => ({\r\n    calendarCell: {\r\n        color: ({ wday, isTargetMonth }) => {\r\n            if (isTargetMonth) {\r\n                switch (wday) {\r\n                    case 0: // Sunday\r\n                        return red[500];\r\n                    case 6: // Saturday\r\n                        return blue[500];\r\n                    default:\r\n                        return theme.palette.text.primary;\r\n                }\r\n            } else {\r\n                // previous or next month\r\n                switch (wday) {\r\n                    case 0: // Sunday\r\n                        return red[200];\r\n                    case 6: // Saturday\r\n                        return blue[200];\r\n                    default:\r\n                        return theme.palette.text.secondary;\r\n                }\r\n            }\r\n        },\r\n        backgroundColor: ({ isToday }) => (isToday ? pink[50] : \"transparent\"),\r\n    },\r\n}));\r\n\r\nconst getCalendarArray = (date) => {\r\n    const sundays = eachWeekOfInterval({\r\n        start: startOfMonth(date),\r\n        end: endOfMonth(date),\r\n    });\r\n    return sundays.map((sunday) =>\r\n        eachDayOfInterval({ start: sunday, end: endOfWeek(sunday) })\r\n    );\r\n};\r\n\r\nconst calendarCellClick = (dateData, dispatch, choice) => () => {\r\n    const year = dateData.getFullYear();\r\n    const month = dateData.getMonth() + 1;\r\n    const date = dateData.getDate();\r\n    dispatch(calendarPatternRegster([year, month, date, choice]));\r\n};\r\n\r\nfunction PatternRegistrationStatus(dateData, userTaskInfo){\r\n    const year = dateData.getFullYear();\r\n    const month = dateData.getMonth() + 1;\r\n    const date = dateData.getDate();\r\n\r\n    console.log(\"チェック：\" + date +\":\"+month+\":\"+year);\r\n\r\n    console.log(\"チェック2\");\r\n    console.log(userTaskInfo.calendar[year]);\r\n    if ([date] in userTaskInfo.calendar[year][month]) {\r\n        //存在する場合の処理\r\n        console.log(\"dateあり：\" + date);\r\n        return \"あり\";\r\n    } else {\r\n        console.log(\"dateなし：\" + date);\r\n        return \"なし\";\r\n    }\r\n};\r\n\r\nfunction CalendarTableCell(props) {\r\n    const {\r\n        key,\r\n        wday,\r\n        isTargetMonth,\r\n        isToday,\r\n        children,\r\n        dateData,\r\n        dispatch,\r\n        choice,\r\n        ...other\r\n    } = props;\r\n    const classes = useCalendarCellStyles(props);\r\n    return (\r\n        <TableCell\r\n            className={classes.calendarCell}\r\n            {...other}\r\n            onClick={calendarCellClick(dateData, dispatch, choice)}\r\n        >\r\n            {children}\r\n        </TableCell>\r\n    );\r\n}\r\n\r\nfunction App(props) {\r\n    const [targetDate, setTargetDate] = useState(new Date());\r\n    const classes = useStyles();\r\n    const calendar = getCalendarArray(targetDate);\r\n    const today = new Date();\r\n    const dispatch = useDispatch();\r\n    const { userTaskInfo } = useSelector((state) => state.tasks);\r\n\r\n    return (\r\n        <div>\r\n            <CssBaseline />\r\n            <Paper className={classes.paper}>\r\n                <Grid container justify=\"space-between\">\r\n                    <Grid item>\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            onClick={() =>\r\n                                setTargetDate(subMonths(targetDate, 1))\r\n                            }\r\n                        >\r\n                            前の月\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            onClick={() => setTargetDate(new Date())}\r\n                        >\r\n                            今月\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            onClick={() =>\r\n                                setTargetDate(addMonths(targetDate, 1))\r\n                            }\r\n                        >\r\n                            次の月\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n                <Typography\r\n                    variant=\"h4\"\r\n                    align=\"center\"\r\n                    className={classes.yearmonth}\r\n                >\r\n                    {format(targetDate, \"y年M月\")}\r\n                </Typography>\r\n                <Table>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell\r\n                                align=\"center\"\r\n                                classes={{ head: classes.tableHead }}\r\n                            >\r\n                                日\r\n                            </TableCell>\r\n                            <TableCell\r\n                                align=\"center\"\r\n                                classes={{ head: classes.tableHead }}\r\n                            >\r\n                                月\r\n                            </TableCell>\r\n                            <TableCell\r\n                                align=\"center\"\r\n                                classes={{ head: classes.tableHead }}\r\n                            >\r\n                                火\r\n                            </TableCell>\r\n                            <TableCell\r\n                                align=\"center\"\r\n                                classes={{ head: classes.tableHead }}\r\n                            >\r\n                                水\r\n                            </TableCell>\r\n                            <TableCell\r\n                                align=\"center\"\r\n                                classes={{ head: classes.tableHead }}\r\n                            >\r\n                                木\r\n                            </TableCell>\r\n                            <TableCell\r\n                                align=\"center\"\r\n                                classes={{ head: classes.tableHead }}\r\n                            >\r\n                                金\r\n                            </TableCell>\r\n                            <TableCell\r\n                                align=\"center\"\r\n                                onClick={calendarCellClick}\r\n                                classes={{ head: classes.tableHead }}\r\n                            >\r\n                                土\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {calendar.map((weekRow, rowNum) => (\r\n                            <TableRow key={rowNum}>\r\n                                {weekRow.map((date) => (\r\n                                    <CalendarTableCell\r\n                                        key={getDay(date)}\r\n                                        wday={getDay(date)}\r\n                                        isTargetMonth={isSameMonth(\r\n                                            date,\r\n                                            targetDate\r\n                                        )}\r\n                                        isToday={isSameDay(date, today)}\r\n                                        dateData={date}\r\n                                        dispatch={dispatch}\r\n                                        choice={props.choice}\r\n                                        align=\"center\"\r\n                                    >\r\n                                        {getDate(date)}\r\n                                        {PatternRegistrationStatus(\r\n                                            date,\r\n                                            userTaskInfo\r\n                                        )}\r\n                                    </CalendarTableCell>\r\n                                ))}\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </Paper>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}