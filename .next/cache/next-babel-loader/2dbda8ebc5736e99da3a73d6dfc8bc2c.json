{"ast":null,"code":"var _s = $RefreshSig$(),\n    _jsxFileName = \"C:\\\\Users\\\\blelm\\\\Desktop\\\\AppCreate\\\\habitPlan\\\\src\\\\components\\\\test\\\\firebaseTest\\\\getData.tsx\",\n    _s2 = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport { useFetchAllData } from \"./DBFetch\";\n// 認証周りやDB周りで必要なためimportしておく\nimport \"firebase/auth\";\nimport \"firebase/database\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { init } from \"../../../modules/tasksModule\";\n\nfunction renderUT(userId, setUT) {\n  _s();\n\n  var dispatch = useDispatch();\n\n  var _useFetchAllData = useFetchAllData(),\n      data = _useFetchAllData.data;\n\n  if (!!userId && !!data) {\n    console.log(\"getData.tsx data\");\n    console.log(data);\n    dispatch(init(data));\n  }\n}\n\n_s(renderUT, \"vHwbh1jLfjVACWMVaa4YREbUl1g=\", false, function () {\n  return [useDispatch, useFetchAllData];\n});\n\nexport default function ListComponent() {\n  _s2();\n\n  var _useState = useState(useSelector(function (state) {\n    return state.tasks;\n  })),\n      UT = _useState[0],\n      setUT = _useState[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      userId = _useSelector.userId; // const dispatch = useDispatch();\n\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.tasks;\n  }),\n      userTaskInfo = _useSelector2.userTaskInfo;\n\n  useEffect(function () {\n    // dataを取ってくる\n    // const { data } = useFetchAllData();\n    renderUT(userId, setUT); // if (!!userId && !!data) {\n    //     console.log(\"getData.tsx data\");\n    //     console.log(data);\n    //     dispatch(init(data));\n    //     setUT(useSelector((state: RootState) => state.tasks));\n    // }\n  }); // ここでstateを使うならログイン時にDBから取得したデータをReduxに保管する必要がある。\n  // useCallback(() => {\n  //     userTask = useSelector((state: RootState) => state.tasks);\n  // }, [userId]);\n\n  console.log(\"getData UT\");\n  console.log(UT); // data ? console.log(data.userTaskInfo) : console.log('noo');\n  // object形式なので使いやすいように{key, value}形式のリストに変換する\n  // また、データが変わらない限り結果は同じなのでメモ化しておく\n  // const dataList = useMemo(() => Object.entries(data || {}).map(([key, value]) => ({ key, value })), [data]);\n  // return <div>test</div>;\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 12\n    }\n  }, userTaskInfo.calendar[0].PatternId); // <dl>{dataList.map(({ key, value }) =>\n  //   <React.Fragment key={`${key}${value}`}>\n  //     <dt>key: {key}</dt>\n  //     <dt>value: {value}</dt>\n  //   </React.Fragment>\n  // )}</dl>\n}\n\n_s2(ListComponent, \"Icc0C/rmvqJlay7jnkduWbIXh6Q=\", false, function () {\n  return [useSelector, useSelector, useSelector];\n});\n\n_c = ListComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListComponent\");","map":{"version":3,"sources":["C:/Users/blelm/Desktop/AppCreate/habitPlan/src/components/test/firebaseTest/getData.tsx"],"names":["React","useEffect","useState","useFetchAllData","useDispatch","useSelector","init","renderUT","userId","setUT","dispatch","data","console","log","ListComponent","state","tasks","UT","user","userTaskInfo","calendar","PatternId"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAA6BC,SAA7B,EAAiDC,QAAjD,QAAiE,OAAjE;AACA,SAASC,eAAT,QAAgC,WAAhC;AAEA;AACA,OAAO,eAAP;AACA,OAAO,mBAAP;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAGA,SAASC,IAAT,QAAqB,8BAArB;;AAEA,SAASC,QAAT,CACIC,MADJ,EAEIC,KAFJ,EAME;AAAA;;AACE,MAAMC,QAAQ,GAAGN,WAAW,EAA5B;;AADF,yBAEmBD,eAAe,EAFlC;AAAA,MAEUQ,IAFV,oBAEUA,IAFV;;AAGE,MAAI,CAAC,CAACH,MAAF,IAAY,CAAC,CAACG,IAAlB,EAAwB;AACpBC,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAD,IAAAA,QAAQ,CAACJ,IAAI,CAACK,IAAD,CAAL,CAAR;AACH;AACJ;;GAdQJ,Q;UAOYH,W,EACAD,e;;;AAQrB,eAAe,SAASW,aAAT,GAAyB;AAAA;;AAAA,kBAChBZ,QAAQ,CACxBG,WAAW,CAAC,UAACU,KAAD;AAAA,WAAsBA,KAAK,CAACC,KAA5B;AAAA,GAAD,CADa,CADQ;AAAA,MAC7BC,EAD6B;AAAA,MACzBR,KADyB;;AAAA,qBAIjBJ,WAAW,CAAC,UAACU,KAAD;AAAA,WAAsBA,KAAK,CAACG,IAA5B;AAAA,GAAD,CAJM;AAAA,MAI5BV,MAJ4B,gBAI5BA,MAJ4B,EAKpC;;;AALoC,sBAMXH,WAAW,CAAC,UAACU,KAAD;AAAA,WAAsBA,KAAK,CAACC,KAA5B;AAAA,GAAD,CANA;AAAA,MAM5BG,YAN4B,iBAM5BA,YAN4B;;AAOpClB,EAAAA,SAAS,CAAC,YAAM;AACZ;AACA;AACAM,IAAAA,QAAQ,CAACC,MAAD,EAASC,KAAT,CAAR,CAHY,CAIZ;AACA;AACA;AACA;AACA;AACA;AACH,GAVQ,CAAT,CAPoC,CAmBpC;AACA;AACA;AACA;;AAEAG,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYI,EAAZ,EAzBoC,CA0BpC;AACA;AACA;AACA;AAEA;;AACA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAME,YAAY,CAACC,QAAb,CAAsB,CAAtB,EAAyBC,SAA/B,CAAP,CAhCoC,CAiCpC;AACA;AACA;AACA;AACA;AACA;AACH;;IAvCuBP,a;UAEhBT,W,EAEeA,W,EAEMA,W;;;KANLS,a","sourcesContent":["import React, { useCallback, useEffect, useMemo, useState } from \"react\";\r\nimport { useFetchAllData } from \"./DBFetch\";\r\nimport firebase from \"firebase/app\";\r\n// 認証周りやDB周りで必要なためimportしておく\r\nimport \"firebase/auth\";\r\nimport \"firebase/database\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../modules/rootReducer\";\r\nimport { userTask } from \"../../../modules/userTasksType\";\r\nimport { init } from \"../../../modules/tasksModule\";\r\n\r\nfunction renderUT(\r\n    userId: string,\r\n    setUT: {\r\n        (value: React.SetStateAction<userTask>): void;\r\n        (arg0: userTask): void;\r\n    }\r\n) {\r\n    const dispatch = useDispatch();\r\n    const { data } = useFetchAllData();\r\n    if (!!userId && !!data) {\r\n        console.log(\"getData.tsx data\");\r\n        console.log(data);\r\n        dispatch(init(data));\r\n    }\r\n}\r\n\r\nexport default function ListComponent() {\r\n    const [UT, setUT] = useState(\r\n        useSelector((state: RootState) => state.tasks)\r\n    );\r\n    const { userId } = useSelector((state: RootState) => state.user);\r\n    // const dispatch = useDispatch();\r\n    const { userTaskInfo } = useSelector((state: RootState) => state.tasks);\r\n    useEffect(() => {\r\n        // dataを取ってくる\r\n        // const { data } = useFetchAllData();\r\n        renderUT(userId, setUT);\r\n        // if (!!userId && !!data) {\r\n        //     console.log(\"getData.tsx data\");\r\n        //     console.log(data);\r\n        //     dispatch(init(data));\r\n        //     setUT(useSelector((state: RootState) => state.tasks));\r\n        // }\r\n    });\r\n\r\n    // ここでstateを使うならログイン時にDBから取得したデータをReduxに保管する必要がある。\r\n    // useCallback(() => {\r\n    //     userTask = useSelector((state: RootState) => state.tasks);\r\n    // }, [userId]);\r\n\r\n    console.log(\"getData UT\");\r\n    console.log(UT);\r\n    // data ? console.log(data.userTaskInfo) : console.log('noo');\r\n    // object形式なので使いやすいように{key, value}形式のリストに変換する\r\n    // また、データが変わらない限り結果は同じなのでメモ化しておく\r\n    // const dataList = useMemo(() => Object.entries(data || {}).map(([key, value]) => ({ key, value })), [data]);\r\n\r\n    // return <div>test</div>;\r\n    return <div>{userTaskInfo.calendar[0].PatternId}</div>;\r\n    // <dl>{dataList.map(({ key, value }) =>\r\n    //   <React.Fragment key={`${key}${value}`}>\r\n    //     <dt>key: {key}</dt>\r\n    //     <dt>value: {value}</dt>\r\n    //   </React.Fragment>\r\n    // )}</dl>\r\n}\r\n"]},"metadata":{},"sourceType":"module"}