{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { createSlice } from \"@reduxjs/toolkit\"; // import { Task } from '../Types'\n\nimport { firebase } from \"../components/test/firebaseTest/firebaseTest\";\n\nvar initialState = _defineProperty({}, \"test\", \"test\");\n\nvar useDatabase = function useDatabase() {\n  _s();\n\n  // 同じパスでは毎回同じ結果が得られるのでmemo化しておく\n  return useMemo(function () {\n    return firebase.database().ref(\"/sample\");\n  }, []);\n};\n\n_s(useDatabase, \"nwk+m61qLgjDVUp4IGV/072DDN4=\");\n\nvar useSetDocument = function useSetDocument(ref) {\n  _s2();\n\n  var updateDocument = useCallback(function (document) {\n    // refについては前回の記事参照\n    // setに登録したいデータを渡してあげれば登録できる\n    ref.set(document);\n  }, [ref]);\n  return updateDocument;\n};\n\n_s2(useSetDocument, \"qaGV0QmFp1ymR0Bb3SGaH/D9rrQ=\");\n\nvar useFetchData = function useFetchData(ref) {\n  _s3();\n\n  var _useState = useState(),\n      data = _useState[0],\n      setData = _useState[1];\n\n  useEffect(function () {\n    // イベントリスナーを追加するにはonを使う\n    ref.on(\"value\", function (snapshot) {\n      // パスに対する全データを含むsnapshotが渡される\n      // ない場合はnullが変えるので存在をチェックしておく\n      if (snapshot === null || snapshot === void 0 ? void 0 : snapshot.val()) {\n        setData(snapshot.val());\n      }\n    });\n    return function () {\n      ref.off();\n    }; // refの変更に応じて再取得する\n    //   指定したパスのデータに対する更新をすべて検知するにはvalueを指定すれば良い。\n  }, [ref]); // データを返却する\n\n  return {\n    data: data\n  };\n}; // 実際に呼び出す際はこちらを使う\n\n\n_s3(useFetchData, \"WZ2PO9A64oHRexE1CE+yX3ebuoA=\");\n\nexport var useFetchAllData = function useFetchAllData() {\n  _s4();\n\n  // refを取得して\n  var ref = useDatabase(); // ref渡してデータを取得する\n\n  return useFetchData(ref);\n};\n\n_s4(useFetchAllData, \"MTgaLcAFZwYAI7SeegXrbygttSE=\", false, function () {\n  return [useDatabase, useFetchData];\n});\n\nvar tasksModule = createSlice({\n  name: \"tasks\",\n  initialState: initialState,\n  reducers: {\n    RegisterData: function RegisterData(state, action) {\n      // 前回作ったuseDatabase()を使いref取得\n      var ref = useDatabase();\n      var setDocument = useSetDocument(ref); // 登録済みのデータを全部取得する\n\n      var _useFetchAllData = useFetchAllData(),\n          registeredData = _useFetchAllData.data; // データを登録する関数を返却する\n\n\n      var registerData = useCallback(function (registerData) {\n        // 既存のデータと登録するkey-valueを合わせて登録関数に渡す\n        setDocument(_objectSpread(_objectSpread({}, registeredData), registerData));\n        state = _objectSpread(_objectSpread({}, registeredData), registerData);\n      }, [setDocument, registeredData]);\n      registerData(action.payload); // 返した関数を利用することで、登録済みデータ全て+登録したいデータをDBに保管できる\n      //   return registerData;\n    } // addTask(state: State, action: PayloadAction<string>) {\n    //     state.count++;\n    //     const newTask: Task = {\n    //         id: state.count,\n    //         title: action.payload,\n    //         done: false,\n    //     };\n    //     state.tasks = [newTask, ...state.tasks];\n    // },\n    // doneTask(state: State, action: PayloadAction<Task>) {\n    //     const task = state.tasks.find((t) => t.id === action.payload.id);\n    //     if (task) {\n    //         task.done = !task.done;\n    //     }\n    // },\n    // deleteTask(state: State, action: PayloadAction<Task>) {\n    //     state.tasks = state.tasks.filter((t) => t.id !== action.payload.id);\n    // },\n\n  }\n}); // export const { addTask, doneTask, deleteTask } = tasksModule.actions;\n\nvar RegisterData = tasksModule.actions.RegisterData;\nexport { RegisterData };\nexport default tasksModule;","map":{"version":3,"sources":["C:/Users/blelm/Desktop/AppCreate/habitPlan/src/modules/tasksModule.tsx"],"names":["useCallback","useEffect","useMemo","useState","createSlice","firebase","initialState","useDatabase","database","ref","useSetDocument","updateDocument","document","set","useFetchData","data","setData","on","snapshot","val","off","useFetchAllData","tasksModule","name","reducers","RegisterData","state","action","setDocument","registeredData","registerData","payload","actions"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useMemo, useState } from \"react\";\r\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n// import { Task } from '../Types'\r\n\r\nimport { firebase } from \"../components/test/firebaseTest/firebaseTest\";\r\n\r\ntype State = {\r\n    [key: string]: string;\r\n};\r\n\r\nconst initialState: State = {\r\n    [\"test\"]: \"test\",\r\n};\r\n\r\nconst useDatabase = () => {\r\n    // 同じパスでは毎回同じ結果が得られるのでmemo化しておく\r\n    return useMemo(() => firebase.database().ref(\"/sample\"), []);\r\n};\r\n\r\nconst useSetDocument = (ref: firebase.database.Reference) => {\r\n    const updateDocument = useCallback(\r\n        (document: unknown) => {\r\n            // refについては前回の記事参照\r\n            // setに登録したいデータを渡してあげれば登録できる\r\n            ref.set(document);\r\n        },\r\n        [ref]\r\n    );\r\n    return updateDocument;\r\n};\r\n\r\nconst useFetchData = (ref: firebase.database.Reference) => {\r\n    const [data, setData] = useState<{ [key: string]: string }>();\r\n    useEffect(() => {\r\n        // イベントリスナーを追加するにはonを使う\r\n        ref.on(\"value\", (snapshot: any) => {\r\n            // パスに対する全データを含むsnapshotが渡される\r\n            // ない場合はnullが変えるので存在をチェックしておく\r\n            if (snapshot?.val()) {\r\n                setData(snapshot.val());\r\n            }\r\n        });\r\n        return () => {\r\n            ref.off();\r\n        };\r\n        // refの変更に応じて再取得する\r\n        //   指定したパスのデータに対する更新をすべて検知するにはvalueを指定すれば良い。\r\n    }, [ref]);\r\n    // データを返却する\r\n    return { data };\r\n};\r\n\r\n// 実際に呼び出す際はこちらを使う\r\nexport const useFetchAllData = () => {\r\n    // refを取得して\r\n    const ref = useDatabase();\r\n    // ref渡してデータを取得する\r\n    return useFetchData(ref);\r\n};\r\n\r\nconst tasksModule = createSlice({\r\n    name: \"tasks\",\r\n    initialState,\r\n    reducers: {\r\n        RegisterData(state: State, action: PayloadAction<State>) {\r\n            // 前回作ったuseDatabase()を使いref取得\r\n            const ref = useDatabase();\r\n            const setDocument = useSetDocument(ref);\r\n            // 登録済みのデータを全部取得する\r\n            const { data: registeredData } = useFetchAllData();\r\n\r\n            // データを登録する関数を返却する\r\n            const registerData = useCallback(\r\n                (registerData: State) => {\r\n                    // 既存のデータと登録するkey-valueを合わせて登録関数に渡す\r\n                    setDocument({ ...registeredData, ...registerData });\r\n                    state = { ...registeredData, ...registerData };\r\n                },\r\n                [setDocument, registeredData]\r\n            );\r\n\r\n            registerData(action.payload);\r\n\r\n            // 返した関数を利用することで、登録済みデータ全て+登録したいデータをDBに保管できる\r\n            //   return registerData;\r\n        },\r\n\r\n        // addTask(state: State, action: PayloadAction<string>) {\r\n        //     state.count++;\r\n\r\n        //     const newTask: Task = {\r\n        //         id: state.count,\r\n        //         title: action.payload,\r\n        //         done: false,\r\n        //     };\r\n\r\n        //     state.tasks = [newTask, ...state.tasks];\r\n        // },\r\n        // doneTask(state: State, action: PayloadAction<Task>) {\r\n        //     const task = state.tasks.find((t) => t.id === action.payload.id);\r\n        //     if (task) {\r\n        //         task.done = !task.done;\r\n        //     }\r\n        // },\r\n        // deleteTask(state: State, action: PayloadAction<Task>) {\r\n        //     state.tasks = state.tasks.filter((t) => t.id !== action.payload.id);\r\n        // },\r\n    },\r\n});\r\n\r\n// export const { addTask, doneTask, deleteTask } = tasksModule.actions;\r\nexport const { RegisterData } = tasksModule.actions;\r\n\r\nexport default tasksModule;\r\n"]},"metadata":{},"sourceType":"module"}