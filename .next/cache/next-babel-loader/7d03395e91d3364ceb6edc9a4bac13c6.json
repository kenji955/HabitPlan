{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _detail, _detail2, _detail3, _detail4, _ref, _detail5, _detail6, _detail7, _detail8;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createSlice } from \"@reduxjs/toolkit\";\nvar initialState = {\n  userTaskInfo: {\n    calendar: _defineProperty({}, new Date(\"Thu, 22 Oct 2020 02:00:00\").getFullYear(), _defineProperty({}, new Date(\"Thu, 22 Oct 2020 02:00:00\").getMonth() + 1, (_ref = {}, _defineProperty(_ref, new Date(\"Thu, 22 Oct 2020 02:00:00\").getDate(), {\n      PatternId: 1,\n      tasks: [{\n        order: 1,\n        detail: (_detail = {}, _defineProperty(_detail, \"testDetail1\", \"testDetail1 22 1\"), _defineProperty(_detail, \"testDetail2\", \"testDetail1 22 1\"), _detail),\n        flug: false\n      }, {\n        order: 2,\n        detail: (_detail2 = {}, _defineProperty(_detail2, \"testDetail1\", \"testDetail1 22 2\"), _defineProperty(_detail2, \"testDetail2\", \"testDetail1 22 2\"), _detail2),\n        flug: false\n      }]\n    }), _defineProperty(_ref, new Date(\"Thu, 23 Oct 2020 02:00:00\").getDate(), {\n      PatternId: 1,\n      tasks: [{\n        order: 1,\n        detail: (_detail3 = {}, _defineProperty(_detail3, \"testDetail1\", \"testDetail1 23 1\"), _defineProperty(_detail3, \"testDetail2\", \"testDetail1 23 1\"), _detail3),\n        flug: false\n      }, {\n        order: 2,\n        detail: (_detail4 = {}, _defineProperty(_detail4, \"testDetail1\", \"testDetail1 23 2\"), _defineProperty(_detail4, \"testDetail2\", \"testDetail1 23 2\"), _detail4),\n        flug: false\n      }]\n    }), _ref))),\n    pattern: [{\n      patternId: 1,\n      patternName: \"testPattern1\"\n    }, {\n      patternId: 2,\n      patternName: \"testPattern2\"\n    }],\n    tasks: [{\n      detail: (_detail5 = {}, _defineProperty(_detail5, \"defalut\", \"defalut\"), _defineProperty(_detail5, \"testDetail1\", \"testDetail1 22 1\"), _defineProperty(_detail5, \"testDetail2\", \"testDetail1 22 1\"), _detail5),\n      patternInfo: [{\n        patternID: 1,\n        order: 1\n      }]\n    }, {\n      detail: (_detail6 = {}, _defineProperty(_detail6, \"defalut\", \"defalut\"), _defineProperty(_detail6, \"testDetail1\", \"testDetail1 22 2\"), _defineProperty(_detail6, \"testDetail2\", \"testDetail1 22 2\"), _detail6),\n      patternInfo: [{\n        patternID: 1,\n        order: 2\n      }]\n    }, {\n      detail: (_detail7 = {}, _defineProperty(_detail7, \"defalut\", \"defalut\"), _defineProperty(_detail7, \"testDetail1\", \"testDetail1 23 1\"), _defineProperty(_detail7, \"testDetail2\", \"testDetail1 23 1\"), _detail7),\n      patternInfo: [{\n        patternID: 2,\n        order: 1\n      }, {\n        patternID: 1,\n        order: 3\n      }]\n    }, {\n      detail: (_detail8 = {}, _defineProperty(_detail8, \"defalut\", \"defalut\"), _defineProperty(_detail8, \"testDetail2\", \"testDetail1 23 2\"), _defineProperty(_detail8, \"testDetail1\", \"testDetail1 23 2\"), _detail8),\n      patternInfo: [{\n        patternID: 2,\n        order: 2\n      }]\n    }]\n  }\n};\nvar tasksModule = createSlice({\n  name: \"tasks\",\n  initialState: initialState,\n  reducers: {\n    init: function init(state, action) {\n      var data = action.payload;\n      console.log(\"init data\");\n      console.log(data); // state = {...data};\n      // console.log(\"init state.userTaskInfo 前\");\n      // console.log(state.userTaskInfo);\n\n      state.userTaskInfo = data; // console.log(\"init state.userTaskInfo 後\");\n      // console.log(state.userTaskInfo);\n    },\n    Register: function Register(state, action) {\n      var data = action.payload;\n      state = _objectSpread(_objectSpread({}, state), data); // console.log('state');\n      // console.log(state);\n    },\n    allDelete: function allDelete(state) {\n      state = initialState;\n      console.log(\"check allDelete\");\n    },\n    // DayPlanにてタスクをクリックした際に完了フラグをtrueに変更する処理。引数にて年、月、日、タスクのインデックス番号を受け取っている。\n    taskCheckComplete: function taskCheckComplete(state, action) {\n      var index = state.userTaskInfo.calendar[action.payload[0]][action.payload[1]][action.payload[2]].tasks.findIndex(function (tasks) {\n        return tasks.order == action.payload[3];\n      });\n      console.log(index);\n      state.userTaskInfo.calendar[action.payload[0]][action.payload[1]][action.payload[2]].tasks[index].flug = !state.userTaskInfo.calendar[action.payload[0]][action.payload[1]][action.payload[2]].tasks[index].flug;\n    },\n    // 引数はstateと年、月、日、選択されているパターンIDの4つの数値が格納された配列\n    calendarPatternRegister: function calendarPatternRegister(state, action) {\n      // stateから選択されているパターンIDが設定されているタスクを抽出する。\n      var choicePatternTasks = state.userTaskInfo.tasks.filter(function (task) {\n        return task.patternInfo.some(function (task) {\n          return task.patternID == action.payload[3];\n        });\n      }); // パターンIDに紐付くタスク一覧からカレンダーへの登録情報を抽出する。\n\n      var TodayTasks = choicePatternTasks.map(function (task) {\n        // パターンが複数登録されているタスクへの対応として、選択されているパターンIDに該当する要素だけを抽出する。\n        var taskPattern = task.patternInfo.filter(function (patternInfo) {\n          return patternInfo.patternID == action.payload[3];\n        }); // 配列のタスクと抽出したパターン情報を整形して返す。\n\n        return {\n          order: taskPattern[0].order,\n          detail: task.detail,\n          // detail2: task.detail2,\n          flug: false\n        };\n      }); // stateのMonthの連想配列に新しい日付の連想配列を追加する。\n      // 追加情報は引数の日とこれまでの処理で作成したカレンダー登録用情報\n\n      state.userTaskInfo.calendar[action.payload[0]][action.payload[1]] = _objectSpread(_objectSpread({}, state.userTaskInfo.calendar[action.payload[0]][action.payload[1]]), {}, _defineProperty({}, action.payload[2], {\n        PatternId: action.payload[3],\n        tasks: TodayTasks\n      })); // action.payload[3];\n\n      console.log(state.userTaskInfo.calendar[action.payload[0]][action.payload[1]][action.payload[2]]);\n    },\n    // タスクの詳細を設定する処理。引数のテキスト配列には[入力内容、連想配列のキー、タスクの配列を指定する数字]が格納されている。\n    taskDetailRegister: function taskDetailRegister(state, action) {\n      state.userTaskInfo.tasks[parseInt(action.payload[2])].detail = _objectSpread(_objectSpread({}, state.userTaskInfo.tasks[parseInt(action.payload[2])].detail), {}, _defineProperty({}, action.payload[1], action.payload[0]));\n    },\n    // タスクを追加する処理。引数のテキスト配列には[入力内容、連想配列のキー、タスクの配列を指定する数字]が格納されている。\n    taskRegister: function taskRegister(state, action) {\n      var registerTask = action.payload;\n      registerTask.patternInfo.map(function (content) {\n        var choicePatternTasks = state.userTaskInfo.tasks.filter(function (task) {\n          return task.patternInfo.some(function (task) {\n            return task.patternID == content.patternID;\n          });\n        });\n        content.order = choicePatternTasks.length + 1;\n      });\n      console.log(registerTask);\n      state.userTaskInfo.tasks.push(registerTask);\n    },\n    taskUpdate: function taskUpdate(state, action) {\n      var registerTask = action.payload;\n      registerTask.patternInfo.map(function (content) {\n        var choicePatternTasks = state.userTaskInfo.tasks.filter(function (task) {\n          return task.patternInfo.some(function (task) {\n            return task.patternID == content.patternID;\n          });\n        });\n        content.order = choicePatternTasks.length + 1;\n      });\n      console.log(registerTask);\n      state.userTaskInfo.tasks.push(registerTask);\n    }\n  }\n});\nvar _tasksModule$actions = tasksModule.actions,\n    init = _tasksModule$actions.init,\n    Register = _tasksModule$actions.Register,\n    allDelete = _tasksModule$actions.allDelete,\n    taskCheckComplete = _tasksModule$actions.taskCheckComplete,\n    calendarPatternRegister = _tasksModule$actions.calendarPatternRegister,\n    taskDetailRegister = _tasksModule$actions.taskDetailRegister,\n    taskRegister = _tasksModule$actions.taskRegister,\n    taskUpdate = _tasksModule$actions.taskUpdate;\nexport { init, Register, allDelete, taskCheckComplete, calendarPatternRegister, taskDetailRegister, taskRegister, taskUpdate };\nexport default tasksModule;","map":{"version":3,"sources":["C:/Users/blelm/Desktop/AppCreate/habitPlan/src/modules/tasksModule.tsx"],"names":["createSlice","initialState","userTaskInfo","calendar","Date","getFullYear","getMonth","getDate","PatternId","tasks","order","detail","flug","pattern","patternId","patternName","patternInfo","patternID","tasksModule","name","reducers","init","state","action","data","payload","console","log","Register","allDelete","taskCheckComplete","index","findIndex","calendarPatternRegister","choicePatternTasks","filter","task","some","TodayTasks","map","taskPattern","taskDetailRegister","parseInt","taskRegister","registerTask","content","length","push","taskUpdate","actions"],"mappings":"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","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport {\r\n    calendar,\r\n    pattern,\r\n    tasks,\r\n    userTask,\r\n    userTaskInfo,\r\n} from \"./userTasksType\";\r\n\r\ntype State = {\r\n    [key: string]: string;\r\n};\r\n\r\nconst initialState: userTask = {\r\n    userTaskInfo: {\r\n        calendar: {\r\n            [new Date(\"Thu, 22 Oct 2020 02:00:00\").getFullYear()]: {\r\n                [new Date(\"Thu, 22 Oct 2020 02:00:00\").getMonth() + 1]: {\r\n                    [new Date(\"Thu, 22 Oct 2020 02:00:00\").getDate()]: {\r\n                        PatternId: 1,\r\n                        tasks: [\r\n                            {\r\n                                order: 1,\r\n                                detail: {\r\n                                    [\"testDetail1\"]: \"testDetail1 22 1\",\r\n                                    [\"testDetail2\"]: \"testDetail1 22 1\",\r\n                                },\r\n                                flug: false,\r\n                            },\r\n                            {\r\n                                order: 2,\r\n                                detail: {\r\n                                    [\"testDetail1\"]: \"testDetail1 22 2\",\r\n                                    [\"testDetail2\"]: \"testDetail1 22 2\",\r\n                                },\r\n                                flug: false,\r\n                            },\r\n                        ],\r\n                    },\r\n                    [new Date(\"Thu, 23 Oct 2020 02:00:00\").getDate()]: {\r\n                        PatternId: 1,\r\n                        tasks: [\r\n                            {\r\n                                order: 1,\r\n                                detail: {\r\n                                    [\"testDetail1\"]: \"testDetail1 23 1\",\r\n                                    [\"testDetail2\"]: \"testDetail1 23 1\",\r\n                                },\r\n                                flug: false,\r\n                            },\r\n                            {\r\n                                order: 2,\r\n                                detail: {\r\n                                    [\"testDetail1\"]: \"testDetail1 23 2\",\r\n                                    [\"testDetail2\"]: \"testDetail1 23 2\",\r\n                                },\r\n                                flug: false,\r\n                            },\r\n                        ],\r\n                    },\r\n                },\r\n            },\r\n        },\r\n\r\n        pattern: [\r\n            {\r\n                patternId: 1,\r\n                patternName: \"testPattern1\",\r\n            },\r\n            {\r\n                patternId: 2,\r\n                patternName: \"testPattern2\",\r\n            },\r\n        ],\r\n        tasks: [\r\n            {\r\n                detail: {\r\n                    [\"defalut\"]: \"defalut\",\r\n                    [\"testDetail1\"]: \"testDetail1 22 1\",\r\n                    [\"testDetail2\"]: \"testDetail1 22 1\",\r\n                },\r\n                patternInfo: [\r\n                    {\r\n                        patternID: 1,\r\n                        order: 1,\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                detail: {\r\n                    [\"defalut\"]: \"defalut\",\r\n                    [\"testDetail1\"]: \"testDetail1 22 2\",\r\n                    [\"testDetail2\"]: \"testDetail1 22 2\",\r\n                },\r\n                patternInfo: [\r\n                    {\r\n                        patternID: 1,\r\n                        order: 2,\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                detail: {\r\n                    [\"defalut\"]: \"defalut\",\r\n                    [\"testDetail1\"]: \"testDetail1 23 1\",\r\n                    [\"testDetail2\"]: \"testDetail1 23 1\",\r\n                },\r\n                patternInfo: [\r\n                    {\r\n                        patternID: 2,\r\n                        order: 1,\r\n                    },\r\n                    {\r\n                        patternID: 1,\r\n                        order: 3,\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                detail: {\r\n                    [\"defalut\"]: \"defalut\",\r\n                    [\"testDetail2\"]: \"testDetail1 23 2\",\r\n                    [\"testDetail1\"]: \"testDetail1 23 2\",\r\n                },\r\n                patternInfo: [\r\n                    {\r\n                        patternID: 2,\r\n                        order: 2,\r\n                    },\r\n                ],\r\n            },\r\n        ],\r\n    },\r\n};\r\n\r\nconst tasksModule = createSlice({\r\n    name: \"tasks\",\r\n    initialState,\r\n    reducers: {\r\n        init(state: userTask, action: PayloadAction<userTaskInfo>) {\r\n            const data = action.payload;\r\n            console.log(\"init data\");\r\n            console.log(data);\r\n            // state = {...data};\r\n            // console.log(\"init state.userTaskInfo 前\");\r\n            // console.log(state.userTaskInfo);\r\n            state.userTaskInfo = data;\r\n            // console.log(\"init state.userTaskInfo 後\");\r\n            // console.log(state.userTaskInfo);\r\n        },\r\n        Register(state: userTask, action: PayloadAction<userTask>) {\r\n            const data = action.payload;\r\n\r\n            state = { ...state, ...data };\r\n            // console.log('state');\r\n            // console.log(state);\r\n        },\r\n        allDelete(state: userTask) {\r\n            state = initialState;\r\n            console.log(\"check allDelete\");\r\n        },\r\n        // DayPlanにてタスクをクリックした際に完了フラグをtrueに変更する処理。引数にて年、月、日、タスクのインデックス番号を受け取っている。\r\n        taskCheckComplete(state: userTask, action: PayloadAction<number[]>) {\r\n            const index = state.userTaskInfo.calendar[action.payload[0]][\r\n                action.payload[1]\r\n            ][action.payload[2]].tasks.findIndex(\r\n                (tasks) => tasks.order == action.payload[3]\r\n            );\r\n            console.log(index);\r\n            state.userTaskInfo.calendar[action.payload[0]][action.payload[1]][\r\n                action.payload[2]\r\n            ].tasks[index].flug = !state.userTaskInfo.calendar[\r\n                action.payload[0]\r\n            ][action.payload[1]][action.payload[2]].tasks[index].flug;\r\n        },\r\n        // 引数はstateと年、月、日、選択されているパターンIDの4つの数値が格納された配列\r\n        calendarPatternRegister(\r\n            state: userTask,\r\n            action: PayloadAction<number[]>\r\n        ) {\r\n            // stateから選択されているパターンIDが設定されているタスクを抽出する。\r\n            const choicePatternTasks = state.userTaskInfo.tasks.filter(\r\n                function (task) {\r\n                    return task.patternInfo.some(\r\n                        (task) => task.patternID == action.payload[3]\r\n                    );\r\n                }\r\n            );\r\n\r\n            // パターンIDに紐付くタスク一覧からカレンダーへの登録情報を抽出する。\r\n            const TodayTasks = choicePatternTasks.map((task) => {\r\n                // パターンが複数登録されているタスクへの対応として、選択されているパターンIDに該当する要素だけを抽出する。\r\n                const taskPattern = task.patternInfo.filter(function (\r\n                    patternInfo\r\n                ) {\r\n                    return patternInfo.patternID == action.payload[3];\r\n                });\r\n\r\n                // 配列のタスクと抽出したパターン情報を整形して返す。\r\n                return {\r\n                    order: taskPattern[0].order,\r\n                    detail: task.detail,\r\n                    // detail2: task.detail2,\r\n                    flug: false,\r\n                };\r\n            });\r\n\r\n            // stateのMonthの連想配列に新しい日付の連想配列を追加する。\r\n            // 追加情報は引数の日とこれまでの処理で作成したカレンダー登録用情報\r\n            state.userTaskInfo.calendar[action.payload[0]][\r\n                action.payload[1]\r\n            ] = {\r\n                ...state.userTaskInfo.calendar[action.payload[0]][\r\n                    action.payload[1]\r\n                ],\r\n                [action.payload[2]]: {\r\n                    PatternId: action.payload[3],\r\n                    tasks: TodayTasks,\r\n                },\r\n            };\r\n\r\n            // action.payload[3];\r\n            console.log(\r\n                state.userTaskInfo.calendar[action.payload[0]][\r\n                    action.payload[1]\r\n                ][action.payload[2]]\r\n            );\r\n        },\r\n        // タスクの詳細を設定する処理。引数のテキスト配列には[入力内容、連想配列のキー、タスクの配列を指定する数字]が格納されている。\r\n        taskDetailRegister(state: userTask, action: PayloadAction<string[]>) {\r\n            state.userTaskInfo.tasks[parseInt(action.payload[2])].detail = {\r\n                ...state.userTaskInfo.tasks[parseInt(action.payload[2])].detail,\r\n                [action.payload[1]]: action.payload[0],\r\n            };\r\n        },\r\n        // タスクを追加する処理。引数のテキスト配列には[入力内容、連想配列のキー、タスクの配列を指定する数字]が格納されている。\r\n        taskRegister(state: userTask, action: PayloadAction<tasks>) {\r\n            const registerTask = action.payload;\r\n            registerTask.patternInfo.map((content) => {\r\n                const choicePatternTasks = state.userTaskInfo.tasks.filter(\r\n                    function (task) {\r\n                        return task.patternInfo.some(\r\n                            (task) => task.patternID == content.patternID\r\n                        );\r\n                    }\r\n                );\r\n                content.order = choicePatternTasks.length + 1;\r\n            });\r\n            console.log(registerTask);\r\n            state.userTaskInfo.tasks.push(registerTask);\r\n        },\r\n        taskUpdate(state: userTask, action: PayloadAction<tasks>) {\r\n            const registerTask = action.payload;\r\n            registerTask.patternInfo.map((content) => {\r\n                const choicePatternTasks = state.userTaskInfo.tasks.filter(\r\n                    function (task) {\r\n                        return task.patternInfo.some(\r\n                            (task) => task.patternID == content.patternID\r\n                        );\r\n                    }\r\n                );\r\n                content.order = choicePatternTasks.length + 1;\r\n            });\r\n            console.log(registerTask);\r\n            state.userTaskInfo.tasks.push(registerTask);\r\n        },\r\n    },\r\n});\r\n\r\nexport const {\r\n    init,\r\n    Register,\r\n    allDelete,\r\n    taskCheckComplete,\r\n    calendarPatternRegister,\r\n    taskDetailRegister,\r\n    taskRegister,\r\n    taskUpdate,\r\n} = tasksModule.actions;\r\n\r\nexport default tasksModule;\r\n"]},"metadata":{},"sourceType":"module"}