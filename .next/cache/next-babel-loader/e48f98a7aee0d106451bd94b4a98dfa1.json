{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CommentIcon from \"@material-ui/icons/Comment\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { taskCheckComplete } from \"../../modules/tasksModule\";\nimport { Accordion, AccordionSummary, Typography, AccordionDetails } from \"@material-ui/core\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nconst useStyles = makeStyles(theme => createStyles({\n  roots: {\n    width: \"100%\",\n    maxWidth: 720,\n    margin: \"auto\",\n    backgroundColor: theme.palette.background.paper\n  },\n  AchievementList: {\n    display: 'inline-block',\n    width: \"100%\"\n  }\n}));\nexport default function CheckboxList(props) {\n  const classes = useStyles();\n  const {\n    0: checked,\n    1: setChecked\n  } = useState([]);\n  const {\n    userTaskInfo\n  } = useSelector(state => state.tasks);\n  const dispatch = useDispatch(); // const year = new Date(\"Thu, 22 May 2020 02:00:00\").getFullYear();\n  // const month = new Date(\"Thu, 22 May 2020 02:00:00\").getMonth() + 1;\n  // const date = new Date(\"Thu, 22 May 2020 02:00:00\").getDate();\n\n  const year = props.choiceDate[0];\n  const month = props.choiceDate[1];\n  const date = props.choiceDate[2];\n\n  const handleToggle = order => () => {\n    const currentIndex = checked.indexOf(order);\n    const newChecked = [...checked];\n\n    if (currentIndex === -1) {\n      newChecked.push(order);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n\n    setChecked(newChecked);\n    console.log('list' + order);\n    dispatch(taskCheckComplete([year, month, date, order]));\n  }; // ここで作成する機能はたくさんある。\n  // 日付とパターンIDを読み取ること\n  // いや、ここじゃないか？ここではカレンダーに格納されたタスクを読み取るだけで良いのでは？\n  // カレンダー画面でパターンを登録し、その時にタスクリストからパターンIDが合致するものだけ抽出して、該当する日付のカレンダー配列に格納する\n  // 一度シンプルに、カレンダー配列に格納されているタスクを読み取る機能を実装しよう\n  // const test = userTaskInfo.calendar.filter(function(value){\n  //   return value.year == year && value.month == month && value.date == date\n  // });\n  // const test = userTaskInfo.calendar[year][month][date]\n\n\n  const test = userTaskInfo.calendar; // console.log(test[year][month][22]);\n\n  if (year in userTaskInfo.calendar) {\n    if (month in userTaskInfo.calendar[year]) {\n      if (date in userTaskInfo.calendar[year][month]) {\n        // console.log(\"PatternId：\" + userTaskInfo.calendar[year][month][date].PatternId);\n        // return userTaskInfo.calendar[year][month][date].PatternId;\n        // let Achievement:[JSX.Element],NotAchieved:[JSX.Element];\n        // 達成済みリスト\n        const Achievement = test[year][month][22].tasks.filter(function (value) {\n          return value.flug == true;\n        });\n        console.log(\"Achievement\");\n        console.log(Achievement); // 未達成リスト\n\n        const NotAchieved = test[year][month][22].tasks.filter(function (value) {\n          return value.flug == false;\n        });\n        console.log(\"NotAchieved\");\n        console.log(NotAchieved);\n        return __jsx(List, {\n          className: classes.roots\n        }, NotAchieved.map((value, index) => {\n          const labelId = `checkbox-list-label-${value}`;\n          return __jsx(ListItem, {\n            key: year & month & date & value.order,\n            role: undefined,\n            dense: true,\n            button: true,\n            onClick: handleToggle(value.order)\n          }, __jsx(ListItemIcon, null, __jsx(Checkbox, {\n            edge: \"start\",\n            checked: value.flug,\n            tabIndex: -1,\n            disableRipple: true,\n            inputProps: {\n              \"aria-labelledby\": labelId\n            }\n          })), __jsx(ListItemText, {\n            id: labelId,\n            primary: `Line item ${index + 1} ${value.detail[\"testDetail1\"]} & ${value.detail[\"testDetail2\"]} & ${value.flug}`\n          }), __jsx(ListItemSecondaryAction, null, __jsx(IconButton, {\n            edge: \"end\",\n            \"aria-label\": \"comments\"\n          }, __jsx(CommentIcon, null))));\n        }), __jsx(Accordion, null, __jsx(AccordionSummary, {\n          expandIcon: __jsx(ExpandMoreIcon, null),\n          \"aria-controls\": \"panel1a-content\",\n          id: \"panel1a-header\"\n        }, __jsx(Typography, null, \"\\u9054\\u6210\\u6E08\\u307F\")), __jsx(AccordionDetails, {\n          className: classes.AchievementList\n        }, Achievement.map((value, index) => {\n          const labelId = `checkbox-list-label-${value}`;\n          return __jsx(ListItem, {\n            key: year & month & date & value.order,\n            role: undefined,\n            dense: true,\n            button: true,\n            onClick: handleToggle(value.order)\n          }, __jsx(ListItemIcon, null, __jsx(Checkbox, {\n            edge: \"start\",\n            checked: value.flug,\n            tabIndex: -1,\n            disableRipple: true,\n            inputProps: {\n              \"aria-labelledby\": labelId\n            }\n          })), __jsx(ListItemText, {\n            id: labelId,\n            primary: `Line item ${index + 1} ${value.detail[\"testDetail1\"]} & ${value.detail[\"testDetail2\"]} & ${value.flug}`\n          }), __jsx(ListItemSecondaryAction, null, __jsx(IconButton, {\n            edge: \"end\",\n            \"aria-label\": \"comments\"\n          }, __jsx(CommentIcon, null))));\n        }))));\n      }\n    }\n  } // console.log(\"なし：\" + date);\n\n\n  return __jsx(List, {\n    className: classes.roots\n  }, __jsx(ListItem, {\n    key: year & month & date,\n    role: undefined,\n    dense: true,\n    button: true\n  }, __jsx(ListItemIcon, null), __jsx(ListItemText, {\n    id: '0',\n    primary: `タスクが登録されておりません。${year} / ${month} / ${date}`\n  })));\n}","map":null,"metadata":{},"sourceType":"module"}