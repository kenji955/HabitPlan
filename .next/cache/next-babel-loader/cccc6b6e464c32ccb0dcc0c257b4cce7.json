{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\blelm\\\\Desktop\\\\AppCreate\\\\habitPlan\\\\src\\\\components\\\\test\\\\firebaseTest\\\\getData.tsx\",\n    _s2 = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport { useFetchAllData } from \"./DBFetch\";\n// 認証周りやDB周りで必要なためimportしておく\nimport \"firebase/auth\";\nimport \"firebase/database\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { init } from \"../../../modules/tasksModule\";\nexport default function ListComponent() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  var _useState = useState(useSelector(function (state) {\n    return state.tasks;\n  })),\n      UT = _useState[0],\n      setUT = _useState[1];\n\n  useEffect(_s(function () {\n    _s();\n\n    var _useSelector = useSelector(function (state) {\n      return state.user;\n    }),\n        userId = _useSelector.userId;\n\n    var dispatch = useDispatch(); // dataを取ってくる\n\n    var _useFetchAllData = useFetchAllData(),\n        data = _useFetchAllData.data;\n\n    if (!!userId && !!data) {\n      console.log(\"getData.tsx data\");\n      console.log(data);\n      dispatch(init(data));\n      setUT(useSelector(function (state) {\n        return state.tasks;\n      }));\n    }\n  }, \"SrOfQdI33YwJ4gqU66kW7KXlC1E=\", false, function () {\n    return [useSelector, useDispatch, useFetchAllData, useSelector];\n  })); // ここでstateを使うならログイン時にDBから取得したデータをReduxに保管する必要がある。\n  // useCallback(() => {\n  //     userTask = useSelector((state: RootState) => state.tasks);\n  // }, [userId]);\n\n  console.log(\"getData UT\");\n  console.log(UT); // data ? console.log(data.userTaskInfo) : console.log('noo');\n  // object形式なので使いやすいように{key, value}形式のリストに変換する\n  // また、データが変わらない限り結果は同じなのでメモ化しておく\n  // const dataList = useMemo(() => Object.entries(data || {}).map(([key, value]) => ({ key, value })), [data]);\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 12\n    }\n  }, \"test\"); // return <div>{data.userTaskInfo.calendar[0].PatternId}</div>;\n  // <dl>{dataList.map(({ key, value }) =>\n  //   <React.Fragment key={`${key}${value}`}>\n  //     <dt>key: {key}</dt>\n  //     <dt>value: {value}</dt>\n  //   </React.Fragment>\n  // )}</dl>\n}\n\n_s2(ListComponent, \"PfQ2H4sk2mhbcewSya7l2fHHVqM=\", false, function () {\n  return [useSelector];\n});\n\n_c = ListComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListComponent\");","map":{"version":3,"sources":["C:/Users/blelm/Desktop/AppCreate/habitPlan/src/components/test/firebaseTest/getData.tsx"],"names":["React","useEffect","useState","useFetchAllData","useDispatch","useSelector","init","ListComponent","state","tasks","UT","setUT","user","userId","dispatch","data","console","log"],"mappings":";;;;AAAA,OAAOA,KAAP,IAA6BC,SAA7B,EAAiDC,QAAjD,QAAiE,OAAjE;AACA,SAASC,eAAT,QAAgC,WAAhC;AAEA;AACA,OAAO,eAAP;AACA,OAAO,mBAAP;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAGA,SAASC,IAAT,QAAqB,8BAArB;AAEA,eAAe,SAASC,aAAT,GAAyB;AAAA;;AAAA;;AAAA,kBACjBL,QAAQ,CAACG,WAAW,CAAC,UAACG,KAAD;AAAA,WAAsBA,KAAK,CAACC,KAA5B;AAAA,GAAD,CAAZ,CADS;AAAA,MAC7BC,EAD6B;AAAA,MAC1BC,KAD0B;;AAEpCV,EAAAA,SAAS,IAAC,YAAM;AAAA;;AAAA,uBACOI,WAAW,CAAC,UAACG,KAAD;AAAA,aAAsBA,KAAK,CAACI,IAA5B;AAAA,KAAD,CADlB;AAAA,QACJC,MADI,gBACJA,MADI;;AAEZ,QAAMC,QAAQ,GAAGV,WAAW,EAA5B,CAFY,CAGZ;;AAHY,2BAIKD,eAAe,EAJpB;AAAA,QAIJY,IAJI,oBAIJA,IAJI;;AAKZ,QAAI,CAAC,CAACF,MAAF,IAAY,CAAC,CAACE,IAAlB,EAAwB;AACpBC,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAD,MAAAA,QAAQ,CAACR,IAAI,CAACS,IAAD,CAAL,CAAR;AACAJ,MAAAA,KAAK,CAACN,WAAW,CAAC,UAACG,KAAD;AAAA,eAAsBA,KAAK,CAACC,KAA5B;AAAA,OAAD,CAAZ,CAAL;AACH;AACJ,GAXQ;AAAA,YACcJ,WADd,EAEYD,WAFZ,EAIYD,eAJZ,EASKE,WATL;AAAA,KAAT,CAFoC,CAepC;AACA;AACA;AACA;;AAEAW,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYP,EAAZ,EArBoC,CAsBpC;AACA;AACA;AACA;;AAEA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP,CA3BoC,CA4BpC;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;IAnCuBH,a;UACQF,W;;;KADRE,a","sourcesContent":["import React, { useCallback, useEffect, useMemo, useState } from \"react\";\r\nimport { useFetchAllData } from \"./DBFetch\";\r\nimport firebase from \"firebase/app\";\r\n// 認証周りやDB周りで必要なためimportしておく\r\nimport \"firebase/auth\";\r\nimport \"firebase/database\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../modules/rootReducer\";\r\nimport { userTask } from \"../../../modules/userTasksType\";\r\nimport { init } from \"../../../modules/tasksModule\";\r\n\r\nexport default function ListComponent() {\r\n    const [UT,setUT] = useState(useSelector((state: RootState) => state.tasks));\r\n    useEffect(() => {\r\n        const { userId } = useSelector((state: RootState) => state.user);\r\n        const dispatch = useDispatch();\r\n        // dataを取ってくる\r\n        const { data } = useFetchAllData();\r\n        if (!!userId && !!data) {\r\n            console.log(\"getData.tsx data\");\r\n            console.log(data);\r\n            dispatch(init(data));\r\n            setUT(useSelector((state: RootState) => state.tasks));\r\n        }\r\n    });\r\n\r\n    // ここでstateを使うならログイン時にDBから取得したデータをReduxに保管する必要がある。\r\n    // useCallback(() => {\r\n    //     userTask = useSelector((state: RootState) => state.tasks);\r\n    // }, [userId]);\r\n\r\n    console.log(\"getData UT\");\r\n    console.log(UT);\r\n    // data ? console.log(data.userTaskInfo) : console.log('noo');\r\n    // object形式なので使いやすいように{key, value}形式のリストに変換する\r\n    // また、データが変わらない限り結果は同じなのでメモ化しておく\r\n    // const dataList = useMemo(() => Object.entries(data || {}).map(([key, value]) => ({ key, value })), [data]);\r\n\r\n    return <div>test</div>;\r\n    // return <div>{data.userTaskInfo.calendar[0].PatternId}</div>;\r\n    // <dl>{dataList.map(({ key, value }) =>\r\n    //   <React.Fragment key={`${key}${value}`}>\r\n    //     <dt>key: {key}</dt>\r\n    //     <dt>value: {value}</dt>\r\n    //   </React.Fragment>\r\n    // )}</dl>\r\n}\r\n"]},"metadata":{},"sourceType":"module"}