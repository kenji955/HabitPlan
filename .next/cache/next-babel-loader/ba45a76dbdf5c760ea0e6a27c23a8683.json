{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\blelm\\\\Desktop\\\\AppCreate\\\\habitPlan\\\\src\\\\components\\\\view\\\\TaskModal.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport Fade from \"@material-ui/core/Fade\";\nimport InputN from \"./InputNormal\";\nimport AppVar from \"./AppVar\";\nimport PatternSwitchList from \"./PatternSwitch\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { taskRegister } from \"../../modules/tasksModule\";\nconst useStyles = makeStyles(theme => createStyles({\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\" // width: \"80%\",\n    // height: \"80%\",\n\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    width: \"50%\",\n    height: \"80%\",\n    overflowY: \"scroll\",\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3)\n  }\n}));\nconst contentsList = [{\n  label: \"if-thenプランニング\",\n  value: \"\"\n}, {\n  label: \"習慣の積み上げ\",\n  value: \"\"\n}, {\n  label: \"パターン\",\n  value: \"\"\n}, {\n  label: \"気が進まないとき\",\n  value: \"\"\n}, {\n  label: \"長期的に見返りのある習慣の即時的な楽しみ\",\n  value: \"\"\n}, {\n  label: \"目標\",\n  value: \"\"\n}, {\n  label: \"守れなかった時の罰則\",\n  value: \"\"\n}, {\n  label: \"レベル\",\n  value: \"\"\n}, {\n  label: \"避けることで得られるメリット\",\n  value: \"\"\n}, {\n  label: \"見返りのない習慣に対する即時的な痛み\",\n  value: \"\"\n}];\nexport default function TaskModal(props) {\n  const classes = useStyles(); // const [open, setOpen] = React.useState(false);\n\n  const [checked, setChecked] = React.useState([]); // if (props.task) {\n  //     const newChecked = [...checked];\n  //     props.task.patternInfo.map(\n  //         (content: { patternID: number; order: number }) => {\n  //             newChecked.push(content.patternID);\n  //         }\n  //     );\n  //     setChecked(newChecked);\n  // }\n\n  const dispatch = useDispatch();\n  const {\n    userTaskInfo\n  } = useSelector(state => state.tasks); // 配列を作って項目一覧を作るなら、その配列を使って以下の変数の初期設定もやりたいところ\n  // 最終的には項目一覧もReduxで管理したい。それをタスク一覧の右上に表示した設定ボタンから開くモーダルでONOFFを設定することで、タスク詳細画面で使う項目を選べる。新規登録時もONになっている項目が表示される\n  // タスク詳細画面でプラスボタンを押したら項目を増やせる。それも項目一覧に保管される。\n  // const defaultTask: newTasksType = { [\"追加\"]: \"追加\" };\n\n  const [contents, setContents] = React.useState(contentsList);\n  const checkNew = userTaskInfo.tasks.length < parseInt(props.index); // すでにある項目のパターンIDをセットする。\n\n  if (!checkNew) {\n    const patternIdList = props.task.patternInfo.map(content => {\n      return content.patternID;\n    });\n    setChecked(patternIdList);\n  } // let newTasks:{[content: string]: string};\n  // const handleOpen = () => {\n  //     props.setOpen(props.index);\n  //     console.log(\"props.index\" + props.index);\n  //     console.log(\"props.open\" + props.open);\n  // };\n\n\n  const handleClose = () => {\n    props.setOpen(9999);\n  };\n\n  const handleRegister = () => {\n    let details;\n    contents.map((content, index) => {\n      details = _objectSpread(_objectSpread({}, details), {}, {\n        [content.label]: content.value\n      });\n    });\n    let patternInfo;\n    checked.map(content => {\n      const regiterPatterninfo = {\n        patternID: content,\n        order: 1\n      };\n      patternInfo.push(regiterPatterninfo); //  = {\n      //     ...patternInfo,\n      //     regiterPatterninfo,\n      // };\n    });\n    let newTasks = {\n      detail: details,\n      patternInfo: patternInfo\n    }; // ここで編集\n\n    dispatch(taskRegister(newTasks));\n    props.setOpen(9999);\n  }; // ここは配列で管理してmapで表示したいところ\n  // task型の変数を用意して、それに値を格納する\n  // 新規だったら登録、すでにある項目であれば更新する。\n\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 9\n    }\n  }, __jsx(Modal, {\n    \"aria-labelledby\": \"transition-modal-title\",\n    \"aria-describedby\": \"transition-modal-description\",\n    className: classes.modal,\n    open: props.index == props.open,\n    onClose: handleClose,\n    closeAfterTransition: true,\n    BackdropComponent: Backdrop,\n    BackdropProps: {\n      timeout: 500\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }\n  }, __jsx(Fade, {\n    in: props.index == props.open,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 17\n    }\n  }, __jsx(\"div\", {\n    className: classes.paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 21\n    }\n  }, __jsx(AppVar, {\n    handleRegister: handleRegister,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 25\n    }\n  }), __jsx(\"h2\", {\n    id: \"transition-modal-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 25\n    }\n  }, \"\\u30BF\\u30B9\\u30AF\\u8A73\\u7D30\\u753B\\u9762\", props.index + 1), __jsx(\"p\", {\n    id: \"transition-modal-description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 25\n    }\n  }, \"react-transition-group animates me.\"), __jsx(PatternSwitchList, {\n    checked: checked,\n    setChecked: setChecked,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 25\n    }\n  }), contents.map((content, index) => {\n    return __jsx(\"div\", {\n      key: content.label + '_' + index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 33\n      }\n    }, __jsx(InputN // label=\"if-thenプランニング\"\n    , {\n      label: content.label,\n      required: false,\n      index: props.index,\n      contentIndex: index,\n      contents: contents,\n      setContents: setContents,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 37\n      }\n    }), __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 37\n      }\n    }));\n  })))));\n}","map":{"version":3,"sources":["C:/Users/blelm/Desktop/AppCreate/habitPlan/src/components/view/TaskModal.tsx"],"names":["React","makeStyles","createStyles","Modal","Backdrop","Fade","InputN","AppVar","PatternSwitchList","useDispatch","useSelector","taskRegister","useStyles","theme","modal","display","alignItems","justifyContent","paper","backgroundColor","palette","background","width","height","overflowY","border","boxShadow","shadows","padding","spacing","contentsList","label","value","TaskModal","props","classes","checked","setChecked","useState","dispatch","userTaskInfo","state","tasks","contents","setContents","checkNew","length","parseInt","index","patternIdList","task","patternInfo","map","content","patternID","handleClose","setOpen","handleRegister","details","regiterPatterninfo","order","push","newTasks","detail","open","timeout"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport Fade from \"@material-ui/core/Fade\";\r\nimport InputN from \"./InputNormal\";\r\nimport AppVar from \"./AppVar\";\r\nimport {\r\n    tasks,\r\n} from \"../../modules/userTasksType\";\r\nimport PatternSwitchList from \"./PatternSwitch\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { taskRegister } from \"../../modules/tasksModule\";\r\nimport { RootState } from \"../../modules/rootReducer\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        modal: {\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n            // width: \"80%\",\r\n            // height: \"80%\",\r\n        },\r\n        paper: {\r\n            backgroundColor: theme.palette.background.paper,\r\n            width: \"50%\",\r\n            height: \"80%\",\r\n            overflowY: \"scroll\",\r\n            border: \"2px solid #000\",\r\n            boxShadow: theme.shadows[5],\r\n            padding: theme.spacing(2, 4, 3),\r\n        },\r\n    })\r\n);\r\n\r\ntype newTasksType = {\r\n    [content: string]: string;\r\n};\r\nconst contentsList = [\r\n    {\r\n        label: \"if-thenプランニング\",\r\n        value: \"\",\r\n    },\r\n    {\r\n        label: \"習慣の積み上げ\",\r\n        value: \"\",\r\n    },\r\n    {\r\n        label: \"パターン\",\r\n        value: \"\",\r\n    },\r\n    {\r\n        label: \"気が進まないとき\",\r\n        value: \"\",\r\n    },\r\n    {\r\n        label: \"長期的に見返りのある習慣の即時的な楽しみ\",\r\n        value: \"\",\r\n    },\r\n    {\r\n        label: \"目標\",\r\n        value: \"\",\r\n    },\r\n    {\r\n        label: \"守れなかった時の罰則\",\r\n        value: \"\",\r\n    },\r\n    {\r\n        label: \"レベル\",\r\n        value: \"\",\r\n    },\r\n    {\r\n        label: \"避けることで得られるメリット\",\r\n        value: \"\",\r\n    },\r\n    {\r\n        label: \"見返りのない習慣に対する即時的な痛み\",\r\n        value: \"\",\r\n    },\r\n];\r\n\r\nexport default function TaskModal(props: any) {\r\n    const classes = useStyles();\r\n    // const [open, setOpen] = React.useState(false);\r\n    const [checked, setChecked] = React.useState<number[]>([]);\r\n    // if (props.task) {\r\n    //     const newChecked = [...checked];\r\n    //     props.task.patternInfo.map(\r\n    //         (content: { patternID: number; order: number }) => {\r\n    //             newChecked.push(content.patternID);\r\n    //         }\r\n    //     );\r\n    //     setChecked(newChecked);\r\n    // }\r\n    const dispatch = useDispatch();\r\n    const { userTaskInfo } = useSelector((state: RootState) => state.tasks);\r\n    // 配列を作って項目一覧を作るなら、その配列を使って以下の変数の初期設定もやりたいところ\r\n    // 最終的には項目一覧もReduxで管理したい。それをタスク一覧の右上に表示した設定ボタンから開くモーダルでONOFFを設定することで、タスク詳細画面で使う項目を選べる。新規登録時もONになっている項目が表示される\r\n    // タスク詳細画面でプラスボタンを押したら項目を増やせる。それも項目一覧に保管される。\r\n    // const defaultTask: newTasksType = { [\"追加\"]: \"追加\" };\r\n    const [contents, setContents] = React.useState(contentsList);\r\n    const checkNew = userTaskInfo.tasks.length < parseInt(props.index);\r\n\r\n    // すでにある項目のパターンIDをセットする。\r\n    if(!checkNew){\r\n        const patternIdList:number[] = props.task.patternInfo.map((content: {\r\n            patternID: number;\r\n            order: number;\r\n        })=>{\r\n            return content.patternID;\r\n        });\r\n        setChecked(patternIdList);\r\n    }\r\n\r\n    // let newTasks:{[content: string]: string};\r\n\r\n    // const handleOpen = () => {\r\n    //     props.setOpen(props.index);\r\n    //     console.log(\"props.index\" + props.index);\r\n    //     console.log(\"props.open\" + props.open);\r\n    // };\r\n\r\n    const handleClose = () => {\r\n        props.setOpen(9999);\r\n    };\r\n\r\n    const handleRegister = () => {\r\n        let details: {\r\n            [content: string]: string;\r\n        };\r\n        contents.map((content, index) => {\r\n            details = {\r\n                ...details,\r\n                [content.label]: content.value,\r\n            };\r\n        });\r\n\r\n        let patternInfo: {\r\n            patternID: number;\r\n            order: number;\r\n        }[];\r\n\r\n        checked.map((content) => {\r\n            const regiterPatterninfo = {\r\n                patternID: content,\r\n                order: 1,\r\n            };\r\n            patternInfo.push(regiterPatterninfo);\r\n            //  = {\r\n            //     ...patternInfo,\r\n            //     regiterPatterninfo,\r\n            // };\r\n        });\r\n\r\n        let newTasks: tasks = {\r\n            detail: details,\r\n            patternInfo: patternInfo,\r\n        };\r\n\r\n        // ここで編集\r\n        dispatch(taskRegister(newTasks));\r\n\r\n        props.setOpen(9999);\r\n    };\r\n\r\n    // ここは配列で管理してmapで表示したいところ\r\n    // task型の変数を用意して、それに値を格納する\r\n    // 新規だったら登録、すでにある項目であれば更新する。\r\n    return (\r\n        <div>\r\n            {/* <button type=\"button\" onClick={handleOpen}>\r\n                react-transition-group\r\n            </button> */}\r\n            <Modal\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className={classes.modal}\r\n                open={props.index == props.open}\r\n                onClose={handleClose}\r\n                closeAfterTransition\r\n                BackdropComponent={Backdrop}\r\n                BackdropProps={{\r\n                    timeout: 500,\r\n                }}\r\n            >\r\n                <Fade in={props.index == props.open}>\r\n                    <div className={classes.paper}>\r\n                        <AppVar handleRegister={handleRegister} />\r\n                        <h2 id=\"transition-modal-title\">\r\n                            タスク詳細画面{props.index + 1}\r\n                        </h2>\r\n                        <p id=\"transition-modal-description\">\r\n                            react-transition-group animates me.\r\n                        </p>\r\n                        {/* ここを要修正。パターンは選択式ではいけない。複数登録する可能性があるため。登録済み以外のリストをfliterで作成して表示、とかかな。 */}\r\n                        {/* <SimpleSelect choice={choice} setChoice={setChoice} /> */}\r\n                        <PatternSwitchList\r\n                            checked={checked}\r\n                            setChecked={setChecked}\r\n                        />\r\n                        {contents.map((content, index) => {\r\n                            return (\r\n                                <div key={content.label+'_'+index}>\r\n                                    <InputN\r\n                                        // label=\"if-thenプランニング\"\r\n                                        label={content.label}\r\n                                        required={false}\r\n                                        index={props.index}\r\n                                        contentIndex={index}\r\n                                        contents={contents}\r\n                                        setContents={setContents}\r\n                                    />\r\n                                    <br></br>\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                </Fade>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}