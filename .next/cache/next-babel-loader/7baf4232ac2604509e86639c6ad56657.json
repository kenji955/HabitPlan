{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from \"react\";\n// 認証周りやDB周りで必要なためimportしておく\nimport \"firebase/auth\";\nimport \"firebase/database\";\nimport { useDispatch, useSelector } from \"react-redux\";\nexport default function ListComponent() {\n  const {\n    0: UT,\n    1: setUT\n  } = useState(useSelector(state => state.tasks));\n  const {\n    userId\n  } = useSelector(state => state.user);\n  const dispatch = useDispatch(); // const { data } = useFetchAllData();\n\n  const {\n    userTaskInfo\n  } = useSelector(state => state.tasks); // useEffect(() => {\n  // // dataを取ってくる\n  // if (userId != '' && !!data) {\n  //   console.log(userId);\n  //   console.log(\"getData.tsx data\");\n  //   console.log(data);\n  //   // setUT(useSelector((state: RootState) => state.tasks));\n  //   // dispatch(init(data));\n  // }\n  // },[userId]);\n  // ここでstateを使うならログイン時にDBから取得したデータをReduxに保管する必要がある。\n  // useCallback(() => {\n  //     userTask = useSelector((state: RootState) => state.tasks);\n  // }, [userId]);\n\n  console.log(\"getData userTaskInfo\");\n  console.log(userTaskInfo); // data ? console.log(data.userTaskInfo) : console.log('noo');\n  // object形式なので使いやすいように{key, value}形式のリストに変換する\n  // また、データが変わらない限り結果は同じなのでメモ化しておく\n  // const dataList = useMemo(() => Object.entries(data || {}).map(([key, value]) => ({ key, value })), [data]);\n\n  return __jsx(\"div\", null, \"test\"); // return <div>{userTaskInfo.calendar[0].PatternId}</div>;\n  // <dl>{dataList.map(({ key, value }) =>\n  //   <React.Fragment key={`${key}${value}`}>\n  //     <dt>key: {key}</dt>\n  //     <dt>value: {value}</dt>\n  //   </React.Fragment>\n  // )}</dl>\n}","map":null,"metadata":{},"sourceType":"module"}