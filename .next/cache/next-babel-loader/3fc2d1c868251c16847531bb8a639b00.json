{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { taskDetailRegister } from \"../../modules/tasksModule\";\nconst useStyles = makeStyles(theme => createStyles({\n  root: {\n    \"& .MuiTextField-root\": {\n      margin: theme.spacing(1),\n      width: \"25ch\"\n    }\n  }\n}));\nexport default function FormPropsTextFields(props) {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const {\n    userTaskInfo\n  } = useSelector(state => state.tasks); // const onChangeHandler = (event: any) => {\n  //     // console.log(event.target.value);\n  //     dispatch(\n  //         taskDetailRegister([event.target.value, props.label, props.index])\n  //     );\n  // };\n  // 新規登録か更新かをチェックする。新規であればTrue\n\n  const checkNew = userTaskInfo.tasks.length < parseInt(props.index);\n\n  const onBlurHandler = event => {\n    console.log(props.label + '離れたぞ！！！');\n\n    if (checkNew) {\n      console.log(event.target.value);\n      const contentsCopy = props.contents.slice();\n      contentsCopy[props.contentIndex].value = event.target.value;\n      props.setContents(contentsCopy);\n    } else {\n      console.log(event.target.value);\n      dispatch(taskDetailRegister([event.target.value, props.label, props.index]));\n    }\n  };\n\n  const newTaskOnChangeHandler = event => {\n    // console.log(event.target.value);\n    // ここでevent.target.valueとラベル(連想配列のキー)を送って処理する。処理も未作成\n    const contentsCopy = props.contents.slice();\n    contentsCopy[props.contentIndex].value = event.target.value;\n    props.setContents(contentsCopy);\n  };\n\n  let valueContent;\n\n  if (checkNew) {\n    return (// <form className={classes.root} noValidate autoComplete=\"off\">\n      __jsx(TextField, {\n        required: true,\n        id: \"standard-basic\",\n        label: props.label // onChange={newTaskOnChangeHandler}\n        ,\n        onBlur: onBlurHandler,\n        defaultValue: props.contents[props.contentIndex].value\n      }) // </form>\n\n    );\n  } else if (props.required) {\n    return (// <form className={classes.root} noValidate autoComplete=\"off\">\n      __jsx(TextField, {\n        required: true,\n        id: \"standard-basic\",\n        label: props.label // onChange={onChangeHandler}\n        ,\n        onBlur: onBlurHandler,\n        defaultValue: userTaskInfo.tasks[parseInt(props.index)].detail[props.label]\n      }) // </form>\n\n    );\n  }\n\n  if (userTaskInfo.tasks[parseInt(props.index)].detail[props.label]) {\n    valueContent = userTaskInfo.tasks[parseInt(props.index)].detail[props.label];\n  } else {\n    valueContent = '';\n  }\n\n  return (// <form className={classes.root} noValidate autoComplete=\"off\">\n    __jsx(TextField, {\n      id: \"standard-basic\",\n      label: props.label // onChange={onChangeHandler}\n      ,\n      onBlur: onBlurHandler,\n      defaultValue: valueContent // value={\n      //     userTaskInfo.tasks[parseInt(props.index)].detail[props.label]\n      // }\n\n    }) // </form>\n\n  );\n}","map":null,"metadata":{},"sourceType":"module"}