{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\blelm\\\\Desktop\\\\AppCreate\\\\habitPlan\\\\src\\\\components\\\\view\\\\CheckBoxList.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport CommentIcon from '@material-ui/icons/Comment';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { taskCheckComplete } from \"../../modules/tasksModule\";\nconst useStyles = makeStyles(theme => createStyles({\n  roots: {\n    width: '100%',\n    maxWidth: 720,\n    margin: 'auto',\n    backgroundColor: theme.palette.background.paper\n  }\n}));\nexport default function CheckboxList() {\n  const classes = useStyles();\n  const {\n    0: checked,\n    1: setChecked\n  } = useState([]);\n  const {\n    userTaskInfo\n  } = useSelector(state => state.tasks);\n  const dispatch = useDispatch();\n  const year = new Date(\"Thu, 22 May 2020 02:00:00\").getFullYear();\n  const month = new Date(\"Thu, 22 May 2020 02:00:00\").getMonth() + 1;\n  const date = new Date(\"Thu, 22 May 2020 02:00:00\").getDate();\n\n  const handleToggle = value => () => {\n    const currentIndex = checked.indexOf(value);\n    const newChecked = [...checked];\n\n    if (currentIndex === -1) {\n      newChecked.push(value);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n\n    setChecked(newChecked);\n    dispatch(taskCheckComplete([year, month, date, value]));\n  }; // ここで作成する機能はたくさんある。\n  // 日付とパターンIDを読み取ること\n  // いや、ここじゃないか？ここではカレンダーに格納されたタスクを読み取るだけで良いのでは？\n  // カレンダー画面でパターンを登録し、その時にタスクリストからパターンIDが合致するものだけ抽出して、該当する日付のカレンダー配列に格納する\n  // 一度シンプルに、カレンダー配列に格納されているタスクを読み取る機能を実装しよう\n  // const test = userTaskInfo.calendar.filter(function(value){\n  //   return value.year == year && value.month == month && value.date == date\n  // });\n  // const test = userTaskInfo.calendar[year][month][date]\n\n\n  const test = userTaskInfo.calendar;\n  console.log(test[year][month][22]);\n  return __jsx(List, {\n    className: classes.roots,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  }, test[year][month][22].tasks.map((value, index) => {\n    const labelId = `checkbox-list-label-${value}`;\n    return __jsx(ListItem, {\n      key: year & month & date & index,\n      role: undefined,\n      dense: true,\n      button: true,\n      onClick: handleToggle(index),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }\n    }, __jsx(ListItemIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }\n    }, __jsx(Checkbox, {\n      edge: \"start\",\n      checked: checked.indexOf(index) !== -1,\n      tabIndex: -1,\n      disableRipple: true,\n      inputProps: {\n        'aria-labelledby': labelId\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 15\n      }\n    })), __jsx(ListItemText, {\n      id: labelId,\n      primary: `Line item ${index + 1} ${value.detail1} & ${value.detail2} & ${value.flug}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }\n    }), __jsx(ListItemSecondaryAction, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }\n    }, __jsx(IconButton, {\n      edge: \"end\",\n      \"aria-label\": \"comments\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 15\n      }\n    }, __jsx(CommentIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }\n    }))));\n  })) // <List className={classes.roots}>\n  //   {[0, 1, 2, 3].map((value) => {\n  //     const labelId = `checkbox-list-label-${value}`;\n  //     return (\n  //       <ListItem key={value} role={undefined} dense button onClick={handleToggle(value)}>\n  //         <ListItemIcon>\n  //           <Checkbox\n  //             edge=\"start\"\n  //             checked={checked.indexOf(value) !== -1}\n  //             tabIndex={-1}\n  //             disableRipple\n  //             inputProps={{ 'aria-labelledby': labelId }}\n  //           />\n  //         </ListItemIcon>\n  //         <ListItemText id={labelId} primary={`Line item ${value + 1}`} />\n  //         <ListItemSecondaryAction>\n  //           <IconButton edge=\"end\" aria-label=\"comments\">\n  //           {/* <IconButton aria-label=\"comments\"> */}\n  //             <CommentIcon />\n  //           </IconButton>\n  //         </ListItemSecondaryAction>\n  //       </ListItem>\n  //     );\n  //   })}\n  // </List>\n  ;\n}","map":{"version":3,"sources":["C:/Users/blelm/Desktop/AppCreate/habitPlan/src/components/view/CheckBoxList.tsx"],"names":["React","useState","createStyles","makeStyles","List","ListItem","ListItemIcon","ListItemSecondaryAction","ListItemText","Checkbox","IconButton","CommentIcon","useDispatch","useSelector","taskCheckComplete","useStyles","theme","roots","width","maxWidth","margin","backgroundColor","palette","background","paper","CheckboxList","classes","checked","setChecked","userTaskInfo","state","tasks","dispatch","year","Date","getFullYear","month","getMonth","date","getDate","handleToggle","value","currentIndex","indexOf","newChecked","push","splice","test","calendar","console","log","map","index","labelId","undefined","detail1","detail2","flug"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CommentIcon from '@material-ui/icons/Comment';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RootState } from \"../../modules/rootReducer\";\r\nimport { taskCheckComplete } from \"../../modules/tasksModule\";\r\nimport { calendar } from '../../modules/userTasksType';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    roots: {\r\n      width: '100%',\r\n      maxWidth: 720,\r\n      margin:'auto',\r\n      backgroundColor: theme.palette.background.paper,\r\n    },\r\n  }),\r\n);\r\n\r\nexport default function CheckboxList() {\r\n  const classes = useStyles();\r\n  const [checked, setChecked] = useState([]);\r\n  const { userTaskInfo } = useSelector((state: RootState) => state.tasks);\r\n  const dispatch = useDispatch();\r\n  const year= new Date(\"Thu, 22 May 2020 02:00:00\").getFullYear();\r\n  const month= new Date(\"Thu, 22 May 2020 02:00:00\").getMonth() + 1;\r\n  const date= new Date(\"Thu, 22 May 2020 02:00:00\").getDate();\r\n\r\n  const handleToggle = (value: number) => () => {\r\n    const currentIndex = checked.indexOf(value);\r\n    const newChecked = [...checked];\r\n\r\n    if (currentIndex === -1) {\r\n      newChecked.push(value);\r\n    } else {\r\n      newChecked.splice(currentIndex, 1);\r\n    }\r\n\r\n    setChecked(newChecked);\r\n\r\n    dispatch(taskCheckComplete([year,month,date,value]));\r\n  };\r\n\r\n  // ここで作成する機能はたくさんある。\r\n  // 日付とパターンIDを読み取ること\r\n  // いや、ここじゃないか？ここではカレンダーに格納されたタスクを読み取るだけで良いのでは？\r\n  // カレンダー画面でパターンを登録し、その時にタスクリストからパターンIDが合致するものだけ抽出して、該当する日付のカレンダー配列に格納する\r\n  // 一度シンプルに、カレンダー配列に格納されているタスクを読み取る機能を実装しよう\r\n  \r\n\r\n  // const test = userTaskInfo.calendar.filter(function(value){\r\n  //   return value.year == year && value.month == month && value.date == date\r\n  // });\r\n\r\n  // const test = userTaskInfo.calendar[year][month][date]\r\n  const test = userTaskInfo.calendar;\r\n\r\n  console.log(test[year][month][22]);\r\n\r\n  return (\r\n    <List className={classes.roots}>\r\n      {test[year][month][22].tasks.map((value,index) => {\r\n        const labelId = `checkbox-list-label-${value}`;\r\n\r\n        return (\r\n          <ListItem key={year&month&date&index} role={undefined} dense button onClick={handleToggle(index)}>\r\n            <ListItemIcon>\r\n              <Checkbox\r\n                edge=\"start\"\r\n                checked={checked.indexOf(index) !== -1}\r\n                tabIndex={-1}\r\n                disableRipple\r\n                inputProps={{ 'aria-labelledby': labelId }}\r\n              />\r\n            </ListItemIcon>\r\n            <ListItemText id={labelId} primary={`Line item ${index + 1} ${value.detail1} & ${value.detail2} & ${value.flug}`} />\r\n            <ListItemSecondaryAction>\r\n              <IconButton edge=\"end\" aria-label=\"comments\">\r\n              {/* <IconButton aria-label=\"comments\"> */}\r\n                <CommentIcon />\r\n              </IconButton>\r\n            </ListItemSecondaryAction>\r\n          </ListItem>\r\n        );\r\n      })}\r\n    </List>\r\n    // <List className={classes.roots}>\r\n    //   {[0, 1, 2, 3].map((value) => {\r\n    //     const labelId = `checkbox-list-label-${value}`;\r\n\r\n    //     return (\r\n    //       <ListItem key={value} role={undefined} dense button onClick={handleToggle(value)}>\r\n    //         <ListItemIcon>\r\n    //           <Checkbox\r\n    //             edge=\"start\"\r\n    //             checked={checked.indexOf(value) !== -1}\r\n    //             tabIndex={-1}\r\n    //             disableRipple\r\n    //             inputProps={{ 'aria-labelledby': labelId }}\r\n    //           />\r\n    //         </ListItemIcon>\r\n    //         <ListItemText id={labelId} primary={`Line item ${value + 1}`} />\r\n    //         <ListItemSecondaryAction>\r\n    //           <IconButton edge=\"end\" aria-label=\"comments\">\r\n    //           {/* <IconButton aria-label=\"comments\"> */}\r\n    //             <CommentIcon />\r\n    //           </IconButton>\r\n    //         </ListItemSecondaryAction>\r\n    //       </ListItem>\r\n    //     );\r\n    //   })}\r\n    // </List>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}