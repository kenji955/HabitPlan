{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\blelm\\\\Desktop\\\\AppCreate\\\\habitPlan\\\\src\\\\components\\\\view\\\\CheckBoxList.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CommentIcon from \"@material-ui/icons/Comment\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { taskCheckComplete } from \"../../modules/tasksModule\";\nimport { Accordion, AccordionSummary, Typography, AccordionDetails } from \"@material-ui/core\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nvar useStyles = makeStyles(function (theme) {\n  return createStyles({\n    roots: {\n      width: \"100%\",\n      maxWidth: 720,\n      margin: \"auto\",\n      backgroundColor: theme.palette.background.paper\n    },\n    AchievementList: {\n      display: \"inline-block\",\n      width: \"100%\"\n    }\n  });\n});\nexport default function CheckboxList(props) {\n  _s();\n\n  var _this = this;\n\n  var classes = useStyles();\n\n  var _useState = useState([]),\n      checked = _useState[0],\n      setChecked = _useState[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.tasks;\n  }),\n      userTaskInfo = _useSelector.userTaskInfo;\n\n  var dispatch = useDispatch(); // const year = new Date(\"Thu, 22 May 2020 02:00:00\").getFullYear();\n  // const month = new Date(\"Thu, 22 May 2020 02:00:00\").getMonth() + 1;\n  // const date = new Date(\"Thu, 22 May 2020 02:00:00\").getDate();\n\n  var year = props.choiceDate[0];\n  var month = props.choiceDate[1];\n  var date = props.choiceDate[2];\n\n  var handleToggle = function handleToggle(order) {\n    return function () {\n      var currentIndex = checked.indexOf(order);\n\n      var newChecked = _toConsumableArray(checked);\n\n      if (currentIndex === -1) {\n        newChecked.push(order);\n      } else {\n        newChecked.splice(currentIndex, 1);\n      }\n\n      setChecked(newChecked);\n      console.log(\"list\" + order);\n      dispatch(taskCheckComplete([year, month, date, order]));\n    };\n  }; // ここで作成する機能はたくさんある。\n  // 日付とパターンIDを読み取ること\n  // いや、ここじゃないか？ここではカレンダーに格納されたタスクを読み取るだけで良いのでは？\n  // カレンダー画面でパターンを登録し、その時にタスクリストからパターンIDが合致するものだけ抽出して、該当する日付のカレンダー配列に格納する\n  // 一度シンプルに、カレンダー配列に格納されているタスクを読み取る機能を実装しよう\n  // const test = userTaskInfo.calendar.filter(function(value){\n  //   return value.year == year && value.month == month && value.date == date\n  // });\n  // const test = userTaskInfo.calendar[year][month][date]\n\n\n  var test = userTaskInfo.calendar; // console.log(test[year][month][22]);\n\n  if (year in userTaskInfo.calendar) {\n    if (month in userTaskInfo.calendar[year]) {\n      if (date in userTaskInfo.calendar[year][month]) {\n        // console.log(\"PatternId：\" + userTaskInfo.calendar[year][month][date].PatternId);\n        // return userTaskInfo.calendar[year][month][date].PatternId;\n        // let Achievement:[JSX.Element],NotAchieved:[JSX.Element];\n        // 達成済みリスト\n        var Achievement = test[year][month][date].tasks.filter(function (value) {\n          return value.flug == true;\n        });\n        console.log(\"Achievement\");\n        console.log(Achievement); // 未達成リスト\n\n        var NotAchieved = test[year][month][date].tasks.filter(function (value) {\n          return value.flug == false;\n        });\n        console.log(\"NotAchieved\");\n        console.log(NotAchieved);\n        return __jsx(List, {\n          className: classes.roots,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 21\n          }\n        }, NotAchieved.map(function (value, index) {\n          var labelId = \"checkbox-list-label-\".concat(value);\n          return __jsx(ListItem, {\n            key: year & month & date & value.order,\n            role: undefined,\n            dense: true,\n            button: true,\n            onClick: handleToggle(value.order),\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 33\n            }\n          }, __jsx(ListItemIcon, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 37\n            }\n          }, __jsx(Checkbox, {\n            edge: \"start\",\n            checked: value.flug,\n            tabIndex: -1,\n            disableRipple: true,\n            inputProps: {\n              \"aria-labelledby\": labelId\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 41\n            }\n          })), __jsx(ListItemText, {\n            id: labelId,\n            primary: \"Line item \".concat(index + 1, \" \").concat(value.detail[\"testDetail1\"], \" & \").concat(value.detail[\"testDetail2\"], \" & \").concat(value.flug),\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 37\n            }\n          }), __jsx(ListItemSecondaryAction, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 37\n            }\n          }, __jsx(IconButton, {\n            edge: \"end\",\n            \"aria-label\": \"comments\",\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 41\n            }\n          }, __jsx(CommentIcon, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 45\n            }\n          }))));\n        }), __jsx(Accordion, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 25\n          }\n        }, __jsx(AccordionSummary, {\n          expandIcon: __jsx(ExpandMoreIcon, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 45\n            }\n          }),\n          \"aria-controls\": \"panel1a-content\",\n          id: \"panel1a-header\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 29\n          }\n        }, __jsx(Typography, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 33\n          }\n        }, \"\\u9054\\u6210\\u6E08\\u307F\")), __jsx(AccordionDetails, {\n          className: classes.AchievementList,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 29\n          }\n        }, Achievement.map(function (value, index) {\n          var labelId = \"checkbox-list-label-\".concat(value);\n          return __jsx(ListItem, {\n            key: year & month & date & value.order,\n            role: undefined,\n            dense: true,\n            button: true,\n            onClick: handleToggle(value.order),\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 41\n            }\n          }, __jsx(ListItemIcon, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 45\n            }\n          }, __jsx(Checkbox, {\n            edge: \"start\",\n            checked: value.flug,\n            tabIndex: -1,\n            disableRipple: true,\n            inputProps: {\n              \"aria-labelledby\": labelId\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 49\n            }\n          })), __jsx(ListItemText, {\n            id: labelId,\n            primary: \"Line item \".concat(index + 1, \" \").concat(value.detail[\"testDetail1\"], \" & \").concat(value.detail[\"testDetail2\"], \" & \").concat(value.flug),\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 45\n            }\n          }), __jsx(ListItemSecondaryAction, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 45\n            }\n          }, __jsx(IconButton, {\n            edge: \"end\",\n            \"aria-label\": \"comments\",\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 49\n            }\n          }, __jsx(CommentIcon, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 53\n            }\n          }))));\n        }))));\n      }\n    }\n  } // console.log(\"なし：\" + date);\n\n\n  return __jsx(List, {\n    className: classes.roots,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 9\n    }\n  }, __jsx(ListItem, {\n    key: year & month & date,\n    role: undefined,\n    dense: true,\n    button: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 13\n    }\n  }, __jsx(ListItemIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 17\n    }\n  }), __jsx(ListItemText, {\n    id: \"0\",\n    primary: \"\\u30BF\\u30B9\\u30AF\\u304C\\u767B\\u9332\\u3055\\u308C\\u3066\\u304A\\u308A\\u307E\\u305B\\u3093\\u3002\".concat(year, \" / \").concat(month, \" / \").concat(date),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 17\n    }\n  })));\n}\n\n_s(CheckboxList, \"jGxcTRXNqEfFn+uczUfALSv1UEg=\", false, function () {\n  return [useStyles, useSelector, useDispatch];\n});\n\n_c = CheckboxList;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckboxList\");","map":{"version":3,"sources":["C:/Users/blelm/Desktop/AppCreate/habitPlan/src/components/view/CheckBoxList.tsx"],"names":["React","useState","createStyles","makeStyles","List","ListItem","ListItemIcon","ListItemSecondaryAction","ListItemText","Checkbox","IconButton","CommentIcon","useDispatch","useSelector","taskCheckComplete","Accordion","AccordionSummary","Typography","AccordionDetails","ExpandMoreIcon","useStyles","theme","roots","width","maxWidth","margin","backgroundColor","palette","background","paper","AchievementList","display","CheckboxList","props","classes","checked","setChecked","state","tasks","userTaskInfo","dispatch","year","choiceDate","month","date","handleToggle","order","currentIndex","indexOf","newChecked","push","splice","console","log","test","calendar","Achievement","filter","value","flug","NotAchieved","map","index","labelId","undefined","detail"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CommentIcon from \"@material-ui/icons/Comment\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../modules/rootReducer\";\r\nimport { taskCheckComplete } from \"../../modules/tasksModule\";\r\nimport { calendar } from \"../../modules/userTasksType\";\r\nimport {\r\n    Accordion,\r\n    AccordionSummary,\r\n    Typography,\r\n    AccordionDetails,\r\n} from \"@material-ui/core\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        roots: {\r\n            width: \"100%\",\r\n            maxWidth: 720,\r\n            margin: \"auto\",\r\n            backgroundColor: theme.palette.background.paper,\r\n        },\r\n        AchievementList: {\r\n            display: \"inline-block\",\r\n            width: \"100%\",\r\n        },\r\n    })\r\n);\r\n\r\nexport default function CheckboxList(props: { choiceDate: number[] }) {\r\n    const classes = useStyles();\r\n    const [checked, setChecked] = useState([]);\r\n    const { userTaskInfo } = useSelector((state: RootState) => state.tasks);\r\n    const dispatch = useDispatch();\r\n    // const year = new Date(\"Thu, 22 May 2020 02:00:00\").getFullYear();\r\n    // const month = new Date(\"Thu, 22 May 2020 02:00:00\").getMonth() + 1;\r\n    // const date = new Date(\"Thu, 22 May 2020 02:00:00\").getDate();\r\n    const year = props.choiceDate[0];\r\n    const month = props.choiceDate[1];\r\n    const date = props.choiceDate[2];\r\n\r\n    const handleToggle = (order: number) => () => {\r\n        const currentIndex = checked.indexOf(order);\r\n        const newChecked = [...checked];\r\n\r\n        if (currentIndex === -1) {\r\n            newChecked.push(order);\r\n        } else {\r\n            newChecked.splice(currentIndex, 1);\r\n        }\r\n\r\n        setChecked(newChecked);\r\n\r\n        console.log(\"list\" + order);\r\n\r\n        dispatch(taskCheckComplete([year, month, date, order]));\r\n    };\r\n\r\n    // ここで作成する機能はたくさんある。\r\n    // 日付とパターンIDを読み取ること\r\n    // いや、ここじゃないか？ここではカレンダーに格納されたタスクを読み取るだけで良いのでは？\r\n    // カレンダー画面でパターンを登録し、その時にタスクリストからパターンIDが合致するものだけ抽出して、該当する日付のカレンダー配列に格納する\r\n    // 一度シンプルに、カレンダー配列に格納されているタスクを読み取る機能を実装しよう\r\n\r\n    // const test = userTaskInfo.calendar.filter(function(value){\r\n    //   return value.year == year && value.month == month && value.date == date\r\n    // });\r\n\r\n    // const test = userTaskInfo.calendar[year][month][date]\r\n    const test = userTaskInfo.calendar;\r\n\r\n    // console.log(test[year][month][22]);\r\n\r\n    if (year in userTaskInfo.calendar) {\r\n        if (month in userTaskInfo.calendar[year]) {\r\n            if (date in userTaskInfo.calendar[year][month]) {\r\n                // console.log(\"PatternId：\" + userTaskInfo.calendar[year][month][date].PatternId);\r\n                // return userTaskInfo.calendar[year][month][date].PatternId;\r\n                // let Achievement:[JSX.Element],NotAchieved:[JSX.Element];\r\n                // 達成済みリスト\r\n                const Achievement = test[year][month][date].tasks.filter(\r\n                    function (value) {\r\n                        return value.flug == true;\r\n                    }\r\n                );\r\n                console.log(\"Achievement\");\r\n                console.log(Achievement);\r\n\r\n                // 未達成リスト\r\n                const NotAchieved = test[year][month][date].tasks.filter(\r\n                    function (value) {\r\n                        return value.flug == false;\r\n                    }\r\n                );\r\n                console.log(\"NotAchieved\");\r\n                console.log(NotAchieved);\r\n\r\n                return (\r\n                    <List className={classes.roots}>\r\n                        {NotAchieved.map((value, index) => {\r\n                            const labelId = `checkbox-list-label-${value}`;\r\n\r\n                            return (\r\n                                <ListItem\r\n                                    key={year & month & date & value.order}\r\n                                    role={undefined}\r\n                                    dense\r\n                                    button\r\n                                    onClick={handleToggle(value.order)}\r\n                                >\r\n                                    <ListItemIcon>\r\n                                        <Checkbox\r\n                                            edge=\"start\"\r\n                                            checked={value.flug}\r\n                                            tabIndex={-1}\r\n                                            disableRipple\r\n                                            inputProps={{\r\n                                                \"aria-labelledby\": labelId,\r\n                                            }}\r\n                                        />\r\n                                    </ListItemIcon>\r\n                                    <ListItemText\r\n                                        id={labelId}\r\n                                        primary={`Line item ${index + 1} ${\r\n                                            value.detail[\"testDetail1\"]\r\n                                        } & ${value.detail[\"testDetail2\"]} & ${\r\n                                            value.flug\r\n                                        }`}\r\n                                    />\r\n                                    <ListItemSecondaryAction>\r\n                                        <IconButton\r\n                                            edge=\"end\"\r\n                                            aria-label=\"comments\"\r\n                                        >\r\n                                            <CommentIcon />\r\n                                        </IconButton>\r\n                                    </ListItemSecondaryAction>\r\n                                </ListItem>\r\n                            );\r\n                        })}\r\n                        <Accordion>\r\n                            <AccordionSummary\r\n                                expandIcon={<ExpandMoreIcon />}\r\n                                aria-controls=\"panel1a-content\"\r\n                                id=\"panel1a-header\"\r\n                            >\r\n                                <Typography>達成済み</Typography>\r\n                            </AccordionSummary>\r\n                            <AccordionDetails\r\n                                className={classes.AchievementList}\r\n                            >\r\n                                {Achievement.map((value, index) => {\r\n                                    const labelId = `checkbox-list-label-${value}`;\r\n\r\n                                    return (\r\n                                        <ListItem\r\n                                            key={\r\n                                                year &\r\n                                                month &\r\n                                                date &\r\n                                                value.order\r\n                                            }\r\n                                            role={undefined}\r\n                                            dense\r\n                                            button\r\n                                            onClick={handleToggle(value.order)}\r\n                                        >\r\n                                            <ListItemIcon>\r\n                                                <Checkbox\r\n                                                    edge=\"start\"\r\n                                                    checked={value.flug}\r\n                                                    tabIndex={-1}\r\n                                                    disableRipple\r\n                                                    inputProps={{\r\n                                                        \"aria-labelledby\": labelId,\r\n                                                    }}\r\n                                                />\r\n                                            </ListItemIcon>\r\n                                            <ListItemText\r\n                                                id={labelId}\r\n                                                primary={`Line item ${\r\n                                                    index + 1\r\n                                                } ${\r\n                                                    value.detail[\"testDetail1\"]\r\n                                                } & ${\r\n                                                    value.detail[\"testDetail2\"]\r\n                                                } & ${value.flug}`}\r\n                                            />\r\n                                            <ListItemSecondaryAction>\r\n                                                <IconButton\r\n                                                    edge=\"end\"\r\n                                                    aria-label=\"comments\"\r\n                                                >\r\n                                                    <CommentIcon />\r\n                                                </IconButton>\r\n                                            </ListItemSecondaryAction>\r\n                                        </ListItem>\r\n                                    );\r\n                                })}\r\n                            </AccordionDetails>\r\n                        </Accordion>\r\n                    </List>\r\n                );\r\n            }\r\n        }\r\n    }\r\n    // console.log(\"なし：\" + date);\r\n    return (\r\n        <List className={classes.roots}>\r\n            <ListItem key={year & month & date} role={undefined} dense button>\r\n                <ListItemIcon></ListItemIcon>\r\n                <ListItemText\r\n                    id={\"0\"}\r\n                    primary={`タスクが登録されておりません。${year} / ${month} / ${date}`}\r\n                />\r\n            </ListItem>\r\n        </List>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}