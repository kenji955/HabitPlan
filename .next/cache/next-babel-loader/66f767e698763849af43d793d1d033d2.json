{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { firebase } from \"./firebaseTest\";\nimport { login } from \"../../../modules/userModule\";\nimport { useSelector, useDispatch } from \"react-redux\";\n// ログイン、ログアウトボタン実装\nexport default function FirebaseAuthComponent() {\n  const loggedin = useFirebaseLogin(); // console.log('loggedin');\n  // console.log(loggedin);\n\n  if (!loggedin) {\n    // ログインしていなければログインボタンを表示\n    return __jsx(\"button\", {\n      onClick: () => signInWithPopup()\n    }, \"\\u30ED\\u30B0\\u30A4\\u30F3\");\n  } // ログインしているならログアウトボタンを表示\n\n\n  return __jsx(\"button\", {\n    onClick: () => signOut()\n  }, \"\\u30ED\\u30B0\\u30A2\\u30A6\\u30C8\");\n} // ログイン処理\n\nconst signInWithPopup = () => {\n  // Googleプロバイダオブジェクトのインスタンスを作成\n  const googleAuthProvider = new firebase.auth.GoogleAuthProvider(); // 別タブでログイン画面に飛ばしたいため、signInWithPopupを使う\n  // リダイレクトでログイン画面に飛ばしたい場合はsignInWithRedirectを使う\n\n  return firebase.auth().signInWithPopup(googleAuthProvider);\n}; // ログアウト処理\n\n\nconst signOut = () => {\n  // signOutを呼び出すだけでOK\n  return firebase.auth().signOut();\n}; // ログインしているかチェックするカスタムフックを作る\n\n\nconst useFirebaseLogin = () => {\n  // stateでログイン状態を保持\n  const {\n    0: loggedin,\n    1: setLoggedin\n  } = useState(false);\n  const dispatch = useDispatch();\n  const {\n    userId\n  } = useSelector(state => state.user);\n  useEffect(() => {\n    // 現在ログインしているユーザを取得\n    firebase.auth().onAuthStateChanged(user => {\n      // ユーザ情報が取れればログイン状態\n      console.log('user');\n      let userIdCheck;\n      !!user ? userIdCheck = user.uid : userIdCheck = ''; // これをreduxで管理する\n\n      dispatch(login(userIdCheck));\n      console.log(userId);\n      setLoggedin(!!user);\n    });\n  }, []); // ログイン情報を返却\n\n  return loggedin;\n};","map":null,"metadata":{},"sourceType":"module"}