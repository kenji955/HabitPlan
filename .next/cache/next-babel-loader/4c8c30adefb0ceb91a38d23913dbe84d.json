{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// データベースへの接続\n// import firebase from \"firebase/app\";\n// 認証周りやDB周りで必要なためimportしておく\nimport \"firebase/auth\";\nimport \"firebase/database\";\nimport { useMemo, useState, useEffect, useCallback } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { firebase } from \"./firebaseTest\";\nimport { login } from \"../../../modules/userModule\";\n\nvar useReduxFetch = function useReduxFetch() {\n  var dispatch = useDispatch();\n  return dispatch;\n}; // カスタムフックにしておく\n\n\nvar useDatabase = function useDatabase() {\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      userId = _useSelector.userId;\n\n  var dispatch = useDispatch();\n\n  var _useState = useState(\"\"),\n      check = _useState[0],\n      setCheck = _useState[1]; // 同じパスでは毎回同じ結果が得られるのでmemo化しておく\n  // return useMemo(() => firebase.database().ref(\"/sample\"), []);\n\n\n  var uid = firebase.auth().currentUser;\n\n  if (!!uid) {\n    if (userId == \"\") {\n      dispatch(login(uid.uid));\n      setCheck(\"check\");\n      console.log(\"check\");\n    }\n\n    console.log(\"DBF 1 userId\");\n    console.log(userId);\n    return useMemo(function () {\n      return firebase.database().ref(\"/users/\" + userId);\n    }, [userId]);\n  } else {\n    // ここが原因。ここでuserId取得後にrefを更新できればいい\n    console.log(\"DBF 2 userId\");\n    console.log(userId);\n    return useMemo(function () {\n      return firebase.database().ref(\"/users/\" + userId);\n    }, [userId]); // return useMemo(() => firebase.database().ref(\"/users/\" + uid.uid), []);\n  }\n}; //   データを取得する\n// hooksを使いたいのでカスタムhooksにしておく\n\n\nvar useFetchData = function useFetchData(ref) {\n  var _useState2 = useState(),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  useEffect(function () {\n    // イベントリスナーを追加するにはonを使う\n    ref.on(\"value\", function (snapshot) {\n      // パスに対する全データを含むsnapshotが渡される\n      // ない場合はnullが返るので存在をチェックしておく\n      if (snapshot === null || snapshot === void 0 ? void 0 : snapshot.val()) {\n        setData(snapshot.val());\n        console.log(\"DBF data\");\n        console.log(data);\n      }\n    });\n    return function () {\n      ref.off();\n    }; // refの変更に応じて再取得する\n    //   指定したパスのデータに対する更新をすべて検知するにはvalueを指定すれば良い。\n  }, [ref]); // データを返却する\n  // console.log(\"data\");\n  // console.log(data);\n\n  return {\n    data: data\n  };\n}; // 実際に呼び出す際はこちらを使う\n\n\nvar useFetchAllData = function useFetchAllData() {\n  // refを取得して\n  var ref = useDatabase(); // ref渡してデータを取得する\n\n  return useFetchData(ref);\n}; // 登録処理\n// この登録はsetに渡した値での登録となる。\n// つまり、既存のデータも含めて渡してあげないと登録済みのデータが消える。\n\n\nvar useSetDocument = function useSetDocument(ref) {\n  var updateDocument = useCallback(function (document) {\n    // refについては前回の記事参照\n    // setに登録したいデータを渡してあげれば登録できる\n    ref.set(document);\n  }, [ref]);\n  return updateDocument;\n};\n\nvar useRegisterData = function useRegisterData() {\n  // 前回作ったuseDatabase()を使いref取得\n  var ref = useDatabase();\n  var setDocument = useSetDocument(ref); // 登録済みのデータを全部取得する\n\n  var _useFetchAllData = useFetchAllData(),\n      registeredData = _useFetchAllData.data;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.tasks;\n  }),\n      userTaskInfo = _useSelector2.userTaskInfo; // データを登録する関数を返却する\n  // 可能であればここの処理はそのままにして、引数でsteteを更新する処理を先に行いたい\n\n\n  var registerData = useCallback(function (registerData) {\n    // () => {\n    console.log(userTaskInfo); // ここでReduxに保管しているstateを更新する？\n    // dispatch(Register({ ...registerData }));\n    // 既存のデータと登録するkey-valueを合わせて登録関数に渡す\n\n    setDocument(_objectSpread(_objectSpread({}, registeredData), registerData)); // setDocument(userTaskInfo);\n  }, [setDocument, registeredData]); // 返した関数を利用することで、登録済みデータ全て+登録したいデータをDBに保管できる\n\n  return registerData;\n}; // 更新処理\n\n\nvar useUpdateDocument = function useUpdateDocument(ref) {\n  // ref.updateがObjectを受け取るので、Objectを引数に取る関数を定義\n  var updateDocument = useCallback(function (document) {\n    return ref.update(document);\n  }, [ref]);\n  return updateDocument;\n};\n\nvar useUpdateData = function useUpdateData() {\n  // setの時と同じくrefを取得して、\n  var ref = useDatabase(); // 関数呼び出して\n\n  var updateDocument = useUpdateDocument(ref); // 更新処理を作成する\n\n  var updateData = useCallback(function (registerData) {\n    updateDocument(registerData);\n  }, [updateDocument]);\n  return updateData;\n}; // 削除処理\n\n\nvar useRemoveDocument = function useRemoveDocument(ref) {\n  // 特に引数が必要ないのでただ呼び出すのみ\n  var deleteDocument = useCallback(function (document) {\n    return ref.child(document).remove();\n  }, [ref]);\n  return deleteDocument;\n}; // set、updateと同じなので割愛\n\n\nvar useDelteData = function useDelteData() {\n  var ref = useDatabase();\n  var removeDocument = useRemoveDocument(ref);\n  var deleteData = useCallback(function (deleteData) {\n    return removeDocument(deleteData);\n  }, [removeDocument]);\n  return deleteData;\n};\n\nexport { useFetchAllData, useRegisterData, useUpdateData, useDelteData };","map":null,"metadata":{},"sourceType":"module"}