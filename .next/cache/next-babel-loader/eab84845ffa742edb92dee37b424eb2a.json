{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport Fade from \"@material-ui/core/Fade\";\nimport InputN from \"./InputNormal\";\nimport AppVar from \"./AppVar\";\nimport PatternSwitchList from \"./PatternSwitch\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { taskRegister } from \"../../modules/tasksModule\";\nimport { useRegisterData, useUpdateData } from \"../test/firebaseTest/DBFetch\";\nconst useStyles = makeStyles(theme => createStyles({\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\" // width: \"80%\",\n    // height: \"80%\",\n\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    width: \"50%\",\n    height: \"80%\",\n    overflowY: \"scroll\",\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3)\n  }\n}));\nconst contentsList = [{\n  label: \"if-thenプランニング\",\n  value: \"\"\n}, {\n  label: \"習慣の積み上げ\",\n  value: \"\"\n}, {\n  label: \"パターン\",\n  value: \"\"\n}, {\n  label: \"気が進まないとき\",\n  value: \"\"\n}, {\n  label: \"長期的に見返りのある習慣の即時的な楽しみ\",\n  value: \"\"\n}, {\n  label: \"目標\",\n  value: \"\"\n}, {\n  label: \"守れなかった時の罰則\",\n  value: \"\"\n}, {\n  label: \"レベル\",\n  value: \"\"\n}, {\n  label: \"避けることで得られるメリット\",\n  value: \"\"\n}, {\n  label: \"見返りのない習慣に対する即時的な痛み\",\n  value: \"\"\n}, {\n  label: \"タスク名\",\n  value: \"\"\n}];\nexport default function TaskModal(props) {\n  const classes = useStyles();\n  const {\n    userTaskInfo\n  } = useSelector(state => state.tasks);\n  const updateData = useUpdateData();\n  const registerData = useRegisterData();\n  const checkNew = userTaskInfo.tasks.length < parseInt(props.index);\n  let stateChecked = [];\n  const renderContentsList = contentsList.filter(content => {\n    return content.label != 'タスク名';\n  });\n  let setContentsList = contentsList;\n\n  if (!checkNew) {\n    stateChecked = props.task.patternInfo.map(content => {\n      return content.patternID;\n    });\n    setContentsList = contentsList.filter(content => {\n      return content.label != 'タスク名';\n    });\n  }\n\n  const [checked, setChecked] = React.useState(stateChecked);\n  const dispatch = useDispatch(); // 配列を作って項目一覧を作るなら、その配列を使って以下の変数の初期設定もやりたいところ\n  // 最終的には項目一覧もReduxで管理したい。それをタスク一覧の右上に表示した設定ボタンから開くモーダルでONOFFを設定することで、タスク詳細画面で使う項目を選べる。新規登録時もONになっている項目が表示される\n  // タスク詳細画面でプラスボタンを押したら項目を増やせる。それも項目一覧に保管される。\n  // const defaultTask: newTasksType = { [\"追加\"]: \"追加\" };\n\n  const [contents, setContents] = React.useState(setContentsList);\n\n  const handleClose = () => {\n    props.setOpen(9999);\n  };\n\n  async function HandleRegister() {\n    let details;\n    contents.map((content, index) => {\n      details = _objectSpread(_objectSpread({}, details), {}, {\n        [content.label]: content.value\n      });\n    });\n    let patternInfo;\n    patternInfo = checked.map(content => {\n      return {\n        patternID: content,\n        order: 1\n      };\n    });\n    let newTasks = {\n      detail: details,\n      patternInfo: patternInfo\n    };\n    await dispatch(taskRegister(newTasks));\n    console.log('==============check register=============='); // console.log(userTaskInfo);\n    // const _sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));\n    // await _sleep(5000);\n    // console.log(userTaskInfo);\n    // console.log(componentWillReceiveProps(nextProps));\n    // registerData(newTasks);\n\n    props.setOpen(9999);\n  }\n\n  ; // ここは配列で管理してmapで表示したいところ\n  // task型の変数を用意して、それに値を格納する\n  // 新規だったら登録、すでにある項目であれば更新する。\n\n  return __jsx(\"div\", null, __jsx(Modal, {\n    \"aria-labelledby\": \"transition-modal-title\",\n    \"aria-describedby\": \"transition-modal-description\",\n    className: classes.modal,\n    open: props.index == props.open,\n    onClose: handleClose,\n    closeAfterTransition: true,\n    BackdropComponent: Backdrop,\n    BackdropProps: {\n      timeout: 500\n    }\n  }, __jsx(Fade, {\n    in: props.index == props.open\n  }, __jsx(\"div\", {\n    className: classes.paper\n  }, __jsx(AppVar, {\n    handleRegister: HandleRegister,\n    checkNew: checkNew,\n    index: props.index,\n    contents: contents,\n    setContents: setContents\n  }), __jsx(\"h2\", {\n    id: \"transition-modal-title\"\n  }, \"\\u30BF\\u30B9\\u30AF\\u8A73\\u7D30\\u753B\\u9762\", props.index + 1), __jsx(\"p\", {\n    id: \"transition-modal-description\"\n  }, \"react-transition-group animates me.\"), __jsx(PatternSwitchList, {\n    checked: checked,\n    setChecked: setChecked,\n    index: props.index,\n    checkNew: checkNew\n  }), renderContentsList.map((content, index) => {\n    return __jsx(\"div\", {\n      key: content.label + \"_\" + index\n    }, __jsx(InputN // label=\"if-thenプランニング\"\n    , {\n      label: content.label,\n      required: false,\n      index: props.index,\n      contentIndex: index,\n      contents: contents,\n      setContents: setContents\n    }), __jsx(\"br\", null));\n  })))));\n}","map":null,"metadata":{},"sourceType":"module"}