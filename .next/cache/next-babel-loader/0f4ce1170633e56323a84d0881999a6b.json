{"ast":null,"code":"// データベースへの接続\n// import firebase from \"firebase/app\";\n// 認証周りやDB周りで必要なためimportしておく\nimport \"firebase/auth\";\nimport \"firebase/database\";\nimport { useMemo, useState, useEffect, useCallback } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { firebase } from \"./firebaseTest\";\n\nconst useReduxFetch = () => {\n  const dispatch = useDispatch();\n  return dispatch;\n}; // カスタムフックにしておく\n\n\nconst useDatabase = () => {\n  const {\n    userId\n  } = useSelector(state => state.user); // 同じパスでは毎回同じ結果が得られるのでmemo化しておく\n  // return useMemo(() => firebase.database().ref(\"/sample\"), []);\n\n  return useMemo(() => firebase.database().ref(\"/users/\" + userId), []);\n}; //   データを取得する\n// hooksを使いたいのでカスタムhooksにしておく\n\n\nconst useFetchData = ref => {\n  const {\n    0: data,\n    1: setData\n  } = useState();\n  useEffect(() => {\n    // イベントリスナーを追加するにはonを使う\n    ref.on(\"value\", snapshot => {\n      // パスに対する全データを含むsnapshotが渡される\n      // ない場合はnullが返るので存在をチェックしておく\n      if (snapshot === null || snapshot === void 0 ? void 0 : snapshot.val()) {\n        setData(snapshot.val());\n      }\n    });\n    return () => {\n      ref.off();\n    }; // refの変更に応じて再取得する\n    //   指定したパスのデータに対する更新をすべて検知するにはvalueを指定すれば良い。\n  }, [\"value\"]); // データを返却する\n\n  console.log(\"data\");\n  console.log(data);\n  return {\n    data\n  };\n}; // 実際に呼び出す際はこちらを使う\n\n\nconst useFetchAllData = () => {\n  // refを取得して\n  const ref = useDatabase(); // ref渡してデータを取得する\n\n  return useFetchData(ref);\n}; // 登録処理\n// この登録はsetに渡した値での登録となる。\n// つまり、既存のデータも含めて渡してあげないと登録済みのデータが消える。\n\n\nconst useSetDocument = ref => {\n  const updateDocument = useCallback(document => {\n    // refについては前回の記事参照\n    // setに登録したいデータを渡してあげれば登録できる\n    ref.set(document);\n  }, [ref]);\n  return updateDocument;\n};\n\nconst useRegisterData = () => {\n  // 前回作ったuseDatabase()を使いref取得\n  const ref = useDatabase();\n  const setDocument = useSetDocument(ref); // 登録済みのデータを全部取得する\n\n  const {\n    data: registeredData\n  } = useFetchAllData();\n  const dispatch = useReduxFetch();\n  const {\n    userTaskInfo\n  } = useSelector(state => state.tasks);\n  console.log(userTaskInfo); // データを登録する関数を返却する\n  // 可能であればここの処理はそのままにして、引数でsteteを更新する処理を先に行いたい\n\n  const registerData = useCallback( // (registerData: userTask) => {\n  () => {\n    // ここでReduxに保管しているstateを更新する？\n    // dispatch(Register({ ...registerData }));\n    // 既存のデータと登録するkey-valueを合わせて登録関数に渡す\n    // setDocument({ ...registeredData, ...registerData });\n    setDocument(userTaskInfo);\n  }, [setDocument, registeredData]); // 返した関数を利用することで、登録済みデータ全て+登録したいデータをDBに保管できる\n\n  return registerData;\n}; // 更新処理\n\n\nconst useUpdateDocument = ref => {\n  // ref.updateがObjectを受け取るので、Objectを引数に取る関数を定義\n  const updateDocument = useCallback(document => ref.update(document), [ref]);\n  return updateDocument;\n};\n\nconst useUpdateData = () => {\n  // setの時と同じくrefを取得して、\n  const ref = useDatabase(); // 関数呼び出して\n\n  const updateDocument = useUpdateDocument(ref); // 更新処理を作成する\n\n  const updateData = useCallback(registerData => {\n    updateDocument(registerData);\n  }, [updateDocument]);\n  return updateData;\n}; // 削除処理\n\n\nconst useRemoveDocument = ref => {\n  // 特に引数が必要ないのでただ呼び出すのみ\n  const deleteDocument = useCallback(document => ref.child(document).remove(), [ref]);\n  return deleteDocument;\n}; // set、updateと同じなので割愛\n\n\nconst useDelteData = () => {\n  const ref = useDatabase();\n  const removeDocument = useRemoveDocument(ref);\n  const deleteData = useCallback(deleteData => removeDocument(deleteData), [removeDocument]);\n  return deleteData;\n};\n\nexport { useFetchAllData, useRegisterData, useUpdateData, useDelteData };","map":{"version":3,"sources":["C:/Users/blelm/Desktop/AppCreate/habitPlan/src/components/test/firebaseTest/DBFetch.tsx"],"names":["useMemo","useState","useEffect","useCallback","useSelector","useDispatch","firebase","useReduxFetch","dispatch","useDatabase","userId","state","user","database","ref","useFetchData","data","setData","on","snapshot","val","off","console","log","useFetchAllData","useSetDocument","updateDocument","document","set","useRegisterData","setDocument","registeredData","userTaskInfo","tasks","registerData","useUpdateDocument","update","useUpdateData","updateData","useRemoveDocument","deleteDocument","child","remove","useDelteData","removeDocument","deleteData"],"mappings":"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","sourcesContent":["// データベースへの接続\r\n\r\n// import firebase from \"firebase/app\";\r\n// 認証周りやDB周りで必要なためimportしておく\r\nimport \"firebase/auth\";\r\nimport \"firebase/database\";\r\nimport { useMemo, useState, useEffect, useCallback } from \"react\";\r\n\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { RootState } from \"../../../modules/rootReducer\";\r\nimport { Register } from \"../../../modules/tasksModule\";\r\n\r\nimport { firebase } from \"./firebaseTest\";\r\n\r\nimport {\r\n    calendar,\r\n    pattern,\r\n    tasks,\r\n    userTask,\r\n} from \"../../../modules/userTasksType\";\r\nimport { useTabContext } from \"@material-ui/lab\";\r\n\r\nconst useReduxFetch = () => {\r\n    const dispatch = useDispatch();\r\n    return dispatch;\r\n};\r\n\r\n// カスタムフックにしておく\r\nconst useDatabase = () => {\r\n    const { userId } = useSelector((state: RootState) => state.user);\r\n    // 同じパスでは毎回同じ結果が得られるのでmemo化しておく\r\n    // return useMemo(() => firebase.database().ref(\"/sample\"), []);\r\n    return useMemo(() => firebase.database().ref(\"/users/\" + userId), []);\r\n};\r\n\r\n//   データを取得する\r\n// hooksを使いたいのでカスタムhooksにしておく\r\nconst useFetchData = (ref: firebase.database.Reference) => {\r\n    const [data, setData] = useState<any>();\r\n    useEffect(() => {\r\n        // イベントリスナーを追加するにはonを使う\r\n        ref.on(\"value\", (snapshot: any) => {\r\n            // パスに対する全データを含むsnapshotが渡される\r\n            // ない場合はnullが返るので存在をチェックしておく\r\n            if (snapshot?.val()) {\r\n                setData(snapshot.val());\r\n            }\r\n        });\r\n        return () => {\r\n            ref.off();\r\n        };\r\n        // refの変更に応じて再取得する\r\n        //   指定したパスのデータに対する更新をすべて検知するにはvalueを指定すれば良い。\r\n    }, [\"value\"]);\r\n    // データを返却する\r\n    console.log(\"data\");\r\n    console.log(data);\r\n    return { data };\r\n};\r\n\r\n// 実際に呼び出す際はこちらを使う\r\nconst useFetchAllData = () => {\r\n    // refを取得して\r\n    const ref = useDatabase();\r\n    // ref渡してデータを取得する\r\n    return useFetchData(ref);\r\n};\r\n\r\n// 登録処理\r\n// この登録はsetに渡した値での登録となる。\r\n// つまり、既存のデータも含めて渡してあげないと登録済みのデータが消える。\r\nconst useSetDocument = (ref: firebase.database.Reference) => {\r\n    const updateDocument = useCallback(\r\n        (document: unknown) => {\r\n            // refについては前回の記事参照\r\n            // setに登録したいデータを渡してあげれば登録できる\r\n            ref.set(document);\r\n        },\r\n        [ref]\r\n    );\r\n    return updateDocument;\r\n};\r\n\r\nconst useRegisterData = () => {\r\n    // 前回作ったuseDatabase()を使いref取得\r\n    const ref = useDatabase();\r\n    const setDocument = useSetDocument(ref);\r\n    // 登録済みのデータを全部取得する\r\n    const { data: registeredData } = useFetchAllData();\r\n    const dispatch = useReduxFetch();\r\n    const { userTaskInfo } = useSelector((state: RootState) => state.tasks);\r\n    console.log(userTaskInfo);\r\n    // データを登録する関数を返却する\r\n\r\n    // 可能であればここの処理はそのままにして、引数でsteteを更新する処理を先に行いたい\r\n    const registerData = useCallback(\r\n        // (registerData: userTask) => {\r\n        () => {\r\n            // ここでReduxに保管しているstateを更新する？\r\n            // dispatch(Register({ ...registerData }));\r\n            // 既存のデータと登録するkey-valueを合わせて登録関数に渡す\r\n            // setDocument({ ...registeredData, ...registerData });\r\n            setDocument(userTaskInfo);\r\n        },\r\n        [setDocument, registeredData]\r\n    );\r\n\r\n    // 返した関数を利用することで、登録済みデータ全て+登録したいデータをDBに保管できる\r\n    return registerData;\r\n};\r\n\r\n// 更新処理\r\nconst useUpdateDocument = (ref: firebase.database.Reference) => {\r\n    // ref.updateがObjectを受け取るので、Objectを引数に取る関数を定義\r\n    const updateDocument = useCallback(\r\n        (document: Object) => ref.update(document),\r\n        [ref]\r\n    );\r\n    return updateDocument;\r\n};\r\n\r\nconst useUpdateData = () => {\r\n    // setの時と同じくrefを取得して、\r\n    const ref = useDatabase();\r\n    // 関数呼び出して\r\n    const updateDocument = useUpdateDocument(ref);\r\n    // 更新処理を作成する\r\n    const updateData = useCallback(\r\n        (registerData: { [key: string]: string }) => {\r\n            updateDocument(registerData);\r\n        },\r\n        [updateDocument]\r\n    );\r\n    return updateData;\r\n};\r\n\r\n// 削除処理\r\nconst useRemoveDocument = (ref: firebase.database.Reference) => {\r\n    // 特に引数が必要ないのでただ呼び出すのみ\r\n    const deleteDocument = useCallback(\r\n        (document: string) => ref.child(document).remove(),\r\n        [ref]\r\n    );\r\n    return deleteDocument;\r\n};\r\n// set、updateと同じなので割愛\r\nconst useDelteData = () => {\r\n    const ref = useDatabase();\r\n    const removeDocument = useRemoveDocument(ref);\r\n    const deleteData = useCallback(\r\n        (deleteData: string) => removeDocument(deleteData),\r\n        [removeDocument]\r\n    );\r\n    return deleteData;\r\n};\r\n\r\nexport { useFetchAllData, useRegisterData, useUpdateData, useDelteData };\r\n"]},"metadata":{},"sourceType":"module"}