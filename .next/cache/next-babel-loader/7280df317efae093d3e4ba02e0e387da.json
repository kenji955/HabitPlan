{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\blelm\\\\Desktop\\\\AppCreate\\\\habitPlan\\\\src\\\\components\\\\test\\\\Calendar3.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport format from 'date-fns/format';\nimport getDate from 'date-fns/getDate';\nimport getDay from 'date-fns/getDay';\nimport isSameDay from 'date-fns/isSameDay';\nimport eachDayOfInterval from 'date-fns/eachDayOfInterval';\nimport endOfWeek from 'date-fns/endOfWeek';\nimport eachWeekOfInterval from 'date-fns/eachWeekOfInterval';\nimport addMonths from 'date-fns/addMonths';\nimport subMonths from 'date-fns/subMonths';\nimport startOfMonth from 'date-fns/startOfMonth';\nimport endOfMonth from 'date-fns/endOfMonth';\nimport isSameMonth from 'date-fns/isSameMonth';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\nimport blue from '@material-ui/core/colors/blue';\nimport pink from '@material-ui/core/colors/pink';\nimport red from '@material-ui/core/colors/red';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    paper: {\n      margin: theme.spacing(5, 10),\n      padding: theme.spacing(5, 5)\n    },\n    yearmonth: {\n      margin: theme.spacing(2, 0, 1, 0)\n    },\n    tableHead: {\n      color: theme.palette.secondary.contrastText,\n      backgroundColor: theme.palette.secondary.light\n    }\n  };\n});\nvar useCalendarCellStyles = makeStyles(function (theme) {\n  return {\n    calendarCell: {\n      color: function color(_ref) {\n        var wday = _ref.wday,\n            isTargetMonth = _ref.isTargetMonth;\n\n        if (isTargetMonth) {\n          switch (wday) {\n            case 0:\n              // Sunday\n              return red[500];\n\n            case 6:\n              // Saturday\n              return blue[500];\n\n            default:\n              return theme.palette.text.primary;\n          }\n        } else {\n          // previous or next month\n          switch (wday) {\n            case 0:\n              // Sunday\n              return red[200];\n\n            case 6:\n              // Saturday\n              return blue[200];\n\n            default:\n              return theme.palette.text.secondary;\n          }\n        }\n      },\n      backgroundColor: function backgroundColor(_ref2) {\n        var isToday = _ref2.isToday;\n        return isToday ? pink[50] : \"transparent\";\n      }\n    }\n  };\n});\n\nvar getCalendarArray = function getCalendarArray(date) {\n  var sundays = eachWeekOfInterval({\n    start: startOfMonth(date),\n    end: endOfMonth(date)\n  });\n  return sundays.map(function (sunday) {\n    return eachDayOfInterval({\n      start: sunday,\n      end: endOfWeek(sunday)\n    });\n  });\n};\n\nfunction CalendarTableCell(props) {\n  _s();\n\n  var wday = props.wday,\n      isTargetMonth = props.isTargetMonth,\n      isToday = props.isToday,\n      children = props.children,\n      other = _objectWithoutProperties(props, [\"wday\", \"isTargetMonth\", \"isToday\", \"children\"]);\n\n  var classes = useCalendarCellStyles(props);\n  return __jsx(TableCell, _extends({\n    className: classes.calendarCell\n  }, other, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }), children);\n}\n\n_s(CalendarTableCell, \"ukLd6tf9xGCRm8TMTZd5+yrbOjY=\", false, function () {\n  return [useCalendarCellStyles];\n});\n\n_c = CalendarTableCell;\n\nfunction App() {\n  _s2();\n\n  var _this = this;\n\n  var _useState = useState(new Date()),\n      targetDate = _useState[0],\n      setTargetDate = _useState[1];\n\n  var classes = useStyles();\n  var calendar = getCalendarArray(targetDate);\n  var today = new Date();\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }\n  }, __jsx(CssBaseline, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }), __jsx(Paper, {\n    className: classes.paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }, __jsx(Grid, {\n    container: true,\n    justify: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, __jsx(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  }, __jsx(Button, {\n    variant: \"outlined\",\n    onClick: function onClick() {\n      return setTargetDate(subMonths(targetDate, 1));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, \"\\u524D\\u306E\\u6708\")), __jsx(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  }, __jsx(Button, {\n    variant: \"outlined\",\n    onClick: function onClick() {\n      return setTargetDate(new Date());\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }, \"\\u4ECA\\u6708\")), __jsx(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  }, __jsx(Button, {\n    variant: \"outlined\",\n    onClick: function onClick() {\n      return setTargetDate(addMonths(targetDate, 1));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }, \"\\u6B21\\u306E\\u6708\"))), __jsx(Typography, {\n    variant: \"h4\",\n    align: \"center\",\n    className: classes.yearmonth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }, format(targetDate, 'y年M月')), __jsx(Table, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }, __jsx(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }, __jsx(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }, __jsx(TableCell, {\n    align: \"center\",\n    classes: {\n      head: classes.tableHead\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 15\n    }\n  }, \"\\u65E5\"), __jsx(TableCell, {\n    align: \"center\",\n    classes: {\n      head: classes.tableHead\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 15\n    }\n  }, \"\\u6708\"), __jsx(TableCell, {\n    align: \"center\",\n    classes: {\n      head: classes.tableHead\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 15\n    }\n  }, \"\\u706B\"), __jsx(TableCell, {\n    align: \"center\",\n    classes: {\n      head: classes.tableHead\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 15\n    }\n  }, \"\\u6C34\"), __jsx(TableCell, {\n    align: \"center\",\n    classes: {\n      head: classes.tableHead\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 15\n    }\n  }, \"\\u6728\"), __jsx(TableCell, {\n    align: \"center\",\n    classes: {\n      head: classes.tableHead\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 15\n    }\n  }, \"\\u91D1\"), __jsx(TableCell, {\n    align: \"center\",\n    classes: {\n      head: classes.tableHead\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 15\n    }\n  }, \"\\u571F\"))), __jsx(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 11\n    }\n  }, calendar.map(function (weekRow, rowNum) {\n    return __jsx(TableRow, {\n      key: rowNum,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 15\n      }\n    }, weekRow.map(function (date) {\n      return __jsx(CalendarTableCell, {\n        key: getDay(date),\n        wday: getDay(date),\n        isTargetMonth: isSameMonth(date, targetDate),\n        isToday: isSameDay(date, today),\n        align: \"center\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 19\n        }\n      }, getDate(date));\n    }));\n  })))));\n}\n\n_s2(App, \"Cn9UaDz2wuJYUbBeLSWyQehOUKg=\", false, function () {\n  return [useStyles];\n});\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CalendarTableCell\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["C:/Users/blelm/Desktop/AppCreate/habitPlan/src/components/test/Calendar3.jsx"],"names":["React","useState","format","getDate","getDay","isSameDay","eachDayOfInterval","endOfWeek","eachWeekOfInterval","addMonths","subMonths","startOfMonth","endOfMonth","isSameMonth","makeStyles","CssBaseline","Button","Grid","Paper","Table","TableBody","TableCell","TableHead","TableRow","Typography","blue","pink","red","useStyles","theme","paper","margin","spacing","padding","yearmonth","tableHead","color","palette","secondary","contrastText","backgroundColor","light","useCalendarCellStyles","calendarCell","wday","isTargetMonth","text","primary","isToday","getCalendarArray","date","sundays","start","end","map","sunday","CalendarTableCell","props","children","other","classes","App","Date","targetDate","setTargetDate","calendar","today","head","weekRow","rowNum"],"mappings":"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","sourcesContent":["import React, { useState }  from 'react'\r\nimport format from 'date-fns/format'\r\nimport getDate from 'date-fns/getDate'\r\nimport getDay from 'date-fns/getDay'\r\nimport isSameDay from 'date-fns/isSameDay'\r\nimport eachDayOfInterval from 'date-fns/eachDayOfInterval'\r\nimport endOfWeek from 'date-fns/endOfWeek'\r\nimport eachWeekOfInterval from 'date-fns/eachWeekOfInterval'\r\nimport addMonths from 'date-fns/addMonths'\r\nimport subMonths from 'date-fns/subMonths'\r\nimport startOfMonth from 'date-fns/startOfMonth'\r\nimport endOfMonth from 'date-fns/endOfMonth'\r\nimport isSameMonth from 'date-fns/isSameMonth'\r\n\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport CssBaseline from '@material-ui/core/CssBaseline'\r\nimport Button from '@material-ui/core/Button'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport blue from '@material-ui/core/colors/blue'\r\nimport pink from '@material-ui/core/colors/pink'\r\nimport red from '@material-ui/core/colors/red'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  paper: {\r\n    margin: theme.spacing(5, 10),\r\n    padding: theme.spacing(5, 5),\r\n  },\r\n  yearmonth: {\r\n    margin: theme.spacing(2, 0, 1, 0),\r\n  },\r\n  tableHead: {\r\n    color: theme.palette.secondary.contrastText,\r\n    backgroundColor: theme.palette.secondary.light,\r\n  },\r\n}))\r\n\r\nconst useCalendarCellStyles = makeStyles(theme => ({\r\n  calendarCell: {\r\n    color: ({wday, isTargetMonth}) => {\r\n      if(isTargetMonth) {\r\n        switch(wday) {\r\n          case 0: // Sunday\r\n            return red[500]\r\n          case 6: // Saturday\r\n            return blue[500]\r\n          default:\r\n            return theme.palette.text.primary\r\n        }\r\n      } else {\r\n        // previous or next month\r\n        switch(wday) {\r\n            case 0: // Sunday\r\n            return red[200]\r\n          case 6: // Saturday\r\n            return blue[200]\r\n          default:\r\n            return theme.palette.text.secondary\r\n        }\r\n      }\r\n    },\r\n    backgroundColor: ({isToday}) =>\r\n      isToday ? pink[50] : \"transparent\"\r\n  },\r\n}))\r\n\r\nconst getCalendarArray = date => {\r\n  const sundays = eachWeekOfInterval({\r\n    start: startOfMonth(date),\r\n    end: endOfMonth(date)\r\n  })\r\n  return sundays.map(sunday =>\r\n    eachDayOfInterval({start: sunday, end: endOfWeek(sunday)})\r\n  )\r\n}\r\n\r\nfunction CalendarTableCell(props) {\r\n  const {wday, isTargetMonth, isToday, children, ...other} = props\r\n  const classes = useCalendarCellStyles(props)\r\n  return (<TableCell className={classes.calendarCell} {...other}>{children}</TableCell>)\r\n}\r\n\r\nfunction App() {\r\n  const [targetDate, setTargetDate] = useState(new Date())\r\n  const classes = useStyles()\r\n  const calendar = getCalendarArray(targetDate)\r\n  const today = new Date()\r\n\r\n  return (\r\n    <div>\r\n      <CssBaseline />\r\n      <Paper className={classes.paper}>\r\n        <Grid container justify=\"space-between\">\r\n          <Grid item>\r\n            <Button variant=\"outlined\" onClick={() => setTargetDate(subMonths(targetDate, 1))}>前の月</Button>\r\n          </Grid>\r\n          <Grid item>\r\n            <Button variant=\"outlined\" onClick={() => setTargetDate(new Date())}>今月</Button>\r\n          </Grid>\r\n          <Grid item>\r\n            <Button variant=\"outlined\" onClick={() => setTargetDate(addMonths(targetDate, 1))}>次の月</Button>\r\n          </Grid>\r\n        </Grid>\r\n        <Typography variant=\"h4\" align=\"center\" className={classes.yearmonth}>{format(targetDate, 'y年M月')}</Typography>\r\n        <Table>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell align=\"center\" classes={{head: classes.tableHead, }}>日</TableCell>\r\n              <TableCell align=\"center\" classes={{head: classes.tableHead, }}>月</TableCell>\r\n              <TableCell align=\"center\" classes={{head: classes.tableHead, }}>火</TableCell>\r\n              <TableCell align=\"center\" classes={{head: classes.tableHead, }}>水</TableCell>\r\n              <TableCell align=\"center\" classes={{head: classes.tableHead, }}>木</TableCell>\r\n              <TableCell align=\"center\" classes={{head: classes.tableHead, }}>金</TableCell>\r\n              <TableCell align=\"center\" classes={{head: classes.tableHead, }}>土</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {calendar.map((weekRow, rowNum) => (\r\n              <TableRow key={rowNum}>\r\n                {weekRow.map(date => (\r\n                  <CalendarTableCell key={getDay(date)} wday={getDay(date)} isTargetMonth={isSameMonth(date, targetDate)} isToday={isSameDay(date, today)} align=\"center\">\r\n                    {getDate(date)}\r\n                  </CalendarTableCell>\r\n                ))}\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </Paper>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App"]},"metadata":{},"sourceType":"module"}