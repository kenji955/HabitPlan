{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\blelm\\\\Desktop\\\\AppCreate\\\\habitPlan\\\\src\\\\components\\\\view\\\\CheckBoxList.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport CommentIcon from '@material-ui/icons/Comment';\nimport { useSelector } from 'react-redux';\nvar useStyles = makeStyles(function (theme) {\n  return createStyles({\n    roots: {\n      width: '100%',\n      maxWidth: 720,\n      margin: 'auto',\n      backgroundColor: theme.palette.background.paper\n    }\n  });\n});\nexport default function CheckboxList() {\n  _s();\n\n  var _this = this;\n\n  var classes = useStyles();\n\n  var _useState = useState([0]),\n      checked = _useState[0],\n      setChecked = _useState[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.tasks;\n  }),\n      userTaskInfo = _useSelector.userTaskInfo;\n\n  var handleToggle = function handleToggle(value) {\n    return function () {\n      var currentIndex = checked.indexOf(value);\n\n      var newChecked = _toConsumableArray(checked);\n\n      if (currentIndex === -1) {\n        newChecked.push(value);\n      } else {\n        newChecked.splice(currentIndex, 1);\n      }\n\n      setChecked(newChecked);\n    };\n  }; // ここで作成する機能はたくさんある。\n  // 日付とパターンIDを読み取ること\n  // いや、ここじゃないか？ここではカレンダーに格納されたタスクを読み取るだけで良いのでは？\n  // カレンダー画面でパターンを登録し、その時にタスクリストからパターンIDが合致するものだけ抽出して、該当する日付のカレンダー配列に格納する\n  // 一度シンプルに、カレンダー配列に格納されているタスクを読み取る機能を実装しよう\n\n\n  var year = new Date(\"Thu, 22 May 2020 02:00:00\").getFullYear();\n  var month = new Date(\"Thu, 22 May 2020 02:00:00\").getMonth() + 1;\n  var date = new Date(\"Thu, 22 May 2020 02:00:00\").getDate();\n  var test = userTaskInfo.calendar.filter(function (value) {\n    return value.year == year && value.month == month && value.date == date;\n  });\n  console.log(test[0].tasks);\n  return __jsx(List, {\n    className: classes.roots,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, test[0].tasks.map(function (value, index) {\n    var labelId = \"checkbox-list-label-\".concat(value);\n    return __jsx(ListItem, {\n      key: test[0].year & test[0].month & test[0].date & index,\n      role: undefined,\n      dense: true,\n      button: true,\n      onClick: handleToggle(index),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }\n    }, __jsx(ListItemIcon, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }\n    }, __jsx(Checkbox, {\n      edge: \"start\",\n      checked: checked.indexOf(index) !== -1,\n      tabIndex: -1,\n      disableRipple: true,\n      inputProps: {\n        'aria-labelledby': labelId\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 15\n      }\n    })), __jsx(ListItemText, {\n      id: labelId,\n      primary: \"Line item \".concat(index + 1, \" \").concat(value.detail1, \" & \").concat(value.detail2, \" & \").concat(value.flug),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }\n    }), __jsx(ListItemSecondaryAction, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }\n    }, __jsx(IconButton, {\n      edge: \"end\",\n      \"aria-label\": \"comments\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 15\n      }\n    }, __jsx(CommentIcon, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }\n    }))));\n  })) // <List className={classes.roots}>\n  //   {[0, 1, 2, 3].map((value) => {\n  //     const labelId = `checkbox-list-label-${value}`;\n  //     return (\n  //       <ListItem key={value} role={undefined} dense button onClick={handleToggle(value)}>\n  //         <ListItemIcon>\n  //           <Checkbox\n  //             edge=\"start\"\n  //             checked={checked.indexOf(value) !== -1}\n  //             tabIndex={-1}\n  //             disableRipple\n  //             inputProps={{ 'aria-labelledby': labelId }}\n  //           />\n  //         </ListItemIcon>\n  //         <ListItemText id={labelId} primary={`Line item ${value + 1}`} />\n  //         <ListItemSecondaryAction>\n  //           <IconButton edge=\"end\" aria-label=\"comments\">\n  //           {/* <IconButton aria-label=\"comments\"> */}\n  //             <CommentIcon />\n  //           </IconButton>\n  //         </ListItemSecondaryAction>\n  //       </ListItem>\n  //     );\n  //   })}\n  // </List>\n  ;\n}\n\n_s(CheckboxList, \"CfT5JeeJGcf5wuJxtigG2JcDEIY=\", false, function () {\n  return [useStyles, useSelector];\n});\n\n_c = CheckboxList;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckboxList\");","map":{"version":3,"sources":["C:/Users/blelm/Desktop/AppCreate/habitPlan/src/components/view/CheckBoxList.tsx"],"names":["React","useState","createStyles","makeStyles","List","ListItem","ListItemIcon","ListItemSecondaryAction","ListItemText","Checkbox","IconButton","CommentIcon","useSelector","useStyles","theme","roots","width","maxWidth","margin","backgroundColor","palette","background","paper","CheckboxList","classes","checked","setChecked","state","tasks","userTaskInfo","handleToggle","value","currentIndex","indexOf","newChecked","push","splice","year","Date","getFullYear","month","getMonth","date","getDate","test","calendar","filter","console","log","map","index","labelId","undefined","detail1","detail2","flug"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CommentIcon from '@material-ui/icons/Comment';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from \"../../modules/rootReducer\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    roots: {\r\n      width: '100%',\r\n      maxWidth: 720,\r\n      margin:'auto',\r\n      backgroundColor: theme.palette.background.paper,\r\n    },\r\n  }),\r\n);\r\n\r\nexport default function CheckboxList() {\r\n  const classes = useStyles();\r\n  const [checked, setChecked] = useState([0]);\r\n  const { userTaskInfo } = useSelector((state: RootState) => state.tasks);\r\n\r\n  const handleToggle = (value: number) => () => {\r\n    const currentIndex = checked.indexOf(value);\r\n    const newChecked = [...checked];\r\n\r\n    if (currentIndex === -1) {\r\n      newChecked.push(value);\r\n    } else {\r\n      newChecked.splice(currentIndex, 1);\r\n    }\r\n\r\n    setChecked(newChecked);\r\n  };\r\n\r\n  // ここで作成する機能はたくさんある。\r\n  // 日付とパターンIDを読み取ること\r\n  // いや、ここじゃないか？ここではカレンダーに格納されたタスクを読み取るだけで良いのでは？\r\n  // カレンダー画面でパターンを登録し、その時にタスクリストからパターンIDが合致するものだけ抽出して、該当する日付のカレンダー配列に格納する\r\n  // 一度シンプルに、カレンダー配列に格納されているタスクを読み取る機能を実装しよう\r\n  \r\n  const year= new Date(\"Thu, 22 May 2020 02:00:00\").getFullYear();\r\n  const month= new Date(\"Thu, 22 May 2020 02:00:00\").getMonth() + 1;\r\n  const date= new Date(\"Thu, 22 May 2020 02:00:00\").getDate();\r\n\r\n  const test = userTaskInfo.calendar.filter(function(value){\r\n    return value.year == year && value.month == month && value.date == date\r\n  });\r\n\r\n  console.log(test[0].tasks);\r\n\r\n  return (\r\n    <List className={classes.roots}>\r\n      {test[0].tasks.map((value,index) => {\r\n        const labelId = `checkbox-list-label-${value}`;\r\n\r\n        return (\r\n          <ListItem key={test[0].year&test[0].month&test[0].date&index} role={undefined} dense button onClick={handleToggle(index)}>\r\n            <ListItemIcon>\r\n              <Checkbox\r\n                edge=\"start\"\r\n                checked={checked.indexOf(index) !== -1}\r\n                tabIndex={-1}\r\n                disableRipple\r\n                inputProps={{ 'aria-labelledby': labelId }}\r\n              />\r\n            </ListItemIcon>\r\n            <ListItemText id={labelId} primary={`Line item ${index + 1} ${value.detail1} & ${value.detail2} & ${value.flug}`} />\r\n            <ListItemSecondaryAction>\r\n              <IconButton edge=\"end\" aria-label=\"comments\">\r\n              {/* <IconButton aria-label=\"comments\"> */}\r\n                <CommentIcon />\r\n              </IconButton>\r\n            </ListItemSecondaryAction>\r\n          </ListItem>\r\n        );\r\n      })}\r\n    </List>\r\n    // <List className={classes.roots}>\r\n    //   {[0, 1, 2, 3].map((value) => {\r\n    //     const labelId = `checkbox-list-label-${value}`;\r\n\r\n    //     return (\r\n    //       <ListItem key={value} role={undefined} dense button onClick={handleToggle(value)}>\r\n    //         <ListItemIcon>\r\n    //           <Checkbox\r\n    //             edge=\"start\"\r\n    //             checked={checked.indexOf(value) !== -1}\r\n    //             tabIndex={-1}\r\n    //             disableRipple\r\n    //             inputProps={{ 'aria-labelledby': labelId }}\r\n    //           />\r\n    //         </ListItemIcon>\r\n    //         <ListItemText id={labelId} primary={`Line item ${value + 1}`} />\r\n    //         <ListItemSecondaryAction>\r\n    //           <IconButton edge=\"end\" aria-label=\"comments\">\r\n    //           {/* <IconButton aria-label=\"comments\"> */}\r\n    //             <CommentIcon />\r\n    //           </IconButton>\r\n    //         </ListItemSecondaryAction>\r\n    //       </ListItem>\r\n    //     );\r\n    //   })}\r\n    // </List>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}