{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\n// データベースへの接続\nimport firebase from \"firebase\";\nimport { useMemo, useState, useEffect } from \"react\"; // カスタムフックにしておく\n\nvar useDatabase = function useDatabase() {\n  _s();\n\n  // 同じパスでは毎回同じ結果が得られるのでmemo化しておく\n  return useMemo(function () {\n    return firebase.database().ref(\"/sample\");\n  }, []);\n}; //   データを取得する\n// hooksを使いたいのでカスタムhooksにしておく\n\n\n_s(useDatabase, \"nwk+m61qLgjDVUp4IGV/072DDN4=\");\n\nvar useFetchData = function useFetchData(ref) {\n  _s2();\n\n  var _useState = useState(),\n      data = _useState[0],\n      setData = _useState[1];\n\n  useEffect(function () {\n    // イベントリスナーを追加するにはonを使う\n    ref.on(\"value\", function (snapshot) {\n      // パスに対する全データを含むsnapshotが渡される\n      // ない場合はnullが変えるので存在をチェックしておく\n      if (snapshot === null || snapshot === void 0 ? void 0 : snapshot.val()) {\n        setData(snapshot.val());\n      }\n    });\n    return function () {\n      ref.off();\n    }; // refの変更に応じて再取得する\n    //   指定したパスのデータに対する更新をすべて検知するにはvalueを指定すれば良い。\n  }, [ref]); // データを返却する\n\n  return {\n    data: data\n  };\n}; // 実際に呼び出す際はこちらを使う\n\n\n_s2(useFetchData, \"WZ2PO9A64oHRexE1CE+yX3ebuoA=\");\n\nexport var useFetchAllData = function useFetchAllData() {\n  _s3();\n\n  // refを取得して\n  var ref = useDatabase(); // ref渡してデータを取得する\n\n  return useFetchData(ref);\n};\n\n_s3(useFetchAllData, \"MTgaLcAFZwYAI7SeegXrbygttSE=\", false, function () {\n  return [useDatabase, useFetchData];\n});","map":{"version":3,"sources":["C:/Users/blelm/Desktop/AppCreate/habitPlan/src/components/test/firebaseTest/DBFetch.tsx"],"names":["firebase","useMemo","useState","useEffect","useDatabase","database","ref","useFetchData","data","setData","on","snapshot","val","off","useFetchAllData"],"mappings":";;;;AAAA;AAEA,OAAOA,QAAP,MAAqB,UAArB;AACA,SAASC,OAAT,EAAkBC,QAAlB,EAA4BC,SAA5B,QAA6C,OAA7C,C,CAEA;;AACA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AAAA;;AACtB;AACA,SAAOH,OAAO,CAAC;AAAA,WAAMD,QAAQ,CAACK,QAAT,GAAoBC,GAApB,CAAwB,SAAxB,CAAN;AAAA,GAAD,EAA2C,EAA3C,CAAd;AACH,CAHD,C,CAKA;AACA;;;GANMF,W;;AAON,IAAMG,YAAY,GAAG,SAAfA,YAAe,CAACD,GAAD,EAAsC;AAAA;;AAAA,kBAC/BJ,QAAQ,EADuB;AAAA,MAChDM,IADgD;AAAA,MAC1CC,OAD0C;;AAEvDN,EAAAA,SAAS,CAAC,YAAM;AACZ;AACAG,IAAAA,GAAG,CAACI,EAAJ,CAAO,OAAP,EAAgB,UAACC,QAAD,EAAc;AAC1B;AACA;AACA,UAAIA,QAAJ,aAAIA,QAAJ,uBAAIA,QAAQ,CAAEC,GAAV,EAAJ,EAAqB;AACjBH,QAAAA,OAAO,CAACE,QAAQ,CAACC,GAAT,EAAD,CAAP;AACH;AACJ,KAND;AAOA,WAAO,YAAM;AACTN,MAAAA,GAAG,CAACO,GAAJ;AACH,KAFD,CATY,CAYZ;AACA;AACH,GAdQ,EAcN,CAACP,GAAD,CAdM,CAAT,CAFuD,CAiBvD;;AACA,SAAO;AAAEE,IAAAA,IAAI,EAAJA;AAAF,GAAP;AACH,CAnBD,C,CAqBA;;;IArBMD,Y;;AAsBN,OAAO,IAAMO,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAAA;;AACjC;AACA,MAAMR,GAAG,GAAGF,WAAW,EAAvB,CAFiC,CAGjC;;AACA,SAAOG,YAAY,CAACD,GAAD,CAAnB;AACH,CALM;;IAAMQ,e;UAEGV,W,EAELG,Y","sourcesContent":["// データベースへの接続\r\n\r\nimport firebase from \"firebase\";\r\nimport { useMemo, useState, useEffect } from \"react\";\r\n\r\n// カスタムフックにしておく\r\nconst useDatabase = () => {\r\n    // 同じパスでは毎回同じ結果が得られるのでmemo化しておく\r\n    return useMemo(() => firebase.database().ref(\"/sample\"), []);\r\n};\r\n\r\n//   データを取得する\r\n// hooksを使いたいのでカスタムhooksにしておく\r\nconst useFetchData = (ref: firebase.database.Reference) => {\r\n    const [data, setData] = useState<{ [key: string]: string }>();\r\n    useEffect(() => {\r\n        // イベントリスナーを追加するにはonを使う\r\n        ref.on(\"value\", (snapshot) => {\r\n            // パスに対する全データを含むsnapshotが渡される\r\n            // ない場合はnullが変えるので存在をチェックしておく\r\n            if (snapshot?.val()) {\r\n                setData(snapshot.val());\r\n            }\r\n        });\r\n        return () => {\r\n            ref.off();\r\n        };\r\n        // refの変更に応じて再取得する\r\n        //   指定したパスのデータに対する更新をすべて検知するにはvalueを指定すれば良い。\r\n    }, [ref]);\r\n    // データを返却する\r\n    return { data };\r\n};\r\n\r\n// 実際に呼び出す際はこちらを使う\r\nexport const useFetchAllData = () => {\r\n    // refを取得して\r\n    const ref = useDatabase();\r\n    // ref渡してデータを取得する\r\n    return useFetchData(ref);\r\n};"]},"metadata":{},"sourceType":"module"}