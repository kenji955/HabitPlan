{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { firebase } from \"./firebaseTest\"; // ログイン、ログアウトボタン実装\n\nexport default function FirebaseAuthComponent() {\n  var loggedin = useFirebaseLogin();\n\n  if (!loggedin) {\n    // ログインしていなければログインボタンを表示\n    return __jsx(\"button\", {\n      onClick: function onClick() {\n        return signInWithPopup();\n      }\n    }, \"\\u30ED\\u30B0\\u30A4\\u30F3\");\n  } // ログインしているならログアウトボタンを表示\n\n\n  return __jsx(\"button\", {\n    onClick: function onClick() {\n      return signOut();\n    }\n  }, \"\\u30ED\\u30B0\\u30A2\\u30A6\\u30C8\");\n} // ログイン処理\n\nvar signInWithPopup = function signInWithPopup() {\n  // Googleプロバイダオブジェクトのインスタンスを作成\n  var googleAuthProvider = new firebase.auth.GoogleAuthProvider(); // 別タブでログイン画面に飛ばしたいため、signInWithPopupを使う\n  // リダイレクトでログイン画面に飛ばしたい場合はsignInWithRedirectを使う\n\n  return firebase.auth().signInWithPopup(googleAuthProvider);\n}; // ログアウト処理\n\n\nvar signOut = function signOut() {\n  // signOutを呼び出すだけでOK\n  return firebase.auth().signOut();\n}; // ログインしているかチェックするカスタムフックを作る\n\n\nvar useFirebaseLogin = function useFirebaseLogin() {\n  // stateでログイン状態を保持\n  var _useState = useState(false),\n      loggedin = _useState[0],\n      setLoggedin = _useState[1];\n\n  useEffect(function () {\n    // 現在ログインしているユーザを取得\n    firebase.auth().onAuthStateChanged(function (user) {\n      // ユーザ情報が取れればログイン状態\n      setLoggedin(!!user);\n    });\n  }, []); // ログイン情報を返却\n\n  return loggedin;\n};","map":null,"metadata":{},"sourceType":"module"}