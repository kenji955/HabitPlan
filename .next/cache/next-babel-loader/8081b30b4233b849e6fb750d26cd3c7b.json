{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  userTaskInfo: {\n    calendar: {\n      [new Date(\"Thu, 22 May 2020 02:00:00\").getFullYear()]: {\n        [new Date(\"Thu, 22 May 2020 02:00:00\").getMonth() + 1]: {\n          [new Date(\"Thu, 22 May 2020 02:00:00\").getDate()]: {\n            PatternId: 1,\n            tasks: [{\n              order: 1,\n              detail: {\n                [\"testDetail1\"]: \"testDetail1 22 1\",\n                [\"testDetail2\"]: \"testDetail1 22 1\"\n              },\n              flug: false\n            }, {\n              order: 2,\n              detail: {\n                [\"testDetail1\"]: \"testDetail1 22 2\",\n                [\"testDetail2\"]: \"testDetail1 22 2\"\n              },\n              flug: false\n            }]\n          },\n          [new Date(\"Thu, 23 May 2020 02:00:00\").getDate()]: {\n            PatternId: 1,\n            tasks: [{\n              order: 1,\n              detail: {\n                [\"testDetail1\"]: \"testDetail1 23 1\",\n                [\"testDetail2\"]: \"testDetail1 23 1\"\n              },\n              flug: false\n            }, {\n              order: 2,\n              detail: {\n                [\"testDetail1\"]: \"testDetail1 23 2\",\n                [\"testDetail2\"]: \"testDetail1 23 2\"\n              },\n              flug: false\n            }]\n          }\n        }\n      }\n    },\n    //             [date: number]: {\n    //                 PatternId: number;\n    //                 tasks: {\n    //                     detail1: string;\n    //                     detail2: string;\n    //                     flug: boolean;\n    //                 }[];\n    //             }[];\n    //         }[];\n    //     }[];\n    // ]\n    // year: new Date(\"Thu, 22 May 2020 02:00:00\").getFullYear(),[{\n    //     month: new Date(\"Thu, 22 May 2020 02:00:00\").getMonth() + 1,[{\n    //         date: new Date(\"Thu, 22 May 2020 02:00:00\").getDate(),[{\n    //             PatternId: 1,\n    //             tasks: [\n    //                 {\n    //                     detail1: \"testDetail1 22 1\",\n    //                     detail2: \"testDetail2 22 1\",\n    //                     flug: false,\n    //                 },\n    //                 {\n    //                     detail1: \"testDetail1 22 2\",\n    //                     detail2: \"testDetail2 22 2\",\n    //                     flug: false,\n    //                 },\n    //             ],\n    //         }]\n    //     }]\n    // }]\n    // {\n    //     year: new Date(\"Thu, 23 May 2020 02:00:00\").getFullYear(),\n    //     month: new Date(\"Thu, 23 May 2020 02:00:00\").getMonth() + 1,\n    //     date: new Date(\"Thu, 23 May 2020 02:00:00\").getDate(),\n    //     PatternId: 2,\n    //     tasks: [\n    //         {\n    //             detail1: \"testDetail1 23 1\",\n    //             detail2: \"testDetail2 23 1\",\n    //             flug: false,\n    //         },\n    //         {\n    //             detail1: \"testDetail1 23 2\",\n    //             detail2: \"testDetail2 23 2\",\n    //             flug: false,\n    //         },\n    //     ],\n    // },\n    pattern: [{\n      patternId: 1,\n      patternName: \"testPattern1\"\n    }, {\n      patternId: 2,\n      patternName: \"testPattern2\"\n    }],\n    tasks: [{\n      detail: {\n        [\"defalut\"]: \"defalut\",\n        [\"testDetail1\"]: \"testDetail1 22 1\",\n        [\"testDetail2\"]: \"testDetail1 22 1\"\n      },\n      // detail1: \"testDetail1A\",\n      // detail2: \"testDetail2A\",\n      patternInfo: [{\n        patternID: 1,\n        order: 1\n      }]\n    }, {\n      detail: {\n        [\"defalut\"]: \"defalut\",\n        [\"testDetail1\"]: \"testDetail1 22 2\",\n        [\"testDetail2\"]: \"testDetail1 22 2\"\n      },\n      patternInfo: [{\n        patternID: 1,\n        order: 2\n      }]\n    }, {\n      detail: {\n        [\"defalut\"]: \"defalut\",\n        [\"testDetail1\"]: \"testDetail1 23 1\",\n        [\"testDetail2\"]: \"testDetail1 23 1\"\n      },\n      patternInfo: [{\n        patternID: 2,\n        order: 1\n      }, {\n        patternID: 1,\n        order: 3\n      }]\n    }, {\n      detail: {\n        [\"defalut\"]: \"defalut\",\n        [\"testDetail2\"]: \"testDetail1 23 2\",\n        [\"testDetail1\"]: \"testDetail1 23 2\"\n      },\n      patternInfo: [{\n        patternID: 2,\n        order: 2\n      }]\n    }]\n  }\n};\nconst tasksModule = createSlice({\n  name: \"tasks\",\n  initialState,\n  reducers: {\n    init(state, action) {\n      const data = action.payload;\n      console.log(\"init data\");\n      console.log(data); // state = {...data};\n\n      console.log(\"init state.userTaskInfo.calendar 前\"); // console.log(state.userTaskInfo.calendar[0].PatternId);\n\n      state.userTaskInfo = data;\n      console.log(\"init state.userTaskInfo.calendar 後\");\n      console.log(state); // console.log(state.userTaskInfo.calendar[0]);\n    },\n\n    Register(state, action) {\n      const data = action.payload;\n      state = _objectSpread(_objectSpread({}, state), data); // console.log('state');\n      // console.log(state);\n    },\n\n    allDelete(state) {\n      state = initialState;\n      console.log(\"check allDelete\");\n    },\n\n    // DayPlanにてタスクをクリックした際に完了フラグをtrueに変更する処理。引数にて年、月、日、タスクのインデックス番号を受け取っている。\n    taskCheckComplete(state, action) {\n      const index = state.userTaskInfo.calendar[action.payload[0]][action.payload[1]][action.payload[2]].tasks.findIndex(tasks => tasks.order == action.payload[3]);\n      console.log(index);\n      state.userTaskInfo.calendar[action.payload[0]][action.payload[1]][action.payload[2]].tasks[index].flug = !state.userTaskInfo.calendar[action.payload[0]][action.payload[1]][action.payload[2]].tasks[index].flug;\n    },\n\n    // 引数はstateと年、月、日、選択されているパターンIDの4つの数値が格納された配列\n    calendarPatternRegister(state, action) {\n      // stateから選択されているパターンIDが設定されているタスクを抽出する。\n      const choicePatternTasks = state.userTaskInfo.tasks.filter(function (task) {\n        return task.patternInfo.some(task => task.patternID == action.payload[3]);\n      }); // パターンIDに紐付くタスク一覧からカレンダーへの登録情報を抽出する。\n\n      const TodayTasks = choicePatternTasks.map(task => {\n        // パターンが複数登録されているタスクへの対応として、選択されているパターンIDに該当する要素だけを抽出する。\n        const taskPattern = task.patternInfo.filter(function (patternInfo) {\n          return patternInfo.patternID == action.payload[3];\n        }); // 配列のタスクと抽出したパターン情報を整形して返す。\n\n        return {\n          order: taskPattern[0].order,\n          detail: task.detail,\n          // detail2: task.detail2,\n          flug: false\n        };\n      }); // stateのMonthの連想配列に新しい日付の連想配列を追加する。\n      // 追加情報は引数の日とこれまでの処理で作成したカレンダー登録用情報\n\n      state.userTaskInfo.calendar[action.payload[0]][action.payload[1]] = _objectSpread(_objectSpread({}, state.userTaskInfo.calendar[action.payload[0]][action.payload[1]]), {}, {\n        [action.payload[2]]: {\n          PatternId: action.payload[3],\n          tasks: TodayTasks\n        }\n      }); // action.payload[3];\n\n      console.log(state.userTaskInfo.calendar[action.payload[0]][action.payload[1]][action.payload[2]]);\n    },\n\n    taskDetailRegister(state, action) {}\n\n  }\n});\nexport const {\n  init,\n  Register,\n  allDelete,\n  taskCheckComplete,\n  calendarPatternRegister,\n  taskDetailRegister\n} = tasksModule.actions;\nexport default tasksModule;","map":{"version":3,"sources":["C:/Users/blelm/Desktop/AppCreate/habitPlan/src/modules/tasksModule.tsx"],"names":["createSlice","initialState","userTaskInfo","calendar","Date","getFullYear","getMonth","getDate","PatternId","tasks","order","detail","flug","pattern","patternId","patternName","patternInfo","patternID","tasksModule","name","reducers","init","state","action","data","payload","console","log","Register","allDelete","taskCheckComplete","index","findIndex","calendarPatternRegister","choicePatternTasks","filter","task","some","TodayTasks","map","taskPattern","taskDetailRegister","actions"],"mappings":"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","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport {\r\n    calendar,\r\n    pattern,\r\n    tasks,\r\n    userTask,\r\n    userTaskInfo,\r\n} from \"./userTasksType\";\r\n\r\ntype State = {\r\n    [key: string]: string;\r\n};\r\n\r\nconst initialState: userTask = {\r\n    userTaskInfo: {\r\n        calendar: {\r\n            [new Date(\"Thu, 22 May 2020 02:00:00\").getFullYear()]: {\r\n                [new Date(\"Thu, 22 May 2020 02:00:00\").getMonth() + 1]: {\r\n                    [new Date(\"Thu, 22 May 2020 02:00:00\").getDate()]: {\r\n                        PatternId: 1,\r\n                        tasks: [\r\n                            {\r\n                                order: 1,\r\n                                detail: {\r\n                                    [\"testDetail1\"]: \"testDetail1 22 1\",\r\n                                    [\"testDetail2\"]: \"testDetail1 22 1\",\r\n                                },\r\n                                flug: false,\r\n                            },\r\n                            {\r\n                                order: 2,\r\n                                detail: {\r\n                                    [\"testDetail1\"]: \"testDetail1 22 2\",\r\n                                    [\"testDetail2\"]: \"testDetail1 22 2\",\r\n                                },\r\n                                flug: false,\r\n                            },\r\n                        ],\r\n                    },\r\n                    [new Date(\"Thu, 23 May 2020 02:00:00\").getDate()]: {\r\n                        PatternId: 1,\r\n                        tasks: [\r\n                            {\r\n                                order: 1,\r\n                                detail: {\r\n                                    [\"testDetail1\"]: \"testDetail1 23 1\",\r\n                                    [\"testDetail2\"]: \"testDetail1 23 1\",\r\n                                },\r\n                                flug: false,\r\n                            },\r\n                            {\r\n                                order: 2,\r\n                                detail: {\r\n                                    [\"testDetail1\"]: \"testDetail1 23 2\",\r\n                                    [\"testDetail2\"]: \"testDetail1 23 2\",\r\n                                },\r\n                                flug: false,\r\n                            },\r\n                        ],\r\n                    },\r\n                },\r\n            },\r\n        },\r\n        //             [date: number]: {\r\n        //                 PatternId: number;\r\n        //                 tasks: {\r\n        //                     detail1: string;\r\n        //                     detail2: string;\r\n        //                     flug: boolean;\r\n        //                 }[];\r\n        //             }[];\r\n        //         }[];\r\n        //     }[];\r\n\r\n        // ]\r\n        // year: new Date(\"Thu, 22 May 2020 02:00:00\").getFullYear(),[{\r\n        //     month: new Date(\"Thu, 22 May 2020 02:00:00\").getMonth() + 1,[{\r\n        //         date: new Date(\"Thu, 22 May 2020 02:00:00\").getDate(),[{\r\n        //             PatternId: 1,\r\n        //             tasks: [\r\n        //                 {\r\n        //                     detail1: \"testDetail1 22 1\",\r\n        //                     detail2: \"testDetail2 22 1\",\r\n        //                     flug: false,\r\n        //                 },\r\n        //                 {\r\n        //                     detail1: \"testDetail1 22 2\",\r\n        //                     detail2: \"testDetail2 22 2\",\r\n        //                     flug: false,\r\n        //                 },\r\n        //             ],\r\n\r\n        //         }]\r\n\r\n        //     }]\r\n\r\n        // }]\r\n        // {\r\n        //     year: new Date(\"Thu, 23 May 2020 02:00:00\").getFullYear(),\r\n        //     month: new Date(\"Thu, 23 May 2020 02:00:00\").getMonth() + 1,\r\n        //     date: new Date(\"Thu, 23 May 2020 02:00:00\").getDate(),\r\n        //     PatternId: 2,\r\n        //     tasks: [\r\n        //         {\r\n        //             detail1: \"testDetail1 23 1\",\r\n        //             detail2: \"testDetail2 23 1\",\r\n        //             flug: false,\r\n        //         },\r\n        //         {\r\n        //             detail1: \"testDetail1 23 2\",\r\n        //             detail2: \"testDetail2 23 2\",\r\n        //             flug: false,\r\n        //         },\r\n        //     ],\r\n        // },\r\n\r\n        pattern: [\r\n            {\r\n                patternId: 1,\r\n                patternName: \"testPattern1\",\r\n            },\r\n            {\r\n                patternId: 2,\r\n                patternName: \"testPattern2\",\r\n            },\r\n        ],\r\n        tasks: [\r\n            {\r\n                detail: {\r\n                    [\"defalut\"]: \"defalut\",\r\n                    [\"testDetail1\"]: \"testDetail1 22 1\",\r\n                    [\"testDetail2\"]: \"testDetail1 22 1\",\r\n                },\r\n                // detail1: \"testDetail1A\",\r\n                // detail2: \"testDetail2A\",\r\n                patternInfo: [\r\n                    {\r\n                        patternID: 1,\r\n                        order: 1,\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                detail: {\r\n                    [\"defalut\"]: \"defalut\",\r\n                    [\"testDetail1\"]: \"testDetail1 22 2\",\r\n                    [\"testDetail2\"]: \"testDetail1 22 2\",\r\n                },\r\n                patternInfo: [\r\n                    {\r\n                        patternID: 1,\r\n                        order: 2,\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                detail: {\r\n                    [\"defalut\"]: \"defalut\",\r\n                    [\"testDetail1\"]: \"testDetail1 23 1\",\r\n                    [\"testDetail2\"]: \"testDetail1 23 1\",\r\n                },\r\n                patternInfo: [\r\n                    {\r\n                        patternID: 2,\r\n                        order: 1,\r\n                    },\r\n                    {\r\n                        patternID: 1,\r\n                        order: 3,\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                detail: {\r\n                    [\"defalut\"]: \"defalut\",\r\n                    [\"testDetail2\"]: \"testDetail1 23 2\",\r\n                    [\"testDetail1\"]: \"testDetail1 23 2\",\r\n                },\r\n                patternInfo: [\r\n                    {\r\n                        patternID: 2,\r\n                        order: 2,\r\n                    },\r\n                ],\r\n            },\r\n        ],\r\n    },\r\n};\r\n\r\nconst tasksModule = createSlice({\r\n    name: \"tasks\",\r\n    initialState,\r\n    reducers: {\r\n        init(state: userTask, action: PayloadAction<userTaskInfo>) {\r\n            const data = action.payload;\r\n            console.log(\"init data\");\r\n            console.log(data);\r\n            // state = {...data};\r\n            console.log(\"init state.userTaskInfo.calendar 前\");\r\n            // console.log(state.userTaskInfo.calendar[0].PatternId);\r\n            state.userTaskInfo = data;\r\n            console.log(\"init state.userTaskInfo.calendar 後\");\r\n            console.log(state);\r\n            // console.log(state.userTaskInfo.calendar[0]);\r\n        },\r\n        Register(state: userTask, action: PayloadAction<userTask>) {\r\n            const data = action.payload;\r\n\r\n            state = { ...state, ...data };\r\n            // console.log('state');\r\n            // console.log(state);\r\n        },\r\n        allDelete(state: userTask) {\r\n            state = initialState;\r\n            console.log(\"check allDelete\");\r\n        },\r\n        // DayPlanにてタスクをクリックした際に完了フラグをtrueに変更する処理。引数にて年、月、日、タスクのインデックス番号を受け取っている。\r\n        taskCheckComplete(state: userTask, action: PayloadAction<number[]>) {\r\n            const index = state.userTaskInfo.calendar[action.payload[0]][\r\n                action.payload[1]\r\n            ][action.payload[2]].tasks.findIndex(\r\n                (tasks) => tasks.order == action.payload[3]\r\n            );\r\n            console.log(index);\r\n            state.userTaskInfo.calendar[action.payload[0]][action.payload[1]][\r\n                action.payload[2]\r\n            ].tasks[index].flug = !state.userTaskInfo.calendar[\r\n                action.payload[0]\r\n            ][action.payload[1]][action.payload[2]].tasks[index].flug;\r\n        },\r\n        // 引数はstateと年、月、日、選択されているパターンIDの4つの数値が格納された配列\r\n        calendarPatternRegister(\r\n            state: userTask,\r\n            action: PayloadAction<number[]>\r\n        ) {\r\n            // stateから選択されているパターンIDが設定されているタスクを抽出する。\r\n            const choicePatternTasks = state.userTaskInfo.tasks.filter(\r\n                function (task) {\r\n                    return task.patternInfo.some(\r\n                        (task) => task.patternID == action.payload[3]\r\n                    );\r\n                }\r\n            );\r\n\r\n            // パターンIDに紐付くタスク一覧からカレンダーへの登録情報を抽出する。\r\n            const TodayTasks = choicePatternTasks.map((task) => {\r\n                // パターンが複数登録されているタスクへの対応として、選択されているパターンIDに該当する要素だけを抽出する。\r\n                const taskPattern = task.patternInfo.filter(function (\r\n                    patternInfo\r\n                ) {\r\n                    return patternInfo.patternID == action.payload[3];\r\n                });\r\n\r\n                // 配列のタスクと抽出したパターン情報を整形して返す。\r\n                return {\r\n                    order: taskPattern[0].order,\r\n                    detail: task.detail,\r\n                    // detail2: task.detail2,\r\n                    flug: false,\r\n                };\r\n            });\r\n\r\n            // stateのMonthの連想配列に新しい日付の連想配列を追加する。\r\n            // 追加情報は引数の日とこれまでの処理で作成したカレンダー登録用情報\r\n            state.userTaskInfo.calendar[action.payload[0]][\r\n                action.payload[1]\r\n            ] = {\r\n                ...state.userTaskInfo.calendar[action.payload[0]][\r\n                    action.payload[1]\r\n                ],\r\n                [action.payload[2]]: {\r\n                    PatternId: action.payload[3],\r\n                    tasks: TodayTasks,\r\n                },\r\n            };\r\n\r\n            // action.payload[3];\r\n            console.log(\r\n                state.userTaskInfo.calendar[action.payload[0]][\r\n                    action.payload[1]\r\n                ][action.payload[2]]\r\n            );\r\n        },\r\n        taskDetailRegister(state: userTask,\r\n            action: PayloadAction<number[]>){\r\n\r\n        }\r\n    },\r\n});\r\n\r\nexport const {\r\n    init,\r\n    Register,\r\n    allDelete,\r\n    taskCheckComplete,\r\n    calendarPatternRegister,\r\n    taskDetailRegister,\r\n} = tasksModule.actions;\r\n\r\nexport default tasksModule;\r\n"]},"metadata":{},"sourceType":"module"}