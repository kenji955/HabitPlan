{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$(),\n    _s8 = $RefreshSig$(),\n    _s9 = $RefreshSig$(),\n    _s10 = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// データベースへの接続\n// import firebase from \"firebase/app\";\n// 認証周りやDB周りで必要なためimportしておく\nimport \"firebase/auth\";\nimport \"firebase/database\";\nimport { useMemo, useState, useEffect, useCallback } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { firebase } from \"./firebaseTest\";\nimport { login } from \"../../../modules/userModule\";\n\nvar useReduxFetch = function useReduxFetch() {\n  _s();\n\n  var dispatch = useDispatch();\n  return dispatch;\n}; // カスタムフックにしておく\n\n\n_s(useReduxFetch, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n  return [useDispatch];\n});\n\nvar useDatabase = function useDatabase() {\n  _s2();\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      userId = _useSelector.userId;\n\n  var dispatch = useDispatch();\n\n  var _useState = useState(''),\n      check = _useState[0],\n      setCheck = _useState[1]; // 同じパスでは毎回同じ結果が得られるのでmemo化しておく\n  // return useMemo(() => firebase.database().ref(\"/sample\"), []);\n\n\n  var uid = firebase.auth().currentUser;\n\n  if (!!uid) {\n    if (userId == '') {\n      dispatch(login(uid.uid));\n      setCheck('check');\n      console.log('check');\n    }\n\n    return useMemo(function () {\n      return firebase.database().ref(\"/users/\" + userId);\n    }, []);\n  } // ここが原因。ここでuserId取得後にrefを更新できればいい\n\n\n  return useMemo(function () {\n    return firebase.database().ref(\"/users/\" + userId);\n  }, []); // return useMemo(() => firebase.database().ref(\"/users/\" + uid.uid), []);\n}; //   データを取得する\n// hooksを使いたいのでカスタムhooksにしておく\n\n\n_s2(useDatabase, \"JOtEWc7By/6vaX/rnNdyFTiytes=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\nvar useFetchData = function useFetchData(ref) {\n  _s3();\n\n  var _useState2 = useState(),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  useEffect(function () {\n    // イベントリスナーを追加するにはonを使う\n    ref.on(\"value\", function (snapshot) {\n      // パスに対する全データを含むsnapshotが渡される\n      // ない場合はnullが返るので存在をチェックしておく\n      if (snapshot === null || snapshot === void 0 ? void 0 : snapshot.val()) {\n        setData(snapshot.val());\n      }\n    });\n    return function () {\n      ref.off();\n    }; // refの変更に応じて再取得する\n    //   指定したパスのデータに対する更新をすべて検知するにはvalueを指定すれば良い。\n  }, [ref]); // データを返却する\n  // console.log(\"data\");\n  // console.log(data);\n\n  return {\n    data: data\n  };\n}; // 実際に呼び出す際はこちらを使う\n\n\n_s3(useFetchData, \"WZ2PO9A64oHRexE1CE+yX3ebuoA=\");\n\nvar useFetchAllData = function useFetchAllData() {\n  _s4();\n\n  // refを取得して\n  var ref = useDatabase(); // ref渡してデータを取得する\n\n  return useFetchData(ref);\n}; // 登録処理\n// この登録はsetに渡した値での登録となる。\n// つまり、既存のデータも含めて渡してあげないと登録済みのデータが消える。\n\n\n_s4(useFetchAllData, \"MTgaLcAFZwYAI7SeegXrbygttSE=\", false, function () {\n  return [useDatabase, useFetchData];\n});\n\nvar useSetDocument = function useSetDocument(ref) {\n  _s5();\n\n  var updateDocument = useCallback(function (document) {\n    // refについては前回の記事参照\n    // setに登録したいデータを渡してあげれば登録できる\n    ref.set(document);\n  }, [ref]);\n  return updateDocument;\n};\n\n_s5(useSetDocument, \"qaGV0QmFp1ymR0Bb3SGaH/D9rrQ=\");\n\nvar useRegisterData = function useRegisterData() {\n  _s6();\n\n  // 前回作ったuseDatabase()を使いref取得\n  var ref = useDatabase();\n  var setDocument = useSetDocument(ref); // 登録済みのデータを全部取得する\n\n  var _useFetchAllData = useFetchAllData(),\n      registeredData = _useFetchAllData.data;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.tasks;\n  }),\n      userTaskInfo = _useSelector2.userTaskInfo; // データを登録する関数を返却する\n  // 可能であればここの処理はそのままにして、引数でsteteを更新する処理を先に行いたい\n\n\n  var registerData = useCallback(function (registerData) {\n    // () => {\n    console.log(userTaskInfo); // ここでReduxに保管しているstateを更新する？\n    // dispatch(Register({ ...registerData }));\n    // 既存のデータと登録するkey-valueを合わせて登録関数に渡す\n\n    setDocument(_objectSpread(_objectSpread({}, registeredData), registerData)); // setDocument(userTaskInfo);\n  }, [setDocument, registeredData]); // 返した関数を利用することで、登録済みデータ全て+登録したいデータをDBに保管できる\n\n  return registerData;\n}; // 更新処理\n\n\n_s6(useRegisterData, \"WvCRZb+/E+CWLP1m2TnnE7UM4GA=\", false, function () {\n  return [useDatabase, useSetDocument, useFetchAllData, useSelector];\n});\n\nvar useUpdateDocument = function useUpdateDocument(ref) {\n  _s7();\n\n  // ref.updateがObjectを受け取るので、Objectを引数に取る関数を定義\n  var updateDocument = useCallback(function (document) {\n    return ref.update(document);\n  }, [ref]);\n  return updateDocument;\n};\n\n_s7(useUpdateDocument, \"qaGV0QmFp1ymR0Bb3SGaH/D9rrQ=\");\n\nvar useUpdateData = function useUpdateData() {\n  _s8();\n\n  // setの時と同じくrefを取得して、\n  var ref = useDatabase(); // 関数呼び出して\n\n  var updateDocument = useUpdateDocument(ref); // 更新処理を作成する\n\n  var updateData = useCallback(function (registerData) {\n    updateDocument(registerData);\n  }, [updateDocument]);\n  return updateData;\n}; // 削除処理\n\n\n_s8(useUpdateData, \"E7cH9nA53VFPMj6IFYEiaC0AwAg=\", false, function () {\n  return [useDatabase, useUpdateDocument];\n});\n\nvar useRemoveDocument = function useRemoveDocument(ref) {\n  _s9();\n\n  // 特に引数が必要ないのでただ呼び出すのみ\n  var deleteDocument = useCallback(function (document) {\n    return ref.child(document).remove();\n  }, [ref]);\n  return deleteDocument;\n}; // set、updateと同じなので割愛\n\n\n_s9(useRemoveDocument, \"W4gOmK1JX32OHf5MbRd+Y53zEjs=\");\n\nvar useDelteData = function useDelteData() {\n  _s10();\n\n  var ref = useDatabase();\n  var removeDocument = useRemoveDocument(ref);\n  var deleteData = useCallback(function (deleteData) {\n    return removeDocument(deleteData);\n  }, [removeDocument]);\n  return deleteData;\n};\n\n_s10(useDelteData, \"gVsZ210xyBvGL4VGv9rznJUaaCc=\", false, function () {\n  return [useDatabase, useRemoveDocument];\n});\n\nexport { useFetchAllData, useRegisterData, useUpdateData, useDelteData };","map":{"version":3,"sources":["C:/Users/blelm/Desktop/AppCreate/habitPlan/src/components/test/firebaseTest/DBFetch.tsx"],"names":["useMemo","useState","useEffect","useCallback","useSelector","useDispatch","firebase","login","useReduxFetch","dispatch","useDatabase","state","user","userId","check","setCheck","uid","auth","currentUser","console","log","database","ref","useFetchData","data","setData","on","snapshot","val","off","useFetchAllData","useSetDocument","updateDocument","document","set","useRegisterData","setDocument","registeredData","tasks","userTaskInfo","registerData","useUpdateDocument","update","useUpdateData","updateData","useRemoveDocument","deleteDocument","child","remove","useDelteData","removeDocument","deleteData"],"mappings":"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","sourcesContent":["// データベースへの接続\r\n\r\n// import firebase from \"firebase/app\";\r\n// 認証周りやDB周りで必要なためimportしておく\r\nimport \"firebase/auth\";\r\nimport \"firebase/database\";\r\nimport { useMemo, useState, useEffect, useCallback } from \"react\";\r\n\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { RootState } from \"../../../modules/rootReducer\";\r\nimport { Register } from \"../../../modules/tasksModule\";\r\n\r\nimport { firebase } from \"./firebaseTest\";\r\n\r\nimport {\r\n    calendar,\r\n    pattern,\r\n    tasks,\r\n    userTask,\r\n    userTaskInfo,\r\n} from \"../../../modules/userTasksType\";\r\nimport { useTabContext } from \"@material-ui/lab\";\r\nimport { login } from \"../../../modules/userModule\";\r\n\r\nconst useReduxFetch = () => {\r\n    const dispatch = useDispatch();\r\n    return dispatch;\r\n};\r\n\r\n// カスタムフックにしておく\r\nconst useDatabase = () => {\r\n    const { userId } = useSelector((state: RootState) => state.user);\r\n    const dispatch = useDispatch();\r\n    const [check,setCheck] = useState('');\r\n    // 同じパスでは毎回同じ結果が得られるのでmemo化しておく\r\n    // return useMemo(() => firebase.database().ref(\"/sample\"), []);\r\n    const uid = firebase.auth().currentUser;\r\n    if(!!uid){\r\n        if(userId==''){\r\n            dispatch(login(uid.uid));\r\n            setCheck('check');\r\n            console.log('check');\r\n        }\r\n        return useMemo(() => firebase.database().ref(\"/users/\" + userId), []);\r\n    }\r\n\r\n    // ここが原因。ここでuserId取得後にrefを更新できればいい\r\n    return useMemo(() => firebase.database().ref(\"/users/\" + userId), []);\r\n    // return useMemo(() => firebase.database().ref(\"/users/\" + uid.uid), []);\r\n};\r\n\r\n//   データを取得する\r\n// hooksを使いたいのでカスタムhooksにしておく\r\nconst useFetchData = (ref: firebase.database.Reference) => {\r\n    const [data, setData] = useState<userTaskInfo>();\r\n    useEffect(() => {\r\n        // イベントリスナーを追加するにはonを使う\r\n        ref.on(\"value\", (snapshot: any) => {\r\n            // パスに対する全データを含むsnapshotが渡される\r\n            // ない場合はnullが返るので存在をチェックしておく\r\n            if (snapshot?.val()) {\r\n                setData(snapshot.val());\r\n            }\r\n        });\r\n        return () => {\r\n            ref.off();\r\n        };\r\n        // refの変更に応じて再取得する\r\n        //   指定したパスのデータに対する更新をすべて検知するにはvalueを指定すれば良い。\r\n    }, [ref]);\r\n    // データを返却する\r\n    // console.log(\"data\");\r\n    // console.log(data);\r\n    return { data };\r\n};\r\n\r\n// 実際に呼び出す際はこちらを使う\r\nconst useFetchAllData = () => {\r\n    // refを取得して\r\n    const ref = useDatabase();\r\n    // ref渡してデータを取得する\r\n    return useFetchData(ref);\r\n};\r\n\r\n// 登録処理\r\n// この登録はsetに渡した値での登録となる。\r\n// つまり、既存のデータも含めて渡してあげないと登録済みのデータが消える。\r\nconst useSetDocument = (ref: firebase.database.Reference) => {\r\n    const updateDocument = useCallback(\r\n        (document: unknown) => {\r\n            // refについては前回の記事参照\r\n            // setに登録したいデータを渡してあげれば登録できる\r\n            ref.set(document);\r\n        },\r\n        [ref]\r\n    );\r\n    return updateDocument;\r\n};\r\n\r\nconst useRegisterData = () => {\r\n    // 前回作ったuseDatabase()を使いref取得\r\n    const ref = useDatabase();\r\n    const setDocument = useSetDocument(ref);\r\n    // 登録済みのデータを全部取得する\r\n    const { data: registeredData } = useFetchAllData();\r\n    const { userTaskInfo } = useSelector((state: RootState) => state.tasks);\r\n    // データを登録する関数を返却する\r\n    \r\n    // 可能であればここの処理はそのままにして、引数でsteteを更新する処理を先に行いたい\r\n    const registerData = useCallback(\r\n        (registerData: { [key: string]: string }) => {\r\n            // () => {\r\n                console.log(userTaskInfo);\r\n            // ここでReduxに保管しているstateを更新する？\r\n            // dispatch(Register({ ...registerData }));\r\n            // 既存のデータと登録するkey-valueを合わせて登録関数に渡す\r\n            setDocument({ ...registeredData, ...registerData });\r\n            // setDocument(userTaskInfo);\r\n        },\r\n        [setDocument, registeredData]\r\n    );\r\n\r\n    // 返した関数を利用することで、登録済みデータ全て+登録したいデータをDBに保管できる\r\n    return registerData;\r\n};\r\n\r\n// 更新処理\r\nconst useUpdateDocument = (ref: firebase.database.Reference) => {\r\n    // ref.updateがObjectを受け取るので、Objectを引数に取る関数を定義\r\n    const updateDocument = useCallback(\r\n        (document: Object) => ref.update(document),\r\n        [ref]\r\n    );\r\n    return updateDocument;\r\n};\r\n\r\nconst useUpdateData = () => {\r\n    // setの時と同じくrefを取得して、\r\n    const ref = useDatabase();\r\n    // 関数呼び出して\r\n    const updateDocument = useUpdateDocument(ref);\r\n    // 更新処理を作成する\r\n    const updateData = useCallback(\r\n        (registerData: { [key: string]: string }) => {\r\n            updateDocument(registerData);\r\n        },\r\n        [updateDocument]\r\n    );\r\n    return updateData;\r\n};\r\n\r\n// 削除処理\r\nconst useRemoveDocument = (ref: firebase.database.Reference) => {\r\n    // 特に引数が必要ないのでただ呼び出すのみ\r\n    const deleteDocument = useCallback(\r\n        (document: string) => ref.child(document).remove(),\r\n        [ref]\r\n    );\r\n    return deleteDocument;\r\n};\r\n// set、updateと同じなので割愛\r\nconst useDelteData = () => {\r\n    const ref = useDatabase();\r\n    const removeDocument = useRemoveDocument(ref);\r\n    const deleteData = useCallback(\r\n        (deleteData: string) => removeDocument(deleteData),\r\n        [removeDocument]\r\n    );\r\n    return deleteData;\r\n};\r\n\r\nexport { useFetchAllData, useRegisterData, useUpdateData, useDelteData };\r\n"]},"metadata":{},"sourceType":"module"}