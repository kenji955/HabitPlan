{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$(),\n    _s8 = $RefreshSig$(),\n    _s9 = $RefreshSig$();\n\n// データベースへの接続\n// import firebase from \"firebase/app\";\n// 認証周りやDB周りで必要なためimportしておく\nimport \"firebase/auth\";\nimport \"firebase/database\";\nimport { useMemo, useState, useEffect, useCallback } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { firebase } from \"./firebaseTest\";\n\n// const useReduxFetch = () => {\n//     const dispatch = useDispatch();\n//     return dispatch;\n// };\n// カスタムフックにしておく\nvar useDatabase = function useDatabase() {\n  _s();\n\n  // const useDatabase = () => {\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      userId = _useSelector.userId; // const dispatch = useDispatch();\n  // const [check, setCheck] = useState(false);\n  // const [userIdCheck, setuserIdCheck] = useState('');\n  // if (userId != '' && userId != userIdCheck){\n  //     console.log('userId');\n  //     console.log(userId);\n  //     console.log('check');\n  //     console.log(check);\n  //     console.log('userIdCheck');\n  //     console.log(userIdCheck);\n  //     setuserIdCheck(userId);\n  //     setCheck(!check);\n  // }\n  // 同じパスでは毎回同じ結果が得られるのでmemo化しておく\n  // return useMemo(() => firebase.database().ref(\"/sample\"), []);\n  // const authUser = firebase.auth().currentUser;\n  // if (!!uid) {\n  //     if (userId == \"\") {\n  //         dispatch(login(uid.uid));\n  //         setCheck(\"check\");\n  //         // console.log(\"check\");\n  //     }\n  //     // console.log(\"DBF 1 userId\");\n  //     // console.log(userId);\n  //     return useMemo(() => firebase.database().ref(\"/users/\" + userId), [\n  //         userId,\n  //     ]);\n  // } else {\n  // ここが原因。ここでuserId取得後にrefを更新できればいい\n\n\n  console.log(\"DBF 2 userId\");\n  console.log(userId);\n  return useMemo(function () {\n    return firebase.database().ref(\"/users/\" + userId);\n  }, [userId]); // return useMemo(() => firebase.database().ref(\"/users/\" + authUser.uid), []);\n  // }\n}; //   データを取得する\n// hooksを使いたいのでカスタムhooksにしておく\n\n\n_s(useDatabase, \"nsE9a7rMM9nU/sPNgSjVmudEVRI=\", false, function () {\n  return [useSelector];\n});\n\nvar useFetchData = function useFetchData(ref) {\n  _s2();\n\n  var _useState = useState(),\n      data = _useState[0],\n      setData = _useState[1];\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.user;\n  }),\n      userId = _useSelector2.userId;\n\n  useEffect(function () {\n    if (!!userId) {\n      // イベントリスナーを追加するにはonを使う\n      ref.on(\"value\", function (snapshot) {\n        // パスに対する全データを含むsnapshotが渡される\n        // ない場合はnullが返るので存在をチェックしておく\n        if (snapshot === null || snapshot === void 0 ? void 0 : snapshot.val()) {\n          setData(snapshot.val());\n          console.log(\"DBF data\");\n          console.log(data);\n        }\n      });\n      console.log(\"DBFetch data==========\");\n      console.log(data);\n      return function () {\n        ref.off();\n      }; // refの変更に応じて再取得する\n      //   指定したパスのデータに対する更新をすべて検知するにはvalueを指定すれば良い。\n    }\n  }, [ref]); // データを返却する\n\n  return {\n    data: data\n  };\n}; // 実際に呼び出す際はこちらを使う\n\n\n_s2(useFetchData, \"atp6aAfjGkSh/opFeK1+N7jTQUo=\", false, function () {\n  return [useSelector];\n});\n\nvar useFetchAllData = function useFetchAllData() {\n  _s3();\n\n  // refを取得して\n  var ref = useDatabase();\n  console.log('ref');\n  console.log(ref); // ref渡してデータを取得する\n\n  return useFetchData(ref);\n}; // 登録処理\n// この登録はsetに渡した値での登録となる。\n// つまり、既存のデータも含めて渡してあげないと登録済みのデータが消える。\n\n\n_s3(useFetchAllData, \"MTgaLcAFZwYAI7SeegXrbygttSE=\", false, function () {\n  return [useDatabase, useFetchData];\n});\n\nvar useSetDocument = function useSetDocument(ref) {\n  _s4();\n\n  var updateDocument = useCallback(function (document) {\n    // refについては前回の記事参照\n    // setに登録したいデータを渡してあげれば登録できる\n    ref.set(document);\n  }, [ref]);\n  return updateDocument;\n};\n\n_s4(useSetDocument, \"qaGV0QmFp1ymR0Bb3SGaH/D9rrQ=\");\n\nvar useRegisterData = function useRegisterData() {\n  _s5();\n\n  // 前回作ったuseDatabase()を使いref取得\n  var _useSelector3 = useSelector(function (state) {\n    return state.user;\n  }),\n      userId = _useSelector3.userId;\n\n  var ref = firebase.database().ref(\"/users/\" + userId + \"/tasks\");\n  var setDocument = useSetDocument(ref); // 登録済みのデータを全部取得する\n\n  var _useFetchAllData = useFetchAllData(),\n      registeredData = _useFetchAllData.data; // データを登録する関数を返却する\n  // 可能であればここの処理はそのままにして、引数でsteteを更新する処理を先に行いたい\n\n\n  var registerData = useCallback(function (registerData) {\n    // () => {\n    // console.log(userTaskInfo);\n    // ここでReduxに保管しているstateを更新する？\n    // dispatch(Register({ ...registerData }));\n    // 既存のデータと登録するkey-valueを合わせて登録関数に渡す\n    setDocument([].concat(_toConsumableArray(registeredData.tasks), [registerData])); // setDocument(userTaskInfo.tasks);\n  }, [setDocument, registeredData]); // 返した関数を利用することで、登録済みデータ全て+登録したいデータをDBに保管できる\n\n  return registerData;\n}; // 更新処理\n\n\n_s5(useRegisterData, \"Fmv/iQwwiAArtMk3Nbxn85hSAWw=\", false, function () {\n  return [useSelector, useSetDocument, useFetchAllData];\n});\n\nvar useUpdateDocument = function useUpdateDocument(ref) {\n  _s6();\n\n  // ref.updateがObjectを受け取るので、Objectを引数に取る関数を定義\n  var updateDocument = useCallback(function (document) {\n    return ref.update(document);\n  }, [ref]);\n  return updateDocument;\n};\n\n_s6(useUpdateDocument, \"qaGV0QmFp1ymR0Bb3SGaH/D9rrQ=\");\n\nvar useUpdateData = function useUpdateData() {\n  _s7();\n\n  // setの時と同じくrefを取得して、\n  var ref = useDatabase(); // 関数呼び出して\n\n  var updateDocument = useUpdateDocument(ref); // 更新処理を作成する\n\n  var updateData = useCallback(function (registerData) {\n    updateDocument(registerData);\n  }, [updateDocument]);\n  return updateData;\n}; // 削除処理\n\n\n_s7(useUpdateData, \"E7cH9nA53VFPMj6IFYEiaC0AwAg=\", false, function () {\n  return [useDatabase, useUpdateDocument];\n});\n\nvar useRemoveDocument = function useRemoveDocument(ref) {\n  _s8();\n\n  // 特に引数が必要ないのでただ呼び出すのみ\n  var deleteDocument = useCallback(function (document) {\n    return ref.child(document).remove();\n  }, [ref]);\n  return deleteDocument;\n}; // set、updateと同じなので割愛\n\n\n_s8(useRemoveDocument, \"W4gOmK1JX32OHf5MbRd+Y53zEjs=\");\n\nvar useDelteData = function useDelteData() {\n  _s9();\n\n  var ref = useDatabase();\n  var removeDocument = useRemoveDocument(ref);\n  var deleteData = useCallback(function (deleteData) {\n    return removeDocument(deleteData);\n  }, [removeDocument]);\n  return deleteData;\n};\n\n_s9(useDelteData, \"gVsZ210xyBvGL4VGv9rznJUaaCc=\", false, function () {\n  return [useDatabase, useRemoveDocument];\n});\n\nexport { useDatabase, useFetchAllData, useRegisterData, useUpdateData, useDelteData };","map":{"version":3,"sources":["C:/Users/blelm/Desktop/AppCreate/habitPlan/src/components/test/firebaseTest/DBFetch.tsx"],"names":["useMemo","useState","useEffect","useCallback","useSelector","firebase","useDatabase","state","user","userId","console","log","database","ref","useFetchData","data","setData","on","snapshot","val","off","useFetchAllData","useSetDocument","updateDocument","document","set","useRegisterData","setDocument","registeredData","registerData","tasks","useUpdateDocument","update","useUpdateData","updateData","useRemoveDocument","deleteDocument","child","remove","useDelteData","removeDocument","deleteData"],"mappings":"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","sourcesContent":["// データベースへの接続\r\n\r\n// import firebase from \"firebase/app\";\r\n// 認証周りやDB周りで必要なためimportしておく\r\nimport \"firebase/auth\";\r\nimport \"firebase/database\";\r\nimport { useMemo, useState, useEffect, useCallback } from \"react\";\r\n\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../modules/rootReducer\";\r\n\r\nimport { firebase } from \"./firebaseTest\";\r\n\r\nimport {\r\n    tasks,\r\n    userTaskInfo,\r\n} from \"../../../modules/userTasksType\";\r\n\r\n// const useReduxFetch = () => {\r\n//     const dispatch = useDispatch();\r\n//     return dispatch;\r\n// };\r\n\r\n// カスタムフックにしておく\r\nconst useDatabase = () => {\r\n    // const useDatabase = () => {\r\n    const { userId } = useSelector((state: RootState) => state.user);\r\n    // const dispatch = useDispatch();\r\n    // const [check, setCheck] = useState(false);\r\n    // const [userIdCheck, setuserIdCheck] = useState('');\r\n    // if (userId != '' && userId != userIdCheck){\r\n    //     console.log('userId');\r\n    //     console.log(userId);\r\n    //     console.log('check');\r\n    //     console.log(check);\r\n    //     console.log('userIdCheck');\r\n    //     console.log(userIdCheck);\r\n    //     setuserIdCheck(userId);\r\n    //     setCheck(!check);\r\n    // }\r\n        // 同じパスでは毎回同じ結果が得られるのでmemo化しておく\r\n        // return useMemo(() => firebase.database().ref(\"/sample\"), []);\r\n        // const authUser = firebase.auth().currentUser;\r\n        // if (!!uid) {\r\n        //     if (userId == \"\") {\r\n        //         dispatch(login(uid.uid));\r\n        //         setCheck(\"check\");\r\n        //         // console.log(\"check\");\r\n        //     }\r\n\r\n        //     // console.log(\"DBF 1 userId\");\r\n        //     // console.log(userId);\r\n        //     return useMemo(() => firebase.database().ref(\"/users/\" + userId), [\r\n        //         userId,\r\n        //     ]);\r\n        // } else {\r\n        // ここが原因。ここでuserId取得後にrefを更新できればいい\r\n        console.log(\"DBF 2 userId\");\r\n    console.log(userId);\r\n    return useMemo(() => firebase.database().ref(\"/users/\" + userId), [\r\n        userId,\r\n    ]);\r\n    // return useMemo(() => firebase.database().ref(\"/users/\" + authUser.uid), []);\r\n    // }\r\n};\r\n\r\n//   データを取得する\r\n// hooksを使いたいのでカスタムhooksにしておく\r\nconst useFetchData = (ref: firebase.database.Reference) => {\r\n    const [data, setData] = useState<userTaskInfo>();\r\n    const { userId } = useSelector((state: RootState) => state.user);\r\n    useEffect(() => {\r\n        if(!!userId){\r\n            // イベントリスナーを追加するにはonを使う\r\n            ref.on(\"value\", (snapshot: any) => {\r\n                // パスに対する全データを含むsnapshotが渡される\r\n                // ない場合はnullが返るので存在をチェックしておく\r\n                if (snapshot?.val()) {\r\n                    setData(snapshot.val());\r\n                    console.log(\"DBF data\");\r\n                    console.log(data);\r\n                }\r\n            });\r\n            console.log(\"DBFetch data==========\");\r\n            console.log(data);\r\n            return () => {\r\n                ref.off();\r\n            };\r\n            // refの変更に応じて再取得する\r\n            //   指定したパスのデータに対する更新をすべて検知するにはvalueを指定すれば良い。\r\n        }\r\n    }, [ref]);\r\n    // データを返却する\r\n    return { data };\r\n};\r\n\r\n// 実際に呼び出す際はこちらを使う\r\nconst useFetchAllData = () => {\r\n    // refを取得して\r\n    const ref = useDatabase();\r\n    console.log('ref');\r\n    console.log(ref);\r\n    // ref渡してデータを取得する\r\n    return useFetchData(ref);\r\n};\r\n\r\n// 登録処理\r\n// この登録はsetに渡した値での登録となる。\r\n// つまり、既存のデータも含めて渡してあげないと登録済みのデータが消える。\r\nconst useSetDocument = (ref: firebase.database.Reference) => {\r\n    const updateDocument = useCallback(\r\n        (document: unknown) => {\r\n            // refについては前回の記事参照\r\n            // setに登録したいデータを渡してあげれば登録できる\r\n            ref.set(document);\r\n        },\r\n        [ref]\r\n    );\r\n    return updateDocument;\r\n};\r\n\r\nconst useRegisterData = () => {\r\n    // 前回作ったuseDatabase()を使いref取得\r\n    const { userId } = useSelector((state: RootState) => state.user);\r\n    const ref = firebase.database().ref(\"/users/\" + userId + \"/tasks\");\r\n    const setDocument = useSetDocument(ref);\r\n    // 登録済みのデータを全部取得する\r\n    const { data: registeredData } = useFetchAllData();\r\n    // データを登録する関数を返却する\r\n\r\n    // 可能であればここの処理はそのままにして、引数でsteteを更新する処理を先に行いたい\r\n    const registerData = useCallback(\r\n        (registerData: tasks) => {\r\n            // () => {\r\n            // console.log(userTaskInfo);\r\n            // ここでReduxに保管しているstateを更新する？\r\n            // dispatch(Register({ ...registerData }));\r\n            // 既存のデータと登録するkey-valueを合わせて登録関数に渡す\r\n            setDocument([ ...registeredData.tasks, registerData ]);\r\n            // setDocument(userTaskInfo.tasks);\r\n        },\r\n        [setDocument, registeredData]\r\n    );\r\n\r\n    // 返した関数を利用することで、登録済みデータ全て+登録したいデータをDBに保管できる\r\n    return registerData;\r\n};\r\n\r\n// 更新処理\r\nconst useUpdateDocument = (ref: firebase.database.Reference) => {\r\n    // ref.updateがObjectを受け取るので、Objectを引数に取る関数を定義\r\n    const updateDocument = useCallback(\r\n        (document: Object) => ref.update(document),\r\n        [ref]\r\n    );\r\n    return updateDocument;\r\n};\r\n\r\nconst useUpdateData = () => {\r\n    // setの時と同じくrefを取得して、\r\n    const ref = useDatabase();\r\n    // 関数呼び出して\r\n    const updateDocument = useUpdateDocument(ref);\r\n    // 更新処理を作成する\r\n    const updateData = useCallback(\r\n        (registerData: { [key: string]: string }) => {\r\n            updateDocument(registerData);\r\n        },\r\n        [updateDocument]\r\n    );\r\n    return updateData;\r\n};\r\n\r\n// 削除処理\r\nconst useRemoveDocument = (ref: firebase.database.Reference) => {\r\n    // 特に引数が必要ないのでただ呼び出すのみ\r\n    const deleteDocument = useCallback(\r\n        (document: string) => ref.child(document).remove(),\r\n        [ref]\r\n    );\r\n    return deleteDocument;\r\n};\r\n// set、updateと同じなので割愛\r\nconst useDelteData = () => {\r\n    const ref = useDatabase();\r\n    const removeDocument = useRemoveDocument(ref);\r\n    const deleteData = useCallback(\r\n        (deleteData: string) => removeDocument(deleteData),\r\n        [removeDocument]\r\n    );\r\n    return deleteData;\r\n};\r\n\r\nexport { useDatabase,useFetchAllData, useRegisterData, useUpdateData, useDelteData };\r\n"]},"metadata":{},"sourceType":"module"}