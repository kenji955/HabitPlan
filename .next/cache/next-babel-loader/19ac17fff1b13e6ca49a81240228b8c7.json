{"ast":null,"code":"import { useCallback } from \"react\";\nimport { useFetchAllData } from \"./DBFetch\";\n// 認証周りやDB周りで必要なためimportしておく\nimport \"firebase/auth\";\nimport \"firebase/database\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { init } from \"../../../modules/tasksModule\";\nexport default function ListComponent() {\n  // dataを取ってくる\n  const {\n    userId\n  } = useSelector(state => state.user);\n  const dispatch = useDispatch();\n  const {\n    data\n  } = useFetchAllData();\n\n  if (!!userId) {\n    console.log(\"getData.tsx data\");\n    console.log(data);\n    dispatch(init(data));\n  } // ここでstateを使うならログイン時にDBから取得したデータをReduxに保管する必要がある。\n\n\n  let userTask = useSelector(state => state.tasks);\n  useCallback(() => {\n    userTask = useSelector(state => state.tasks);\n  }, [userId]);\n  console.log(\"userTask\");\n  console.log(userTask); // data ? console.log(data.userTaskInfo) : console.log('noo');\n  // object形式なので使いやすいように{key, value}形式のリストに変換する\n  // また、データが変わらない限り結果は同じなのでメモ化しておく\n  // const dataList = useMemo(() => Object.entries(data || {}).map(([key, value]) => ({ key, value })), [data]);\n  // return <div>{data.userTaskInfo.calendar[0].PatternId}</div>;\n  // <dl>{dataList.map(({ key, value }) =>\n  //   <React.Fragment key={`${key}${value}`}>\n  //     <dt>key: {key}</dt>\n  //     <dt>value: {value}</dt>\n  //   </React.Fragment>\n  // )}</dl>\n}","map":{"version":3,"sources":["C:/Users/blelm/Desktop/AppCreate/habitPlan/src/components/test/firebaseTest/getData.tsx"],"names":["useCallback","useFetchAllData","useDispatch","useSelector","init","ListComponent","userId","state","user","dispatch","data","console","log","userTask","tasks"],"mappings":"AAAA,SAAgBA,WAAhB,QAA4C,OAA5C;AACA,SAASC,eAAT,QAAgC,WAAhC;AAEA;AACA,OAAO,eAAP;AACA,OAAO,mBAAP;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAGA,SAASC,IAAT,QAAqB,8BAArB;AAEA,eAAe,SAASC,aAAT,GAAyB;AACpC;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAaH,WAAW,CAAEI,KAAD,IAAsBA,KAAK,CAACC,IAA7B,CAA9B;AACA,QAAMC,QAAQ,GAAGP,WAAW,EAA5B;AACA,QAAM;AAAEQ,IAAAA;AAAF,MAAWT,eAAe,EAAhC;;AACA,MAAI,CAAC,CAACK,MAAN,EAAc;AACVK,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAD,IAAAA,QAAQ,CAACL,IAAI,CAACM,IAAD,CAAL,CAAR;AACH,GATmC,CAWpC;;;AACA,MAAIG,QAAQ,GAAGV,WAAW,CAAEI,KAAD,IAAsBA,KAAK,CAACO,KAA7B,CAA1B;AACAd,EAAAA,WAAW,CAAC,MAAM;AACda,IAAAA,QAAQ,GAAGV,WAAW,CAAEI,KAAD,IAAsBA,KAAK,CAACO,KAA7B,CAAtB;AACH,GAFU,EAER,CAACR,MAAD,CAFQ,CAAX;AAIAK,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,EAlBoC,CAmBpC;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACH","sourcesContent":["import React, { useCallback, useMemo } from \"react\";\r\nimport { useFetchAllData } from \"./DBFetch\";\r\nimport firebase from \"firebase/app\";\r\n// 認証周りやDB周りで必要なためimportしておく\r\nimport \"firebase/auth\";\r\nimport \"firebase/database\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../modules/rootReducer\";\r\nimport { userTask } from \"../../../modules/userTasksType\";\r\nimport { init } from \"../../../modules/tasksModule\";\r\n\r\nexport default function ListComponent() {\r\n    // dataを取ってくる\r\n    const { userId } = useSelector((state: RootState) => state.user);\r\n    const dispatch = useDispatch();\r\n    const { data } = useFetchAllData();\r\n    if (!!userId) {\r\n        console.log(\"getData.tsx data\");\r\n        console.log(data);\r\n        dispatch(init(data));\r\n    }\r\n\r\n    // ここでstateを使うならログイン時にDBから取得したデータをReduxに保管する必要がある。\r\n    let userTask = useSelector((state: RootState) => state.tasks);\r\n    useCallback(() => {\r\n        userTask = useSelector((state: RootState) => state.tasks);\r\n    }, [userId]);\r\n\r\n    console.log(\"userTask\");\r\n    console.log(userTask);\r\n    // data ? console.log(data.userTaskInfo) : console.log('noo');\r\n    // object形式なので使いやすいように{key, value}形式のリストに変換する\r\n    // また、データが変わらない限り結果は同じなのでメモ化しておく\r\n    // const dataList = useMemo(() => Object.entries(data || {}).map(([key, value]) => ({ key, value })), [data]);\r\n\r\n    // return <div>{data.userTaskInfo.calendar[0].PatternId}</div>;\r\n    // <dl>{dataList.map(({ key, value }) =>\r\n    //   <React.Fragment key={`${key}${value}`}>\r\n    //     <dt>key: {key}</dt>\r\n    //     <dt>value: {value}</dt>\r\n    //   </React.Fragment>\r\n    // )}</dl>\r\n}\r\n"]},"metadata":{},"sourceType":"module"}