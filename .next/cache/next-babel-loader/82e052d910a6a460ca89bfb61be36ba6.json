{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\blelm\\\\Desktop\\\\AppCreate\\\\habitPlan\\\\src\\\\components\\\\view\\\\TaskList.tsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CommentIcon from \"@material-ui/icons/Comment\";\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport TaskModal from \"./TaskModal\";\nimport { useSelector } from \"react-redux\";\nconst useStyles = makeStyles(theme => createStyles({\n  roots: {\n    width: \"100%\",\n    maxWidth: 720,\n    margin: \"auto\",\n    backgroundColor: theme.palette.background.paper\n  },\n  icon: {\n    margin: \"auto\"\n  }\n}));\nexport default function CheckboxList() {\n  const classes = useStyles(); // const [checked, setChecked] = React.useState([0]);\n\n  const [open, setOpen] = React.useState(9999);\n  const {\n    userTaskInfo\n  } = useSelector(state => state.tasks);\n\n  const handleToggle = value => () => {\n    // const currentIndex = checked.indexOf(value);\n    // const newChecked = [...checked];\n    // if (currentIndex === -1) {\n    //     newChecked.push(value);\n    // } else {\n    //     newChecked.splice(currentIndex, 1);\n    // }\n    setOpen(value);\n    console.log(\"open:\" + open); // setChecked(newChecked);\n  };\n\n  return __jsx(List, {\n    className: classes.roots,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }, userTaskInfo.tasks.map((task, index) => {\n    const labelId = `checkbox-list-label-${task.detail[\"testDetail1\"]}`;\n    return __jsx(ListItem, {\n      key: task.patternInfo[0].order + \":\" + task.patternInfo[0].patternID,\n      role: undefined,\n      dense: true,\n      button: true,\n      onClick: handleToggle(index),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 25\n      }\n    }, __jsx(ListItemText, {\n      id: labelId,\n      primary: `Line item ${index + 1} ${task.detail[\"testDetail1\"]} ${task.detail[\"testDetail2\"]}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 29\n      }\n    }), __jsx(ListItemSecondaryAction, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 29\n      }\n    }, __jsx(TaskModal, {\n      open: open,\n      setOpen: setOpen,\n      task: task,\n      index: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 33\n      }\n    }), __jsx(IconButton, {\n      edge: \"end\",\n      \"aria-label\": \"comments\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 33\n      }\n    }, __jsx(CommentIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 37\n      }\n    }))));\n  }), __jsx(AddCircleIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/blelm/Desktop/AppCreate/habitPlan/src/components/view/TaskList.tsx"],"names":["React","createStyles","makeStyles","List","ListItem","ListItemSecondaryAction","ListItemText","IconButton","CommentIcon","AddCircleIcon","TaskModal","useSelector","useStyles","theme","roots","width","maxWidth","margin","backgroundColor","palette","background","paper","icon","CheckboxList","classes","open","setOpen","useState","userTaskInfo","state","tasks","handleToggle","value","console","log","map","task","index","labelId","detail","patternInfo","order","patternID","undefined"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Fade from \"@material-ui/core/Fade\";\r\nimport CommentIcon from \"@material-ui/icons/Comment\";\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\n\r\nimport TaskModal from \"./TaskModal\";\r\nimport TaskPlusIcon from \"./taskPlus\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../modules/rootReducer\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        roots: {\r\n            width: \"100%\",\r\n            maxWidth: 720,\r\n            margin: \"auto\",\r\n            backgroundColor: theme.palette.background.paper,\r\n        },\r\n        icon: {\r\n            margin: \"auto\",\r\n        },\r\n    })\r\n);\r\n\r\nexport default function CheckboxList() {\r\n    const classes = useStyles();\r\n    // const [checked, setChecked] = React.useState([0]);\r\n    const [open, setOpen] = React.useState(9999);\r\n    const { userTaskInfo } = useSelector((state: RootState) => state.tasks);\r\n\r\n    const handleToggle = (value: number) => () => {\r\n        // const currentIndex = checked.indexOf(value);\r\n        // const newChecked = [...checked];\r\n\r\n        // if (currentIndex === -1) {\r\n        //     newChecked.push(value);\r\n        // } else {\r\n        //     newChecked.splice(currentIndex, 1);\r\n        // }\r\n\r\n        setOpen(value);\r\n        console.log(\"open:\" + open);\r\n        // setChecked(newChecked);\r\n    };\r\n\r\n    return (\r\n            <List className={classes.roots}>\r\n                {/* {[0, 1, 2, 3].map((value) => { */}\r\n                {userTaskInfo.tasks.map((task, index) => {\r\n                    const labelId = `checkbox-list-label-${task.detail[\"testDetail1\"]}`;\r\n\r\n                    return (\r\n                        <ListItem\r\n                            key={\r\n                                task.patternInfo[0].order +\r\n                                \":\" +\r\n                                task.patternInfo[0].patternID\r\n                            }\r\n                            role={undefined}\r\n                            dense\r\n                            button\r\n                            onClick={handleToggle(index)}\r\n                        >\r\n                            <ListItemText\r\n                                id={labelId}\r\n                                primary={`Line item ${index + 1} ${\r\n                                    task.detail[\"testDetail1\"]\r\n                                } ${task.detail[\"testDetail2\"]}`}\r\n                            />\r\n                            <ListItemSecondaryAction>\r\n                                <TaskModal\r\n                                    open={open}\r\n                                    setOpen={setOpen}\r\n                                    task={task}\r\n                                    index={index}\r\n                                />\r\n                                <IconButton edge=\"end\" aria-label=\"comments\">\r\n                                    {/* <IconButton aria-label=\"comments\"> */}\r\n                                    <CommentIcon />\r\n                                </IconButton>\r\n                            </ListItemSecondaryAction>\r\n                        </ListItem>\r\n                    );\r\n                })}\r\n            {/* <TaskPlusIcon className={classes.icon}/> */}\r\n            <AddCircleIcon />\r\n            </List>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}