{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListSubheader from \"@material-ui/core/ListSubheader\";\nimport Switch from \"@material-ui/core/Switch\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { taskPatternUpdate } from \"../../modules/tasksModule\";\nvar useStyles = makeStyles(function (theme) {\n  return createStyles({\n    root: {\n      width: \"100%\",\n      maxWidth: 360,\n      backgroundColor: theme.palette.background.paper\n    }\n  });\n});\nexport default function PatternSwitchList(props) {\n  var classes = useStyles();\n\n  var _useSelector = useSelector(function (state) {\n    return state.tasks;\n  }),\n      userTaskInfo = _useSelector.userTaskInfo;\n\n  var dispatch = useDispatch(); // ここでパターンの登録状況を更新する\n\n  var handleToggle = function handleToggle(value) {\n    return function () {\n      var currentIndex = props.checked.indexOf(value);\n\n      var newChecked = _toConsumableArray(props.checked);\n\n      if (currentIndex === -1) {\n        newChecked.push(value);\n      } else {\n        newChecked.splice(currentIndex, 1);\n      }\n\n      props.setChecked(newChecked);\n      console.log('newChecked');\n      console.log(newChecked);\n      var index = props.index;\n\n      if (!props.checkNew) {\n        dispatch(taskPatternUpdate({\n          newChecked: newChecked,\n          index: index\n        }));\n      }\n    };\n  };\n\n  return __jsx(List, {\n    subheader: __jsx(ListSubheader, null, \"PatternList\"),\n    className: classes.root\n  }, userTaskInfo.pattern.map(function (content) {\n    return __jsx(ListItem, {\n      key: content.patternName + '_' + props.checked\n    }, __jsx(ListItemText, {\n      id: content.patternId + \"_\" + content.patternName,\n      primary: content.patternName\n    }), __jsx(ListItemSecondaryAction, null, __jsx(Switch, {\n      edge: \"end\",\n      onChange: handleToggle(content.patternId),\n      checked: props.checked.indexOf(content.patternId) !== -1,\n      inputProps: {\n        \"aria-labelledby\": content.patternId + \"_\" + content.patternName\n      }\n    })));\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}