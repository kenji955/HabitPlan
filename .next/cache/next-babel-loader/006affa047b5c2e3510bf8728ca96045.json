{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\blelm\\\\Desktop\\\\AppCreate\\\\habitPlan\\\\src\\\\components\\\\test\\\\firebaseTest\\\\getData.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport { useFetchAllData } from \"./DBFetch\";\n// 認証周りやDB周りで必要なためimportしておく\nimport \"firebase/auth\";\nimport \"firebase/database\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { init } from \"../../../modules/tasksModule\";\nexport default function ListComponent() {\n  const {\n    0: UT,\n    1: setUT\n  } = useState(useSelector(state => state.tasks));\n  useEffect(() => {\n    const {\n      userId\n    } = useSelector(state => state.user);\n    const dispatch = useDispatch(); // dataを取ってくる\n\n    const {\n      data\n    } = useFetchAllData();\n\n    if (!!userId && !!data) {\n      console.log(\"getData.tsx data\");\n      console.log(data);\n      dispatch(init(data));\n      setUT(useSelector(state => state.tasks));\n    }\n  }); // ここでstateを使うならログイン時にDBから取得したデータをReduxに保管する必要がある。\n  // useCallback(() => {\n  //     userTask = useSelector((state: RootState) => state.tasks);\n  // }, [userId]);\n\n  console.log(\"getData UT\");\n  console.log(UT); // data ? console.log(data.userTaskInfo) : console.log('noo');\n  // object形式なので使いやすいように{key, value}形式のリストに変換する\n  // また、データが変わらない限り結果は同じなのでメモ化しておく\n  // const dataList = useMemo(() => Object.entries(data || {}).map(([key, value]) => ({ key, value })), [data]);\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 12\n    }\n  }, \"test\"); // return <div>{data.userTaskInfo.calendar[0].PatternId}</div>;\n  // <dl>{dataList.map(({ key, value }) =>\n  //   <React.Fragment key={`${key}${value}`}>\n  //     <dt>key: {key}</dt>\n  //     <dt>value: {value}</dt>\n  //   </React.Fragment>\n  // )}</dl>\n}","map":{"version":3,"sources":["C:/Users/blelm/Desktop/AppCreate/habitPlan/src/components/test/firebaseTest/getData.tsx"],"names":["React","useEffect","useState","useFetchAllData","useDispatch","useSelector","init","ListComponent","UT","setUT","state","tasks","userId","user","dispatch","data","console","log"],"mappings":";;AAAA,OAAOA,KAAP,IAA6BC,SAA7B,EAAiDC,QAAjD,QAAiE,OAAjE;AACA,SAASC,eAAT,QAAgC,WAAhC;AAEA;AACA,OAAO,eAAP;AACA,OAAO,mBAAP;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAGA,SAASC,IAAT,QAAqB,8BAArB;AAEA,eAAe,SAASC,aAAT,GAAyB;AACpC,QAAM;AAAA,OAACC,EAAD;AAAA,OAAIC;AAAJ,MAAaP,QAAQ,CAACG,WAAW,CAAEK,KAAD,IAAsBA,KAAK,CAACC,KAA7B,CAAZ,CAA3B;AACAV,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAM;AAAEW,MAAAA;AAAF,QAAaP,WAAW,CAAEK,KAAD,IAAsBA,KAAK,CAACG,IAA7B,CAA9B;AACA,UAAMC,QAAQ,GAAGV,WAAW,EAA5B,CAFY,CAGZ;;AACA,UAAM;AAAEW,MAAAA;AAAF,QAAWZ,eAAe,EAAhC;;AACA,QAAI,CAAC,CAACS,MAAF,IAAY,CAAC,CAACG,IAAlB,EAAwB;AACpBC,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAD,MAAAA,QAAQ,CAACR,IAAI,CAACS,IAAD,CAAL,CAAR;AACAN,MAAAA,KAAK,CAACJ,WAAW,CAAEK,KAAD,IAAsBA,KAAK,CAACC,KAA7B,CAAZ,CAAL;AACH;AACJ,GAXQ,CAAT,CAFoC,CAepC;AACA;AACA;AACA;;AAEAK,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYT,EAAZ,EArBoC,CAsBpC;AACA;AACA;AACA;;AAEA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP,CA3BoC,CA4BpC;AACA;AACA;AACA;AACA;AACA;AACA;AACH","sourcesContent":["import React, { useCallback, useEffect, useMemo, useState } from \"react\";\r\nimport { useFetchAllData } from \"./DBFetch\";\r\nimport firebase from \"firebase/app\";\r\n// 認証周りやDB周りで必要なためimportしておく\r\nimport \"firebase/auth\";\r\nimport \"firebase/database\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../modules/rootReducer\";\r\nimport { userTask } from \"../../../modules/userTasksType\";\r\nimport { init } from \"../../../modules/tasksModule\";\r\n\r\nexport default function ListComponent() {\r\n    const [UT,setUT] = useState(useSelector((state: RootState) => state.tasks));\r\n    useEffect(() => {\r\n        const { userId } = useSelector((state: RootState) => state.user);\r\n        const dispatch = useDispatch();\r\n        // dataを取ってくる\r\n        const { data } = useFetchAllData();\r\n        if (!!userId && !!data) {\r\n            console.log(\"getData.tsx data\");\r\n            console.log(data);\r\n            dispatch(init(data));\r\n            setUT(useSelector((state: RootState) => state.tasks));\r\n        }\r\n    });\r\n\r\n    // ここでstateを使うならログイン時にDBから取得したデータをReduxに保管する必要がある。\r\n    // useCallback(() => {\r\n    //     userTask = useSelector((state: RootState) => state.tasks);\r\n    // }, [userId]);\r\n\r\n    console.log(\"getData UT\");\r\n    console.log(UT);\r\n    // data ? console.log(data.userTaskInfo) : console.log('noo');\r\n    // object形式なので使いやすいように{key, value}形式のリストに変換する\r\n    // また、データが変わらない限り結果は同じなのでメモ化しておく\r\n    // const dataList = useMemo(() => Object.entries(data || {}).map(([key, value]) => ({ key, value })), [data]);\r\n\r\n    return <div>test</div>;\r\n    // return <div>{data.userTaskInfo.calendar[0].PatternId}</div>;\r\n    // <dl>{dataList.map(({ key, value }) =>\r\n    //   <React.Fragment key={`${key}${value}`}>\r\n    //     <dt>key: {key}</dt>\r\n    //     <dt>value: {value}</dt>\r\n    //   </React.Fragment>\r\n    // )}</dl>\r\n}\r\n"]},"metadata":{},"sourceType":"module"}