{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CommentIcon from \"@material-ui/icons/Comment\";\nimport TaskModal from \"./TaskModal\";\nimport { useSelector } from \"react-redux\";\nvar useStyles = makeStyles(function (theme) {\n  return createStyles({\n    rootss: {\n      width: \"100%\",\n      maxWidth: 720,\n      margin: \"auto\",\n      backgroundColor: theme.palette.background.paper\n    }\n  });\n});\nexport default function CheckboxList() {\n  var classes = useStyles(); // const [checked, setChecked] = React.useState([0]);\n\n  var _React$useState = React.useState(9999),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      open = _React$useState2[0],\n      setOpen = _React$useState2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.tasks;\n  }),\n      userTaskInfo = _useSelector.userTaskInfo;\n\n  var handleToggle = function handleToggle(value) {\n    return function () {\n      // const currentIndex = checked.indexOf(value);\n      // const newChecked = [...checked];\n      // if (currentIndex === -1) {\n      //     newChecked.push(value);\n      // } else {\n      //     newChecked.splice(currentIndex, 1);\n      // }\n      setOpen(value);\n      console.log(\"open:\" + open); // setChecked(newChecked);\n    };\n  };\n\n  return __jsx(List, {\n    className: classes.rootss\n  }, userTaskInfo.tasks.map(function (task, index) {\n    var labelId = \"checkbox-list-label-\".concat(task.detail[\"testDetail1\"]);\n    return __jsx(ListItem, {\n      key: task.patternInfo[0].order + \":\" + task.patternInfo[0].patternID,\n      role: undefined,\n      dense: true,\n      button: true,\n      onClick: handleToggle(index)\n    }, __jsx(ListItemText, {\n      id: labelId,\n      primary: \"Line item \".concat(index + 1, \" \").concat(task.detail[\"testDetail1\"], \" \").concat(task.detail[\"testDetail2\"])\n    }), __jsx(ListItemSecondaryAction, null, __jsx(TaskModal, {\n      open: open,\n      setOpen: setOpen,\n      task: task,\n      index: index\n    }), __jsx(IconButton, {\n      edge: \"end\",\n      \"aria-label\": \"comments\"\n    }, __jsx(CommentIcon, null))));\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}