{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport { useSelector } from \"react-redux\";\nvar useStyles = makeStyles(function (theme) {\n  return createStyles({\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: 120\n    },\n    selectEmpty: {\n      marginTop: theme.spacing(2)\n    },\n    home: {\n      width: 'fit-content',\n      margin: 'auto'\n    }\n  });\n});\nexport default function SimpleSelect(props) {\n  var classes = useStyles();\n\n  var _React$useState = React.useState(\"\"),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      pattern = _React$useState2[0],\n      setPattern = _React$useState2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.tasks;\n  }),\n      userTaskInfo = _useSelector.userTaskInfo;\n\n  console.log('pattern' + pattern);\n  console.log('props.choise' + props.choice);\n\n  if (props.choice == 0) {\n    props.setChoice(userTaskInfo.pattern[0].patternId);\n  } // props.setChoice(userTaskInfo.pattern[0].patternId);\n\n\n  var handleChange = function handleChange(event) {\n    setPattern(event.target.value);\n    props.setChoice(event.target.value);\n  };\n\n  return __jsx(\"div\", {\n    className: classes.home\n  }, __jsx(FormControl, {\n    className: classes.formControl\n  }, __jsx(InputLabel, {\n    id: \"demo-simple-select-label\"\n  }, \"Pattern\"), __jsx(Select, {\n    labelId: \"demo-simple-select-label\",\n    id: \"demo-simple-select\",\n    value: props.choice,\n    onChange: handleChange\n  }, userTaskInfo.pattern.map(function (pattern, index) {\n    return __jsx(MenuItem, {\n      key: index + \"_\" + pattern.patternName,\n      value: pattern.patternId\n    }, pattern.patternName);\n  }))));\n}","map":null,"metadata":{},"sourceType":"module"}