{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// データベースへの接続\n// import firebase from \"firebase/app\";\n// 認証周りやDB周りで必要なためimportしておく\nimport \"firebase/auth\";\nimport \"firebase/database\";\nimport { useMemo, useState, useEffect, useCallback } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { firebase } from \"./firebaseTest\";\nimport { login } from \"../../../modules/userModule\";\n\nconst useReduxFetch = () => {\n  const dispatch = useDispatch();\n  return dispatch;\n}; // カスタムフックにしておく\n\n\nconst useDatabase = () => {\n  const {\n    userId\n  } = useSelector(state => state.user);\n  const dispatch = useDispatch();\n  const {\n    0: check,\n    1: setCheck\n  } = useState(''); // 同じパスでは毎回同じ結果が得られるのでmemo化しておく\n  // return useMemo(() => firebase.database().ref(\"/sample\"), []);\n\n  const uid = firebase.auth().currentUser;\n\n  if (!!uid) {\n    if (userId == '') {\n      dispatch(login(uid.uid));\n      setCheck('check');\n      console.log('check');\n    }\n\n    console.log('DBF 1 userId');\n    console.log(userId);\n    return useMemo(() => firebase.database().ref(\"/users/\" + userId), []);\n  } // ここが原因。ここでuserId取得後にrefを更新できればいい\n\n\n  console.log('DBF 2 userId');\n  console.log(userId); // return useMemo(() => firebase.database().ref(\"/users/\" + userId), []);\n  // return useMemo(() => firebase.database().ref(\"/users/\" + uid.uid), []);\n}; //   データを取得する\n// hooksを使いたいのでカスタムhooksにしておく\n\n\nconst useFetchData = ref => {\n  const {\n    0: data,\n    1: setData\n  } = useState();\n  useEffect(() => {\n    // イベントリスナーを追加するにはonを使う\n    ref.on(\"value\", snapshot => {\n      // パスに対する全データを含むsnapshotが渡される\n      // ない場合はnullが返るので存在をチェックしておく\n      if (snapshot === null || snapshot === void 0 ? void 0 : snapshot.val()) {\n        setData(snapshot.val());\n        console.log('DBF data');\n        console.log(data);\n      }\n    });\n    return () => {\n      ref.off();\n    }; // refの変更に応じて再取得する\n    //   指定したパスのデータに対する更新をすべて検知するにはvalueを指定すれば良い。\n  }, [ref]); // データを返却する\n  // console.log(\"data\");\n  // console.log(data);\n\n  return {\n    data\n  };\n}; // 実際に呼び出す際はこちらを使う\n\n\nconst useFetchAllData = () => {\n  // refを取得して\n  const ref = useDatabase(); // ref渡してデータを取得する\n\n  return useFetchData(ref);\n}; // 登録処理\n// この登録はsetに渡した値での登録となる。\n// つまり、既存のデータも含めて渡してあげないと登録済みのデータが消える。\n\n\nconst useSetDocument = ref => {\n  const updateDocument = useCallback(document => {\n    // refについては前回の記事参照\n    // setに登録したいデータを渡してあげれば登録できる\n    ref.set(document);\n  }, [ref]);\n  return updateDocument;\n};\n\nconst useRegisterData = () => {\n  // 前回作ったuseDatabase()を使いref取得\n  const ref = useDatabase();\n  const setDocument = useSetDocument(ref); // 登録済みのデータを全部取得する\n\n  const {\n    data: registeredData\n  } = useFetchAllData();\n  const {\n    userTaskInfo\n  } = useSelector(state => state.tasks); // データを登録する関数を返却する\n  // 可能であればここの処理はそのままにして、引数でsteteを更新する処理を先に行いたい\n\n  const registerData = useCallback(registerData => {\n    // () => {\n    console.log(userTaskInfo); // ここでReduxに保管しているstateを更新する？\n    // dispatch(Register({ ...registerData }));\n    // 既存のデータと登録するkey-valueを合わせて登録関数に渡す\n\n    setDocument(_objectSpread(_objectSpread({}, registeredData), registerData)); // setDocument(userTaskInfo);\n  }, [setDocument, registeredData]); // 返した関数を利用することで、登録済みデータ全て+登録したいデータをDBに保管できる\n\n  return registerData;\n}; // 更新処理\n\n\nconst useUpdateDocument = ref => {\n  // ref.updateがObjectを受け取るので、Objectを引数に取る関数を定義\n  const updateDocument = useCallback(document => ref.update(document), [ref]);\n  return updateDocument;\n};\n\nconst useUpdateData = () => {\n  // setの時と同じくrefを取得して、\n  const ref = useDatabase(); // 関数呼び出して\n\n  const updateDocument = useUpdateDocument(ref); // 更新処理を作成する\n\n  const updateData = useCallback(registerData => {\n    updateDocument(registerData);\n  }, [updateDocument]);\n  return updateData;\n}; // 削除処理\n\n\nconst useRemoveDocument = ref => {\n  // 特に引数が必要ないのでただ呼び出すのみ\n  const deleteDocument = useCallback(document => ref.child(document).remove(), [ref]);\n  return deleteDocument;\n}; // set、updateと同じなので割愛\n\n\nconst useDelteData = () => {\n  const ref = useDatabase();\n  const removeDocument = useRemoveDocument(ref);\n  const deleteData = useCallback(deleteData => removeDocument(deleteData), [removeDocument]);\n  return deleteData;\n};\n\nexport { useFetchAllData, useRegisterData, useUpdateData, useDelteData };","map":{"version":3,"sources":["C:/Users/blelm/Desktop/AppCreate/habitPlan/src/components/test/firebaseTest/DBFetch.tsx"],"names":["useMemo","useState","useEffect","useCallback","useSelector","useDispatch","firebase","login","useReduxFetch","dispatch","useDatabase","userId","state","user","check","setCheck","uid","auth","currentUser","console","log","database","ref","useFetchData","data","setData","on","snapshot","val","off","useFetchAllData","useSetDocument","updateDocument","document","set","useRegisterData","setDocument","registeredData","userTaskInfo","tasks","registerData","useUpdateDocument","update","useUpdateData","updateData","useRemoveDocument","deleteDocument","child","remove","useDelteData","removeDocument","deleteData"],"mappings":";;;;;;AAAA;AAEA;AACA;AACA,OAAO,eAAP;AACA,OAAO,mBAAP;AACA,SAASA,OAAT,EAAkBC,QAAlB,EAA4BC,SAA5B,EAAuCC,WAAvC,QAA0D,OAA1D;AAEA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAIA,SAASC,QAAT,QAAyB,gBAAzB;AAUA,SAASC,KAAT,QAAsB,6BAAtB;;AAEA,MAAMC,aAAa,GAAG,MAAM;AACxB,QAAMC,QAAQ,GAAGJ,WAAW,EAA5B;AACA,SAAOI,QAAP;AACH,CAHD,C,CAKA;;;AACA,MAAOC,WAAW,GAAG,MAAM;AACvB,QAAM;AAAEC,IAAAA;AAAF,MAAaP,WAAW,CAAEQ,KAAD,IAAsBA,KAAK,CAACC,IAA7B,CAA9B;AACA,QAAMJ,QAAQ,GAAGJ,WAAW,EAA5B;AACA,QAAM;AAAA,OAACS,KAAD;AAAA,OAAOC;AAAP,MAAmBd,QAAQ,CAAC,EAAD,CAAjC,CAHuB,CAIvB;AACA;;AACA,QAAMe,GAAG,GAAGV,QAAQ,CAACW,IAAT,GAAgBC,WAA5B;;AACA,MAAG,CAAC,CAACF,GAAL,EAAS;AACL,QAAGL,MAAM,IAAE,EAAX,EAAc;AACVF,MAAAA,QAAQ,CAACF,KAAK,CAACS,GAAG,CAACA,GAAL,CAAN,CAAR;AACAD,MAAAA,QAAQ,CAAC,OAAD,CAAR;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACH;;AAEDD,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYT,MAAZ;AACA,WAAOX,OAAO,CAAC,MAAMM,QAAQ,CAACe,QAAT,GAAoBC,GAApB,CAAwB,YAAYX,MAApC,CAAP,EAAoD,EAApD,CAAd;AACH,GAjBsB,CAmBvB;;;AACAQ,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYT,MAAZ,EArBuB,CAsBvB;AACA;AACH,CAxBD,C,CA0BA;AACA;;;AACA,MAAMY,YAAY,GAAID,GAAD,IAAsC;AACvD,QAAM;AAAA,OAACE,IAAD;AAAA,OAAOC;AAAP,MAAkBxB,QAAQ,EAAhC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZ;AACAoB,IAAAA,GAAG,CAACI,EAAJ,CAAO,OAAP,EAAiBC,QAAD,IAAmB;AAC/B;AACA;AACA,UAAIA,QAAJ,aAAIA,QAAJ,uBAAIA,QAAQ,CAAEC,GAAV,EAAJ,EAAqB;AACjBH,QAAAA,OAAO,CAACE,QAAQ,CAACC,GAAT,EAAD,CAAP;AACAT,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAYI,IAAZ;AACH;AACJ,KARD;AASA,WAAO,MAAM;AACTF,MAAAA,GAAG,CAACO,GAAJ;AACH,KAFD,CAXY,CAcZ;AACA;AACH,GAhBQ,EAgBN,CAACP,GAAD,CAhBM,CAAT,CAFuD,CAmBvD;AACA;AACA;;AACA,SAAO;AAAEE,IAAAA;AAAF,GAAP;AACH,CAvBD,C,CAyBA;;;AACA,MAAMM,eAAe,GAAG,MAAM;AAC1B;AACA,QAAMR,GAAG,GAAGZ,WAAW,EAAvB,CAF0B,CAG1B;;AACA,SAAOa,YAAY,CAACD,GAAD,CAAnB;AACH,CALD,C,CAOA;AACA;AACA;;;AACA,MAAMS,cAAc,GAAIT,GAAD,IAAsC;AACzD,QAAMU,cAAc,GAAG7B,WAAW,CAC7B8B,QAAD,IAAuB;AACnB;AACA;AACAX,IAAAA,GAAG,CAACY,GAAJ,CAAQD,QAAR;AACH,GAL6B,EAM9B,CAACX,GAAD,CAN8B,CAAlC;AAQA,SAAOU,cAAP;AACH,CAVD;;AAYA,MAAMG,eAAe,GAAG,MAAM;AAC1B;AACA,QAAMb,GAAG,GAAGZ,WAAW,EAAvB;AACA,QAAM0B,WAAW,GAAGL,cAAc,CAACT,GAAD,CAAlC,CAH0B,CAI1B;;AACA,QAAM;AAAEE,IAAAA,IAAI,EAAEa;AAAR,MAA2BP,eAAe,EAAhD;AACA,QAAM;AAAEQ,IAAAA;AAAF,MAAmBlC,WAAW,CAAEQ,KAAD,IAAsBA,KAAK,CAAC2B,KAA7B,CAApC,CAN0B,CAO1B;AAEA;;AACA,QAAMC,YAAY,GAAGrC,WAAW,CAC3BqC,YAAD,IAA6C;AACzC;AACIrB,IAAAA,OAAO,CAACC,GAAR,CAAYkB,YAAZ,EAFqC,CAGzC;AACA;AACA;;AACAF,IAAAA,WAAW,iCAAMC,cAAN,GAAyBG,YAAzB,EAAX,CANyC,CAOzC;AACH,GAT2B,EAU5B,CAACJ,WAAD,EAAcC,cAAd,CAV4B,CAAhC,CAV0B,CAuB1B;;AACA,SAAOG,YAAP;AACH,CAzBD,C,CA2BA;;;AACA,MAAMC,iBAAiB,GAAInB,GAAD,IAAsC;AAC5D;AACA,QAAMU,cAAc,GAAG7B,WAAW,CAC7B8B,QAAD,IAAsBX,GAAG,CAACoB,MAAJ,CAAWT,QAAX,CADQ,EAE9B,CAACX,GAAD,CAF8B,CAAlC;AAIA,SAAOU,cAAP;AACH,CAPD;;AASA,MAAMW,aAAa,GAAG,MAAM;AACxB;AACA,QAAMrB,GAAG,GAAGZ,WAAW,EAAvB,CAFwB,CAGxB;;AACA,QAAMsB,cAAc,GAAGS,iBAAiB,CAACnB,GAAD,CAAxC,CAJwB,CAKxB;;AACA,QAAMsB,UAAU,GAAGzC,WAAW,CACzBqC,YAAD,IAA6C;AACzCR,IAAAA,cAAc,CAACQ,YAAD,CAAd;AACH,GAHyB,EAI1B,CAACR,cAAD,CAJ0B,CAA9B;AAMA,SAAOY,UAAP;AACH,CAbD,C,CAeA;;;AACA,MAAMC,iBAAiB,GAAIvB,GAAD,IAAsC;AAC5D;AACA,QAAMwB,cAAc,GAAG3C,WAAW,CAC7B8B,QAAD,IAAsBX,GAAG,CAACyB,KAAJ,CAAUd,QAAV,EAAoBe,MAApB,EADQ,EAE9B,CAAC1B,GAAD,CAF8B,CAAlC;AAIA,SAAOwB,cAAP;AACH,CAPD,C,CAQA;;;AACA,MAAMG,YAAY,GAAG,MAAM;AACvB,QAAM3B,GAAG,GAAGZ,WAAW,EAAvB;AACA,QAAMwC,cAAc,GAAGL,iBAAiB,CAACvB,GAAD,CAAxC;AACA,QAAM6B,UAAU,GAAGhD,WAAW,CACzBgD,UAAD,IAAwBD,cAAc,CAACC,UAAD,CADZ,EAE1B,CAACD,cAAD,CAF0B,CAA9B;AAIA,SAAOC,UAAP;AACH,CARD;;AAUA,SAASrB,eAAT,EAA0BK,eAA1B,EAA2CQ,aAA3C,EAA0DM,YAA1D","sourcesContent":["// データベースへの接続\r\n\r\n// import firebase from \"firebase/app\";\r\n// 認証周りやDB周りで必要なためimportしておく\r\nimport \"firebase/auth\";\r\nimport \"firebase/database\";\r\nimport { useMemo, useState, useEffect, useCallback } from \"react\";\r\n\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { RootState } from \"../../../modules/rootReducer\";\r\nimport { Register } from \"../../../modules/tasksModule\";\r\n\r\nimport { firebase } from \"./firebaseTest\";\r\n\r\nimport {\r\n    calendar,\r\n    pattern,\r\n    tasks,\r\n    userTask,\r\n    userTaskInfo,\r\n} from \"../../../modules/userTasksType\";\r\nimport { useTabContext } from \"@material-ui/lab\";\r\nimport { login } from \"../../../modules/userModule\";\r\n\r\nconst useReduxFetch = () => {\r\n    const dispatch = useDispatch();\r\n    return dispatch;\r\n};\r\n\r\n// カスタムフックにしておく\r\nconst  useDatabase = () => {\r\n    const { userId } = useSelector((state: RootState) => state.user);\r\n    const dispatch = useDispatch();\r\n    const [check,setCheck] = useState('');\r\n    // 同じパスでは毎回同じ結果が得られるのでmemo化しておく\r\n    // return useMemo(() => firebase.database().ref(\"/sample\"), []);\r\n    const uid = firebase.auth().currentUser;\r\n    if(!!uid){\r\n        if(userId==''){\r\n            dispatch(login(uid.uid));\r\n            setCheck('check');\r\n            console.log('check');\r\n        }\r\n        \r\n        console.log('DBF 1 userId');\r\n        console.log(userId);\r\n        return useMemo(() => firebase.database().ref(\"/users/\" + userId), []);\r\n    }\r\n    \r\n    // ここが原因。ここでuserId取得後にrefを更新できればいい\r\n    console.log('DBF 2 userId');\r\n    console.log(userId);\r\n    // return useMemo(() => firebase.database().ref(\"/users/\" + userId), []);\r\n    // return useMemo(() => firebase.database().ref(\"/users/\" + uid.uid), []);\r\n};\r\n\r\n//   データを取得する\r\n// hooksを使いたいのでカスタムhooksにしておく\r\nconst useFetchData = (ref: firebase.database.Reference) => {\r\n    const [data, setData] = useState<userTaskInfo>();\r\n    useEffect(() => {\r\n        // イベントリスナーを追加するにはonを使う\r\n        ref.on(\"value\", (snapshot: any) => {\r\n            // パスに対する全データを含むsnapshotが渡される\r\n            // ない場合はnullが返るので存在をチェックしておく\r\n            if (snapshot?.val()) {\r\n                setData(snapshot.val());\r\n                console.log('DBF data');\r\n                console.log(data);\r\n            }\r\n        });\r\n        return () => {\r\n            ref.off();\r\n        };\r\n        // refの変更に応じて再取得する\r\n        //   指定したパスのデータに対する更新をすべて検知するにはvalueを指定すれば良い。\r\n    }, [ref]);\r\n    // データを返却する\r\n    // console.log(\"data\");\r\n    // console.log(data);\r\n    return { data };\r\n};\r\n\r\n// 実際に呼び出す際はこちらを使う\r\nconst useFetchAllData = () => {\r\n    // refを取得して\r\n    const ref = useDatabase();\r\n    // ref渡してデータを取得する\r\n    return useFetchData(ref);\r\n};\r\n\r\n// 登録処理\r\n// この登録はsetに渡した値での登録となる。\r\n// つまり、既存のデータも含めて渡してあげないと登録済みのデータが消える。\r\nconst useSetDocument = (ref: firebase.database.Reference) => {\r\n    const updateDocument = useCallback(\r\n        (document: unknown) => {\r\n            // refについては前回の記事参照\r\n            // setに登録したいデータを渡してあげれば登録できる\r\n            ref.set(document);\r\n        },\r\n        [ref]\r\n    );\r\n    return updateDocument;\r\n};\r\n\r\nconst useRegisterData = () => {\r\n    // 前回作ったuseDatabase()を使いref取得\r\n    const ref = useDatabase();\r\n    const setDocument = useSetDocument(ref);\r\n    // 登録済みのデータを全部取得する\r\n    const { data: registeredData } = useFetchAllData();\r\n    const { userTaskInfo } = useSelector((state: RootState) => state.tasks);\r\n    // データを登録する関数を返却する\r\n    \r\n    // 可能であればここの処理はそのままにして、引数でsteteを更新する処理を先に行いたい\r\n    const registerData = useCallback(\r\n        (registerData: { [key: string]: string }) => {\r\n            // () => {\r\n                console.log(userTaskInfo);\r\n            // ここでReduxに保管しているstateを更新する？\r\n            // dispatch(Register({ ...registerData }));\r\n            // 既存のデータと登録するkey-valueを合わせて登録関数に渡す\r\n            setDocument({ ...registeredData, ...registerData });\r\n            // setDocument(userTaskInfo);\r\n        },\r\n        [setDocument, registeredData]\r\n    );\r\n\r\n    // 返した関数を利用することで、登録済みデータ全て+登録したいデータをDBに保管できる\r\n    return registerData;\r\n};\r\n\r\n// 更新処理\r\nconst useUpdateDocument = (ref: firebase.database.Reference) => {\r\n    // ref.updateがObjectを受け取るので、Objectを引数に取る関数を定義\r\n    const updateDocument = useCallback(\r\n        (document: Object) => ref.update(document),\r\n        [ref]\r\n    );\r\n    return updateDocument;\r\n};\r\n\r\nconst useUpdateData = () => {\r\n    // setの時と同じくrefを取得して、\r\n    const ref = useDatabase();\r\n    // 関数呼び出して\r\n    const updateDocument = useUpdateDocument(ref);\r\n    // 更新処理を作成する\r\n    const updateData = useCallback(\r\n        (registerData: { [key: string]: string }) => {\r\n            updateDocument(registerData);\r\n        },\r\n        [updateDocument]\r\n    );\r\n    return updateData;\r\n};\r\n\r\n// 削除処理\r\nconst useRemoveDocument = (ref: firebase.database.Reference) => {\r\n    // 特に引数が必要ないのでただ呼び出すのみ\r\n    const deleteDocument = useCallback(\r\n        (document: string) => ref.child(document).remove(),\r\n        [ref]\r\n    );\r\n    return deleteDocument;\r\n};\r\n// set、updateと同じなので割愛\r\nconst useDelteData = () => {\r\n    const ref = useDatabase();\r\n    const removeDocument = useRemoveDocument(ref);\r\n    const deleteData = useCallback(\r\n        (deleteData: string) => removeDocument(deleteData),\r\n        [removeDocument]\r\n    );\r\n    return deleteData;\r\n};\r\n\r\nexport { useFetchAllData, useRegisterData, useUpdateData, useDelteData };\r\n"]},"metadata":{},"sourceType":"module"}