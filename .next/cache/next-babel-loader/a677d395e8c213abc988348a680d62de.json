{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\blelm\\\\Desktop\\\\AppCreate\\\\habitPlan\\\\src\\\\components\\\\test\\\\firebaseTest\\\\getData.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useMemo } from 'react';\nimport { useFetchAllData } from './DBFetch';\n// 認証周りやDB周りで必要なためimportしておく\nimport \"firebase/auth\";\nimport \"firebase/database\";\nimport { useSelector } from 'react-redux';\nexport default function ListComponent() {\n  _s();\n\n  // dataを取ってくる\n  var _useFetchAllData = useFetchAllData(),\n      data = _useFetchAllData.data; // ここでstateを使うならログイン時にDBから取得したデータをReduxに保管する必要がある。\n\n\n  var _useSelector = useSelector(function (state) {\n    return state.tasks;\n  }),\n      userTaskInfo = _useSelector.userTaskInfo;\n\n  console.log('userTaskInfo');\n  console.log(userTaskInfo); // data ? console.log(data.userTaskInfo) : console.log('noo');\n  // object形式なので使いやすいように{key, value}形式のリストに変換する\n  // また、データが変わらない限り結果は同じなのでメモ化しておく\n\n  var dataList = useMemo(function () {\n    return Object.entries(data || {}).map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          value = _ref2[1];\n\n      return {\n        key: key,\n        value: value\n      };\n    });\n  }, [data]);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 10\n    }\n  }, userTaskInfo.calendar[0].PatternId); // <dl>{dataList.map(({ key, value }) =>\n  //   <React.Fragment key={`${key}${value}`}>\n  //     <dt>key: {key}</dt>\n  //     <dt>value: {value}</dt>\n  //   </React.Fragment>\n  // )}</dl>\n}\n\n_s(ListComponent, \"qsHHbD+bouLv+R1poM3imOy49Ko=\", false, function () {\n  return [useFetchAllData, useSelector];\n});\n\n_c = ListComponent;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListComponent\");","map":{"version":3,"sources":["C:/Users/blelm/Desktop/AppCreate/habitPlan/src/components/test/firebaseTest/getData.tsx"],"names":["React","useMemo","useFetchAllData","useSelector","ListComponent","data","state","tasks","userTaskInfo","console","log","dataList","Object","entries","map","key","value","calendar","PatternId"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,SAASC,eAAT,QAAgC,WAAhC;AAEA;AACA,OAAO,eAAP;AACA,OAAO,mBAAP;AACA,SAASC,WAAT,QAA4B,aAA5B;AAGA,eAAe,SAASC,aAAT,GAAyB;AAAA;;AACpC;AADoC,yBAErBF,eAAe,EAFM;AAAA,MAE9BG,IAF8B,oBAE9BA,IAF8B,EAItC;;;AAJsC,qBAKbF,WAAW,CAAC,UAACG,KAAD;AAAA,WAAsBA,KAAK,CAACC,KAA5B;AAAA,GAAD,CALE;AAAA,MAK9BC,YAL8B,gBAK9BA,YAL8B;;AAOtCC,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYF,YAAZ,EARsC,CAStC;AACE;AACA;;AACF,MAAMG,QAAQ,GAAGV,OAAO,CAAC;AAAA,WAAMW,MAAM,CAACC,OAAP,CAAeR,IAAI,IAAI,EAAvB,EAA2BS,GAA3B,CAA+B;AAAA;AAAA,UAAEC,GAAF;AAAA,UAAOC,KAAP;;AAAA,aAAmB;AAAED,QAAAA,GAAG,EAAHA,GAAF;AAAOC,QAAAA,KAAK,EAALA;AAAP,OAAnB;AAAA,KAA/B,CAAN;AAAA,GAAD,EAA2E,CAACX,IAAD,CAA3E,CAAxB;AAEA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMG,YAAY,CAACS,QAAb,CAAsB,CAAtB,EAAyBC,SAA/B,CAAP,CAdsC,CAetC;AACA;AACA;AACA;AACA;AACA;AACD;;GArBuBd,a;UAELF,e,EAGQC,W;;;KALHC,a;AAqBvB","sourcesContent":["import React, { useMemo } from 'react';\r\nimport { useFetchAllData } from './DBFetch';\r\nimport firebase from \"firebase/app\";\r\n// 認証周りやDB周りで必要なためimportしておく\r\nimport \"firebase/auth\";\r\nimport \"firebase/database\";\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../../../modules/rootReducer';\r\n\r\nexport default function ListComponent() {\r\n    // dataを取ってくる\r\n  const { data } = useFetchAllData();\r\n\r\n  // ここでstateを使うならログイン時にDBから取得したデータをReduxに保管する必要がある。\r\n  const { userTaskInfo } = useSelector((state: RootState) => state.tasks);\r\n\r\n  console.log('userTaskInfo');\r\n  console.log(userTaskInfo);\r\n  // data ? console.log(data.userTaskInfo) : console.log('noo');\r\n    // object形式なので使いやすいように{key, value}形式のリストに変換する\r\n    // また、データが変わらない限り結果は同じなのでメモ化しておく\r\n  const dataList = useMemo(() => Object.entries(data || {}).map(([key, value]) => ({ key, value })), [data]);\r\n\r\n  return <div>{userTaskInfo.calendar[0].PatternId}</div>\r\n  // <dl>{dataList.map(({ key, value }) =>\r\n  //   <React.Fragment key={`${key}${value}`}>\r\n  //     <dt>key: {key}</dt>\r\n  //     <dt>value: {value}</dt>\r\n  //   </React.Fragment>\r\n  // )}</dl>\r\n};"]},"metadata":{},"sourceType":"module"}