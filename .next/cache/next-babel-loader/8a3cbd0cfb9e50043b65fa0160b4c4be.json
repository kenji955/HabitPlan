{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\blelm\\\\Desktop\\\\AppCreate\\\\habitPlan\\\\src\\\\components\\\\test\\\\Calendar3.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport format from \"date-fns/format\";\nimport getDate from \"date-fns/getDate\";\nimport getDay from \"date-fns/getDay\";\nimport isSameDay from \"date-fns/isSameDay\";\nimport eachDayOfInterval from \"date-fns/eachDayOfInterval\";\nimport endOfWeek from \"date-fns/endOfWeek\";\nimport eachWeekOfInterval from \"date-fns/eachWeekOfInterval\";\nimport addMonths from \"date-fns/addMonths\";\nimport subMonths from \"date-fns/subMonths\";\nimport startOfMonth from \"date-fns/startOfMonth\";\nimport endOfMonth from \"date-fns/endOfMonth\";\nimport isSameMonth from \"date-fns/isSameMonth\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Typography from \"@material-ui/core/Typography\";\nimport blue from \"@material-ui/core/colors/blue\";\nimport pink from \"@material-ui/core/colors/pink\";\nimport red from \"@material-ui/core/colors/red\";\nvar useStyles = makeStyles(function (theme) {\n  return {\n    paper: {\n      margin: theme.spacing(5, 10),\n      padding: theme.spacing(5, 5)\n    },\n    yearmonth: {\n      margin: theme.spacing(2, 0, 1, 0)\n    },\n    tableHead: {\n      color: theme.palette.secondary.contrastText,\n      backgroundColor: theme.palette.secondary.light\n    }\n  };\n});\nvar useCalendarCellStyles = makeStyles(function (theme) {\n  return {\n    calendarCell: {\n      color: function color(_ref) {\n        var wday = _ref.wday,\n            isTargetMonth = _ref.isTargetMonth;\n\n        if (isTargetMonth) {\n          switch (wday) {\n            case 0:\n              // Sunday\n              return red[500];\n\n            case 6:\n              // Saturday\n              return blue[500];\n\n            default:\n              return theme.palette.text.primary;\n          }\n        } else {\n          // previous or next month\n          switch (wday) {\n            case 0:\n              // Sunday\n              return red[200];\n\n            case 6:\n              // Saturday\n              return blue[200];\n\n            default:\n              return theme.palette.text.secondary;\n          }\n        }\n      },\n      backgroundColor: function backgroundColor(_ref2) {\n        var isToday = _ref2.isToday;\n        return isToday ? pink[50] : \"transparent\";\n      }\n    }\n  };\n});\n\nvar getCalendarArray = function getCalendarArray(date) {\n  var sundays = eachWeekOfInterval({\n    start: startOfMonth(date),\n    end: endOfMonth(date)\n  });\n  return sundays.map(function (sunday) {\n    return eachDayOfInterval({\n      start: sunday,\n      end: endOfWeek(sunday)\n    });\n  });\n};\n\nvar calendarCellClick = function calendarCellClick(dateData, dispatch, choice) {\n  return function () {\n    console.log(\"date:\" + dateData);\n    console.log(\"year:\" + dateData.getFullYear());\n    var year = dateData.getFullYear();\n    console.log(\"month:\" + (dateData.getMonth() + 1));\n    var month = dateData.getMonth() + 1;\n    console.log(\"dateData:\" + dateData.getDate());\n    var date = dateData.getDate();\n    dispatch(calendarPatternRegster([year, month, date, choice]));\n  };\n};\n\nfunction CalendarTableCell(props) {\n  _s();\n\n  var key = props.key,\n      wday = props.wday,\n      isTargetMonth = props.isTargetMonth,\n      isToday = props.isToday,\n      children = props.children,\n      dateData = props.dateData,\n      dispatch = props.dispatch,\n      choice = props.choice,\n      other = _objectWithoutProperties(props, [\"key\", \"wday\", \"isTargetMonth\", \"isToday\", \"children\", \"dateData\", \"dispatch\", \"choice\"]);\n\n  var classes = useCalendarCellStyles(props);\n  return __jsx(TableCell, _extends({\n    className: classes.calendarCell\n  }, other, {\n    onClick: calendarCellClick(dateData, dispatch, choice),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }), children);\n}\n\n_s(CalendarTableCell, \"ukLd6tf9xGCRm8TMTZd5+yrbOjY=\", false, function () {\n  return [useCalendarCellStyles];\n});\n\n_c = CalendarTableCell;\n\nfunction App(props) {\n  _s2();\n\n  var _this = this;\n\n  var _useState = useState(new Date()),\n      targetDate = _useState[0],\n      setTargetDate = _useState[1];\n\n  var classes = useStyles();\n  var calendar = getCalendarArray(targetDate);\n  var today = new Date();\n  var dispatch = useDispatch();\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, __jsx(CssBaseline, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  }), __jsx(Paper, {\n    className: classes.paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  }, __jsx(Grid, {\n    container: true,\n    justify: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }\n  }, __jsx(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    variant: \"outlined\",\n    onClick: function onClick() {\n      return setTargetDate(subMonths(targetDate, 1));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 25\n    }\n  }, \"\\u524D\\u306E\\u6708\")), __jsx(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    variant: \"outlined\",\n    onClick: function onClick() {\n      return setTargetDate(new Date());\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 25\n    }\n  }, \"\\u4ECA\\u6708\")), __jsx(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 21\n    }\n  }, __jsx(Button, {\n    variant: \"outlined\",\n    onClick: function onClick() {\n      return setTargetDate(addMonths(targetDate, 1));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 25\n    }\n  }, \"\\u6B21\\u306E\\u6708\"))), __jsx(Typography, {\n    variant: \"h4\",\n    align: \"center\",\n    className: classes.yearmonth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 17\n    }\n  }, format(targetDate, \"y年M月\")), __jsx(Table, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 17\n    }\n  }, __jsx(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 21\n    }\n  }, __jsx(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 25\n    }\n  }, __jsx(TableCell, {\n    align: \"center\",\n    classes: {\n      head: classes.tableHead\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 29\n    }\n  }, \"\\u65E5\"), __jsx(TableCell, {\n    align: \"center\",\n    classes: {\n      head: classes.tableHead\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 29\n    }\n  }, \"\\u6708\"), __jsx(TableCell, {\n    align: \"center\",\n    classes: {\n      head: classes.tableHead\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 29\n    }\n  }, \"\\u706B\"), __jsx(TableCell, {\n    align: \"center\",\n    classes: {\n      head: classes.tableHead\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 29\n    }\n  }, \"\\u6C34\"), __jsx(TableCell, {\n    align: \"center\",\n    classes: {\n      head: classes.tableHead\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 29\n    }\n  }, \"\\u6728\"), __jsx(TableCell, {\n    align: \"center\",\n    classes: {\n      head: classes.tableHead\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 29\n    }\n  }, \"\\u91D1\"), __jsx(TableCell, {\n    align: \"center\",\n    onClick: calendarCellClick,\n    classes: {\n      head: classes.tableHead\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 29\n    }\n  }, \"\\u571F\"))), __jsx(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 21\n    }\n  }, calendar.map(function (weekRow, rowNum) {\n    return __jsx(TableRow, {\n      key: rowNum,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 29\n      }\n    }, weekRow.map(function (date) {\n      return __jsx(CalendarTableCell, {\n        key: getDay(date),\n        wday: getDay(date),\n        isTargetMonth: isSameMonth(date, targetDate),\n        isToday: isSameDay(date, today),\n        dateData: date,\n        dispatch: dispatch,\n        choice: props.choice,\n        align: \"center\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 37\n        }\n      }, getDate(date));\n    }));\n  })))));\n}\n\n_s2(App, \"5G3dfyTvZ8y98bCsE8fgNe9dFos=\", false, function () {\n  return [useStyles, useDispatch];\n});\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CalendarTableCell\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["C:/Users/blelm/Desktop/AppCreate/habitPlan/src/components/test/Calendar3.jsx"],"names":["React","useState","useDispatch","useSelector","format","getDate","getDay","isSameDay","eachDayOfInterval","endOfWeek","eachWeekOfInterval","addMonths","subMonths","startOfMonth","endOfMonth","isSameMonth","makeStyles","CssBaseline","Button","Grid","Paper","Table","TableBody","TableCell","TableHead","TableRow","Typography","blue","pink","red","useStyles","theme","paper","margin","spacing","padding","yearmonth","tableHead","color","palette","secondary","contrastText","backgroundColor","light","useCalendarCellStyles","calendarCell","wday","isTargetMonth","text","primary","isToday","getCalendarArray","date","sundays","start","end","map","sunday","calendarCellClick","dateData","dispatch","choice","console","log","getFullYear","year","getMonth","month","calendarPatternRegster","CalendarTableCell","props","key","children","other","classes","App","Date","targetDate","setTargetDate","calendar","today","head","weekRow","rowNum"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport format from \"date-fns/format\";\r\nimport getDate from \"date-fns/getDate\";\r\nimport getDay from \"date-fns/getDay\";\r\nimport isSameDay from \"date-fns/isSameDay\";\r\nimport eachDayOfInterval from \"date-fns/eachDayOfInterval\";\r\nimport endOfWeek from \"date-fns/endOfWeek\";\r\nimport eachWeekOfInterval from \"date-fns/eachWeekOfInterval\";\r\nimport addMonths from \"date-fns/addMonths\";\r\nimport subMonths from \"date-fns/subMonths\";\r\nimport startOfMonth from \"date-fns/startOfMonth\";\r\nimport endOfMonth from \"date-fns/endOfMonth\";\r\nimport isSameMonth from \"date-fns/isSameMonth\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport blue from \"@material-ui/core/colors/blue\";\r\nimport pink from \"@material-ui/core/colors/pink\";\r\nimport red from \"@material-ui/core/colors/red\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        margin: theme.spacing(5, 10),\r\n        padding: theme.spacing(5, 5),\r\n    },\r\n    yearmonth: {\r\n        margin: theme.spacing(2, 0, 1, 0),\r\n    },\r\n    tableHead: {\r\n        color: theme.palette.secondary.contrastText,\r\n        backgroundColor: theme.palette.secondary.light,\r\n    },\r\n}));\r\n\r\nconst useCalendarCellStyles = makeStyles((theme) => ({\r\n    calendarCell: {\r\n        color: ({ wday, isTargetMonth }) => {\r\n            if (isTargetMonth) {\r\n                switch (wday) {\r\n                    case 0: // Sunday\r\n                        return red[500];\r\n                    case 6: // Saturday\r\n                        return blue[500];\r\n                    default:\r\n                        return theme.palette.text.primary;\r\n                }\r\n            } else {\r\n                // previous or next month\r\n                switch (wday) {\r\n                    case 0: // Sunday\r\n                        return red[200];\r\n                    case 6: // Saturday\r\n                        return blue[200];\r\n                    default:\r\n                        return theme.palette.text.secondary;\r\n                }\r\n            }\r\n        },\r\n        backgroundColor: ({ isToday }) => (isToday ? pink[50] : \"transparent\"),\r\n    },\r\n}));\r\n\r\nconst getCalendarArray = (date) => {\r\n    const sundays = eachWeekOfInterval({\r\n        start: startOfMonth(date),\r\n        end: endOfMonth(date),\r\n    });\r\n    return sundays.map((sunday) =>\r\n        eachDayOfInterval({ start: sunday, end: endOfWeek(sunday) })\r\n    );\r\n};\r\n\r\nconst calendarCellClick = (dateData,dispatch,choice) =>()=> {\r\n    console.log(\"date:\" + dateData);\r\n    console.log(\"year:\" + dateData.getFullYear());\r\n    const year = dateData.getFullYear();\r\n    console.log(\"month:\" + (dateData.getMonth() + 1));\r\n    const month = dateData.getMonth() + 1;\r\n    console.log(\"dateData:\" + dateData.getDate());\r\n    const date = dateData.getDate();\r\n    dispatch(calendarPatternRegster([year, month, date, choice]));\r\n};\r\n\r\nfunction CalendarTableCell(props) {\r\n    const { key, wday, isTargetMonth, isToday, children,dateData,dispatch,choice, ...other } = props;\r\n    const classes = useCalendarCellStyles(props);\r\n    return (\r\n        <TableCell\r\n            className={classes.calendarCell}\r\n            {...other}\r\n            onClick={calendarCellClick(dateData,dispatch,choice)}\r\n        >\r\n            {children}\r\n        </TableCell>\r\n    );\r\n}\r\n\r\nfunction App(props) {\r\n    const [targetDate, setTargetDate] = useState(new Date());\r\n    const classes = useStyles();\r\n    const calendar = getCalendarArray(targetDate);\r\n    const today = new Date();\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div>\r\n            <CssBaseline />\r\n            <Paper className={classes.paper}>\r\n                <Grid container justify=\"space-between\">\r\n                    <Grid item>\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            onClick={() =>\r\n                                setTargetDate(subMonths(targetDate, 1))\r\n                            }\r\n                        >\r\n                            前の月\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            onClick={() => setTargetDate(new Date())}\r\n                        >\r\n                            今月\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            onClick={() =>\r\n                                setTargetDate(addMonths(targetDate, 1))\r\n                            }\r\n                        >\r\n                            次の月\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n                <Typography\r\n                    variant=\"h4\"\r\n                    align=\"center\"\r\n                    className={classes.yearmonth}\r\n                >\r\n                    {format(targetDate, \"y年M月\")}\r\n                </Typography>\r\n                <Table>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell\r\n                                align=\"center\"\r\n                                classes={{ head: classes.tableHead }}\r\n                            >\r\n                                日\r\n                            </TableCell>\r\n                            <TableCell\r\n                                align=\"center\"\r\n                                classes={{ head: classes.tableHead }}\r\n                            >\r\n                                月\r\n                            </TableCell>\r\n                            <TableCell\r\n                                align=\"center\"\r\n                                classes={{ head: classes.tableHead }}\r\n                            >\r\n                                火\r\n                            </TableCell>\r\n                            <TableCell\r\n                                align=\"center\"\r\n                                classes={{ head: classes.tableHead }}\r\n                            >\r\n                                水\r\n                            </TableCell>\r\n                            <TableCell\r\n                                align=\"center\"\r\n                                classes={{ head: classes.tableHead }}\r\n                            >\r\n                                木\r\n                            </TableCell>\r\n                            <TableCell\r\n                                align=\"center\"\r\n                                classes={{ head: classes.tableHead }}\r\n                            >\r\n                                金\r\n                            </TableCell>\r\n                            <TableCell\r\n                                align=\"center\"\r\n                                onClick={calendarCellClick}\r\n                                classes={{ head: classes.tableHead }}\r\n                            >\r\n                                土\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {calendar.map((weekRow, rowNum) => (\r\n                            <TableRow key={rowNum}>\r\n                                {weekRow.map((date) => (\r\n                                    <CalendarTableCell\r\n                                        key={getDay(date)}\r\n                                        wday={getDay(date)}\r\n                                        isTargetMonth={isSameMonth(\r\n                                            date,\r\n                                            targetDate\r\n                                        )}\r\n                                        isToday={isSameDay(date, today)}\r\n                                        dateData={date}\r\n                                        dispatch={dispatch}\r\n                                        choice={props.choice}\r\n                                        align=\"center\"\r\n                                    >\r\n                                        {getDate(date)}\r\n                                    </CalendarTableCell>\r\n                                ))}\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </Paper>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}