{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CommentIcon from \"@material-ui/icons/Comment\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { taskCheckComplete } from \"../../modules/tasksModule\";\nimport { Accordion, AccordionSummary, Typography, AccordionDetails } from \"@material-ui/core\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nvar useStyles = makeStyles(function (theme) {\n  return createStyles({\n    roots: {\n      width: \"100%\",\n      maxWidth: 720,\n      margin: \"auto\",\n      backgroundColor: theme.palette.background.paper\n    },\n    AchievementList: {\n      display: 'inline-block'\n    }\n  });\n});\nexport default function CheckboxList() {\n  var classes = useStyles();\n\n  var _useState = useState([]),\n      checked = _useState[0],\n      setChecked = _useState[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.tasks;\n  }),\n      userTaskInfo = _useSelector.userTaskInfo;\n\n  var dispatch = useDispatch();\n  var year = new Date(\"Thu, 22 May 2020 02:00:00\").getFullYear();\n  var month = new Date(\"Thu, 22 May 2020 02:00:00\").getMonth() + 1;\n  var date = new Date(\"Thu, 22 May 2020 02:00:00\").getDate();\n\n  var handleToggle = function handleToggle(order) {\n    return function () {\n      var currentIndex = checked.indexOf(order);\n\n      var newChecked = _toConsumableArray(checked);\n\n      if (currentIndex === -1) {\n        newChecked.push(order);\n      } else {\n        newChecked.splice(currentIndex, 1);\n      }\n\n      setChecked(newChecked);\n      console.log('list' + order);\n      dispatch(taskCheckComplete([year, month, date, order]));\n    };\n  }; // ここで作成する機能はたくさんある。\n  // 日付とパターンIDを読み取ること\n  // いや、ここじゃないか？ここではカレンダーに格納されたタスクを読み取るだけで良いのでは？\n  // カレンダー画面でパターンを登録し、その時にタスクリストからパターンIDが合致するものだけ抽出して、該当する日付のカレンダー配列に格納する\n  // 一度シンプルに、カレンダー配列に格納されているタスクを読み取る機能を実装しよう\n  // const test = userTaskInfo.calendar.filter(function(value){\n  //   return value.year == year && value.month == month && value.date == date\n  // });\n  // const test = userTaskInfo.calendar[year][month][date]\n\n\n  var test = userTaskInfo.calendar;\n  console.log(test[year][month][22]); // let Achievement:[JSX.Element],NotAchieved:[JSX.Element];\n\n  var Achievement = test[year][month][22].tasks.filter(function (value) {\n    return value.flug == true;\n  });\n  console.log(\"Achievement\");\n  console.log(Achievement);\n  var NotAchieved = test[year][month][22].tasks.filter(function (value) {\n    return value.flug == false;\n  });\n  console.log(\"NotAchieved\");\n  console.log(NotAchieved);\n  return __jsx(List, {\n    className: classes.roots\n  }, NotAchieved.map(function (value, index) {\n    var labelId = \"checkbox-list-label-\".concat(value);\n    return __jsx(ListItem, {\n      key: year & month & date & value.order,\n      role: undefined,\n      dense: true,\n      button: true,\n      onClick: handleToggle(value.order)\n    }, __jsx(ListItemIcon, null, __jsx(Checkbox, {\n      edge: \"start\",\n      checked: value.flug // checked={checked.indexOf(index) !== -1}\n      ,\n      tabIndex: -1,\n      disableRipple: true,\n      inputProps: {\n        \"aria-labelledby\": labelId\n      }\n    })), __jsx(ListItemText, {\n      id: labelId,\n      primary: \"Line item \".concat(index + 1, \" \").concat(value.detail[\"testDetail1\"], \" & \").concat(value.detail[\"testDetail2\"], \" & \").concat(value.flug)\n    }), __jsx(ListItemSecondaryAction, null, __jsx(IconButton, {\n      edge: \"end\",\n      \"aria-label\": \"comments\"\n    }, __jsx(CommentIcon, null))));\n  }), __jsx(Accordion, null, __jsx(AccordionSummary, {\n    expandIcon: __jsx(ExpandMoreIcon, null),\n    \"aria-controls\": \"panel1a-content\",\n    id: \"panel1a-header\"\n  }, __jsx(Typography, null, \"\\u9054\\u6210\\u6E08\\u307F\")), __jsx(AccordionDetails, {\n    className: classes.AchievementList\n  }, Achievement.map(function (value, index) {\n    var labelId = \"checkbox-list-label-\".concat(value);\n    return __jsx(ListItem, {\n      key: year & month & date & value.order,\n      role: undefined,\n      dense: true,\n      button: true,\n      onClick: handleToggle(value.order)\n    }, __jsx(ListItemIcon, null, __jsx(Checkbox, {\n      edge: \"start\",\n      checked: value.flug // checked={checked.indexOf(index) !== -1}\n      ,\n      tabIndex: -1,\n      disableRipple: true,\n      inputProps: {\n        \"aria-labelledby\": labelId\n      }\n    })), __jsx(ListItemText, {\n      id: labelId,\n      primary: \"Line item \".concat(index + 1, \" \").concat(value.detail[\"testDetail1\"], \" & \").concat(value.detail[\"testDetail2\"], \" & \").concat(value.flug)\n    }), __jsx(ListItemSecondaryAction, null, __jsx(IconButton, {\n      edge: \"end\",\n      \"aria-label\": \"comments\"\n    }, __jsx(CommentIcon, null))));\n  })))) // <List className={classes.roots}>\n  //   {[0, 1, 2, 3].map((value) => {\n  //     const labelId = `checkbox-list-label-${value}`;\n  //     return (\n  //       <ListItem key={value} role={undefined} dense button onClick={handleToggle(value)}>\n  //         <ListItemIcon>\n  //           <Checkbox\n  //             edge=\"start\"\n  //             checked={checked.indexOf(value) !== -1}\n  //             tabIndex={-1}\n  //             disableRipple\n  //             inputProps={{ 'aria-labelledby': labelId }}\n  //           />\n  //         </ListItemIcon>\n  //         <ListItemText id={labelId} primary={`Line item ${value + 1}`} />\n  //         <ListItemSecondaryAction>\n  //           <IconButton edge=\"end\" aria-label=\"comments\">\n  //           {/* <IconButton aria-label=\"comments\"> */}\n  //             <CommentIcon />\n  //           </IconButton>\n  //         </ListItemSecondaryAction>\n  //       </ListItem>\n  //     );\n  //   })}\n  // </List>\n  ;\n}","map":null,"metadata":{},"sourceType":"module"}