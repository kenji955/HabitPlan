{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { calendarPatternRegister } from \"../../modules/tasksModule\";\nimport { RootState } from \"../../modules/rootReducer\";\nimport format from \"date-fns/format\";\nimport getDate from \"date-fns/getDate\";\nimport getDay from \"date-fns/getDay\";\nimport isSameDay from \"date-fns/isSameDay\";\nimport eachDayOfInterval from \"date-fns/eachDayOfInterval\";\nimport endOfWeek from \"date-fns/endOfWeek\";\nimport eachWeekOfInterval from \"date-fns/eachWeekOfInterval\";\nimport addMonths from \"date-fns/addMonths\";\nimport subMonths from \"date-fns/subMonths\";\nimport startOfMonth from \"date-fns/startOfMonth\";\nimport endOfMonth from \"date-fns/endOfMonth\";\nimport isSameMonth from \"date-fns/isSameMonth\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Typography from \"@material-ui/core/Typography\";\nimport blue from \"@material-ui/core/colors/blue\";\nimport pink from \"@material-ui/core/colors/pink\";\nimport red from \"@material-ui/core/colors/red\";\nvar useStyles = makeStyles(function (theme) {\n  return {\n    paper: _defineProperty({\n      margin: theme.spacing(5, 10),\n      padding: theme.spacing(5, 5)\n    }, theme.breakpoints.down('sm'), {\n      width: '100%',\n      // paddingLeft: '240px',\n      margin: 'auto',\n      padding: 0\n    }),\n    yearmonth: {\n      margin: theme.spacing(2, 0, 1, 0)\n    },\n    tableHead: {\n      color: theme.palette.secondary.contrastText,\n      backgroundColor: theme.palette.secondary.light\n    }\n  };\n});\nvar useCalendarCellStyles = makeStyles(function (theme) {\n  return {\n    calendarCell: {\n      color: function color(_ref) {\n        var wday = _ref.wday,\n            isTargetMonth = _ref.isTargetMonth;\n\n        if (isTargetMonth) {\n          switch (wday) {\n            case 0:\n              // Sunday\n              return red[500];\n\n            case 6:\n              // Saturday\n              return blue[500];\n\n            default:\n              return theme.palette.text.primary;\n          }\n        } else {\n          // previous or next month\n          switch (wday) {\n            case 0:\n              // Sunday\n              return red[200];\n\n            case 6:\n              // Saturday\n              return blue[200];\n\n            default:\n              return theme.palette.text.secondary;\n          }\n        }\n      },\n      backgroundColor: function backgroundColor(_ref2) {\n        var isToday = _ref2.isToday;\n        return isToday ? pink[50] : \"transparent\";\n      }\n    }\n  };\n});\n\nvar getCalendarArray = function getCalendarArray(date) {\n  var sundays = eachWeekOfInterval({\n    start: startOfMonth(date),\n    end: endOfMonth(date)\n  });\n  return sundays.map(function (sunday) {\n    return eachDayOfInterval({\n      start: sunday,\n      end: endOfWeek(sunday)\n    });\n  });\n};\n\nvar calendarCellClick = function calendarCellClick(dateData, dispatch, choice) {\n  return function () {\n    var year = dateData.getFullYear();\n    var month = dateData.getMonth() + 1;\n    var date = dateData.getDate();\n    console.log('year');\n    console.log(year);\n    console.log('month');\n    console.log(month);\n    console.log('date');\n    console.log(date);\n    dispatch(calendarPatternRegister([year, month, date, choice]));\n  };\n}; // カレンダー欄に設定されているパターンIDを表示させるための関数\n\n\nfunction PatternRegistrationStatus(dateData, userTaskInfo) {\n  var year = dateData.getFullYear();\n  var month = dateData.getMonth() + 1;\n  var date = dateData.getDate(); // console.log(\"チェック：\" + date + \":\" + month + \":\" + year);\n  // console.log(\"チェック2\");\n  // console.log(userTaskInfo.calendar[year]);\n\n  if ([year] in userTaskInfo.calendar) {\n    if ([month] in userTaskInfo.calendar[year]) {\n      if ([date] in userTaskInfo.calendar[year][month]) {\n        console.log('day');\n        console.log(year + \"/\" + month + \"/\" + date);\n        console.log(\"PatternId：\" + userTaskInfo.calendar[year][month][date].PatternId);\n        return userTaskInfo.calendar[year][month][date].PatternId;\n      }\n    }\n  } // console.log(\"なし：\" + date);\n\n\n  return \"×\";\n}\n\nfunction CalendarTableCell(props) {\n  var keyProps = props.keyProps,\n      wday = props.wday,\n      isTargetMonth = props.isTargetMonth,\n      isToday = props.isToday,\n      children = props.children,\n      dateData = props.dateData,\n      dispatch = props.dispatch,\n      choice = props.choice,\n      other = _objectWithoutProperties(props, [\"keyProps\", \"wday\", \"isTargetMonth\", \"isToday\", \"children\", \"dateData\", \"dispatch\", \"choice\"]);\n\n  var classes = useCalendarCellStyles(props);\n  return __jsx(TableCell, _extends({\n    key: keyProps,\n    className: classes.calendarCell\n  }, other, {\n    onClick: calendarCellClick(dateData, dispatch, choice)\n  }), children);\n}\n\nfunction App(props) {\n  var _useState = useState(new Date()),\n      targetDate = _useState[0],\n      setTargetDate = _useState[1];\n\n  var classes = useStyles();\n  var calendar = getCalendarArray(targetDate);\n  var today = new Date();\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.tasks;\n  }),\n      userTaskInfo = _useSelector.userTaskInfo;\n\n  return __jsx(\"div\", null, __jsx(CssBaseline, null), __jsx(Paper, {\n    className: classes.paper\n  }, __jsx(Grid, {\n    container: true,\n    justify: \"space-between\"\n  }, __jsx(Grid, {\n    item: true\n  }, __jsx(Button, {\n    variant: \"outlined\",\n    onClick: function onClick() {\n      return setTargetDate(subMonths(targetDate, 1));\n    }\n  }, \"\\u524D\\u306E\\u6708\")), __jsx(Grid, {\n    item: true\n  }, __jsx(Button, {\n    variant: \"outlined\",\n    onClick: function onClick() {\n      return setTargetDate(new Date());\n    }\n  }, \"\\u4ECA\\u6708\")), __jsx(Grid, {\n    item: true\n  }, __jsx(Button, {\n    variant: \"outlined\",\n    onClick: function onClick() {\n      return setTargetDate(addMonths(targetDate, 1));\n    }\n  }, \"\\u6B21\\u306E\\u6708\"))), __jsx(Typography, {\n    variant: \"h4\",\n    align: \"center\",\n    className: classes.yearmonth\n  }, format(targetDate, \"y年M月\")), __jsx(Table, null, __jsx(TableHead, null, __jsx(TableRow, null, __jsx(TableCell, {\n    align: \"center\",\n    classes: {\n      head: classes.tableHead\n    }\n  }, \"\\u65E5\"), __jsx(TableCell, {\n    align: \"center\",\n    classes: {\n      head: classes.tableHead\n    }\n  }, \"\\u6708\"), __jsx(TableCell, {\n    align: \"center\",\n    classes: {\n      head: classes.tableHead\n    }\n  }, \"\\u706B\"), __jsx(TableCell, {\n    align: \"center\",\n    classes: {\n      head: classes.tableHead\n    }\n  }, \"\\u6C34\"), __jsx(TableCell, {\n    align: \"center\",\n    classes: {\n      head: classes.tableHead\n    }\n  }, \"\\u6728\"), __jsx(TableCell, {\n    align: \"center\",\n    classes: {\n      head: classes.tableHead\n    }\n  }, \"\\u91D1\"), __jsx(TableCell, {\n    align: \"center\",\n    onClick: calendarCellClick,\n    classes: {\n      head: classes.tableHead\n    }\n  }, \"\\u571F\"))), __jsx(TableBody, null, calendar.map(function (weekRow, rowNum) {\n    return __jsx(TableRow, {\n      key: 'tableRow_' + rowNum\n    }, weekRow.map(function (date, index) {\n      return __jsx(CalendarTableCell, {\n        key: 'CalendarTableCell_' + rowNum + \"_\" + index,\n        keyProps: getDay(date) + '_' + rowNum + \"_\" + index,\n        wday: getDay(date),\n        isTargetMonth: isSameMonth(date, targetDate),\n        isToday: isSameDay(date, today),\n        dateData: date,\n        dispatch: dispatch,\n        choice: props.choice,\n        align: \"center\"\n      }, getDate(date), __jsx(\"br\", null), PatternRegistrationStatus(date, userTaskInfo));\n    }));\n  })))));\n}\n\nexport default App;","map":null,"metadata":{},"sourceType":"module"}