{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\blelm\\\\Desktop\\\\AppCreate\\\\habitPlan\\\\src\\\\components\\\\view\\\\TaskList.tsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CommentIcon from \"@material-ui/icons/Comment\";\nimport RemoveCircleIcon from \"@material-ui/icons/RemoveCircle\";\nimport TaskModal from \"./TaskModal\";\nimport TaskPlus from \"./taskPlus\";\nimport Menu from \"./Menu\";\nimport { useDispatch, useSelector } from \"react-redux\";\nconst useStyles = makeStyles(theme => createStyles({\n  roots: {\n    width: \"100%\",\n    maxWidth: 720,\n    margin: \"auto\",\n    backgroundColor: theme.palette.background.paper\n  },\n  icon: {\n    display: \"flex\",\n    margin: \"10px auto 5px auto\"\n  },\n  paper: {\n    border: \"1px solid\",\n    padding: theme.spacing(1),\n    backgroundColor: theme.palette.background.paper\n  }\n}));\nexport default function CheckboxList() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const [open, setOpen] = React.useState(9999);\n  const [openMenu, setOpenMune] = React.useState(9999);\n  const {\n    userTaskInfo\n  } = useSelector(state => state.tasks);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  const handleClick = value => event => {\n    setAnchorEl(event.currentTarget);\n    setOpenMune(value);\n    console.log(\"openMenu:\" + openMenu);\n  };\n\n  const handleToggle = value => () => {\n    setOpen(value);\n    console.log(\"open:\" + open);\n  };\n\n  const deleteTaskHandler = index => () => {\n    console.log(\"check deleteTaskHandler\"); // dispatch(taskDelete(index));\n  };\n\n  return __jsx(List, {\n    className: classes.roots,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, userTaskInfo.tasks.map((task, index) => {\n    const labelId = `checkbox-list-label-${task.detail[\"testDetail1\"]}`;\n    return (// <Box key={labelId + \"_\" + index}>\n      __jsx(ListItem, {\n        key: task.detail[\"title\"] + \":\" + index,\n        role: undefined,\n        dense: true,\n        button: true,\n        onClick: handleToggle(index),\n        divider: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 25\n        }\n      }, __jsx(ListItemText, {\n        id: labelId,\n        primary: __jsx(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 42\n          }\n        }, task.detail[\"タスク名\"]) // disableTypography={false}\n        ,\n        primaryTypographyProps: {\n          component: 'span'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 29\n        }\n      }), __jsx(ListItemSecondaryAction, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 29\n        }\n      }, __jsx(TaskModal, {\n        open: open,\n        setOpen: setOpen,\n        task: task,\n        index: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 33\n        }\n      }), __jsx(IconButton, {\n        edge: \"end\",\n        \"aria-label\": \"comments\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 33\n        }\n      }, __jsx(CommentIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 37\n        }\n      })), __jsx(IconButton, {\n        edge: \"end\",\n        \"aria-label\": \"comments\",\n        onClick: handleClick(index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 33\n        }\n      }, __jsx(RemoveCircleIcon, {\n        color: \"secondary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 37\n        }\n      })), __jsx(Menu, {\n        openMenu: openMenu,\n        setOpenMune: setOpenMune,\n        anchorEl: anchorEl,\n        deleteTaskHandler: deleteTaskHandler,\n        index: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 33\n        }\n      }))) // <Divider />\n      // </Box>\n\n    );\n  }), __jsx(TaskPlus, {\n    num: userTaskInfo.tasks.length + 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/blelm/Desktop/AppCreate/habitPlan/src/components/view/TaskList.tsx"],"names":["React","createStyles","makeStyles","List","ListItem","ListItemSecondaryAction","ListItemText","IconButton","CommentIcon","RemoveCircleIcon","TaskModal","TaskPlus","Menu","useDispatch","useSelector","useStyles","theme","roots","width","maxWidth","margin","backgroundColor","palette","background","paper","icon","display","border","padding","spacing","CheckboxList","classes","dispatch","open","setOpen","useState","openMenu","setOpenMune","userTaskInfo","state","tasks","anchorEl","setAnchorEl","handleClick","value","event","currentTarget","console","log","handleToggle","deleteTaskHandler","index","map","task","labelId","detail","undefined","component","length"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Fade from \"@material-ui/core/Fade\";\r\nimport CommentIcon from \"@material-ui/icons/Comment\";\r\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport RemoveCircleIcon from \"@material-ui/icons/RemoveCircle\";\r\n\r\nimport TaskModal from \"./TaskModal\";\r\nimport TaskPlus from \"./taskPlus\";\r\nimport Menu from \"./Menu\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { taskDelete } from \"../../modules/tasksModule\";\r\nimport { RootState } from \"../../modules/rootReducer\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        roots: {\r\n            width: \"100%\",\r\n            maxWidth: 720,\r\n            margin: \"auto\",\r\n            backgroundColor: theme.palette.background.paper,\r\n        },\r\n        icon: {\r\n            display: \"flex\",\r\n            margin: \"10px auto 5px auto\",\r\n        },\r\n        paper: {\r\n            border: \"1px solid\",\r\n            padding: theme.spacing(1),\r\n            backgroundColor: theme.palette.background.paper,\r\n        },\r\n    })\r\n);\r\n\r\nexport default function CheckboxList() {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const [open, setOpen] = React.useState(9999);\r\n    const [openMenu, setOpenMune] = React.useState(9999);\r\n    const { userTaskInfo } = useSelector((state: RootState) => state.tasks);\r\n\r\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n\r\n    const handleClick = (value: number) => (event: {\r\n        currentTarget: React.SetStateAction<HTMLElement>;\r\n    }) => {\r\n        setAnchorEl(event.currentTarget);\r\n        setOpenMune(value);\r\n        console.log(\"openMenu:\" + openMenu);\r\n    };\r\n\r\n    const handleToggle = (value: number) => () => {\r\n        setOpen(value);\r\n        console.log(\"open:\" + open);\r\n    };\r\n\r\n    const deleteTaskHandler = (index: number) => () => {\r\n        console.log(\"check deleteTaskHandler\");\r\n        // dispatch(taskDelete(index));\r\n    };\r\n\r\n    return (\r\n        <List className={classes.roots}>\r\n            {userTaskInfo.tasks.map((task, index) => {\r\n                const labelId = `checkbox-list-label-${task.detail[\"testDetail1\"]}`;\r\n\r\n                return (\r\n                    // <Box key={labelId + \"_\" + index}>\r\n                        <ListItem\r\n                            key={task.detail[\"title\"] + \":\" + index}\r\n                            role={undefined}\r\n                            dense\r\n                            button\r\n                            onClick={handleToggle(index)}\r\n                            divider={true}\r\n                        >\r\n                            <ListItemText\r\n                                id={labelId}\r\n                                primary={<span>{task.detail[\"タスク名\"]}</span>}\r\n                                // disableTypography={false}\r\n                                primaryTypographyProps={{component:'span'}}\r\n                            />\r\n                            <ListItemSecondaryAction>\r\n                                <TaskModal\r\n                                    open={open}\r\n                                    setOpen={setOpen}\r\n                                    task={task}\r\n                                    index={index}\r\n                                />\r\n                                <IconButton edge=\"end\" aria-label=\"comments\">\r\n                                    <CommentIcon />\r\n                                </IconButton>\r\n                                <IconButton\r\n                                    edge=\"end\"\r\n                                    aria-label=\"comments\"\r\n                                    onClick={handleClick(index)}\r\n                                >\r\n                                    <RemoveCircleIcon color=\"secondary\" />\r\n                                </IconButton>\r\n                                <Menu\r\n                                    openMenu={openMenu}\r\n                                    setOpenMune={setOpenMune}\r\n                                    anchorEl={anchorEl}\r\n                                    deleteTaskHandler={deleteTaskHandler}\r\n                                    index={index}\r\n                                />\r\n                            </ListItemSecondaryAction>\r\n                        </ListItem>\r\n                        // <Divider />\r\n                    // </Box>\r\n                );\r\n            })}\r\n            <TaskPlus num={userTaskInfo.tasks.length + 1} />\r\n        </List>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}