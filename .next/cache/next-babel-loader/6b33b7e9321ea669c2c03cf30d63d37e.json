{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\blelm\\\\Desktop\\\\AppCreate\\\\habitPlan\\\\src\\\\components\\\\view\\\\CheckBoxList.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CommentIcon from \"@material-ui/icons/Comment\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { taskCheckComplete } from \"../../modules/tasksModule\";\nimport { Accordion, AccordionSummary, Typography, AccordionDetails } from \"@material-ui/core\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nvar useStyles = makeStyles(function (theme) {\n  return createStyles({\n    roots: {\n      width: \"100%\",\n      maxWidth: 720,\n      margin: \"auto\",\n      backgroundColor: theme.palette.background.paper\n    },\n    AchievementList: {\n      display: 'inline-block'\n    }\n  });\n});\nexport default function CheckboxList() {\n  _s();\n\n  var _this = this;\n\n  var classes = useStyles();\n\n  var _useState = useState([]),\n      checked = _useState[0],\n      setChecked = _useState[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.tasks;\n  }),\n      userTaskInfo = _useSelector.userTaskInfo;\n\n  var dispatch = useDispatch();\n  var year = new Date(\"Thu, 22 May 2020 02:00:00\").getFullYear();\n  var month = new Date(\"Thu, 22 May 2020 02:00:00\").getMonth() + 1;\n  var date = new Date(\"Thu, 22 May 2020 02:00:00\").getDate();\n\n  var handleToggle = function handleToggle(order) {\n    return function () {\n      var currentIndex = checked.indexOf(order);\n\n      var newChecked = _toConsumableArray(checked);\n\n      if (currentIndex === -1) {\n        newChecked.push(order);\n      } else {\n        newChecked.splice(currentIndex, 1);\n      }\n\n      setChecked(newChecked);\n      dispatch(taskCheckComplete([year, month, date, order]));\n    };\n  }; // ここで作成する機能はたくさんある。\n  // 日付とパターンIDを読み取ること\n  // いや、ここじゃないか？ここではカレンダーに格納されたタスクを読み取るだけで良いのでは？\n  // カレンダー画面でパターンを登録し、その時にタスクリストからパターンIDが合致するものだけ抽出して、該当する日付のカレンダー配列に格納する\n  // 一度シンプルに、カレンダー配列に格納されているタスクを読み取る機能を実装しよう\n  // const test = userTaskInfo.calendar.filter(function(value){\n  //   return value.year == year && value.month == month && value.date == date\n  // });\n  // const test = userTaskInfo.calendar[year][month][date]\n\n\n  var test = userTaskInfo.calendar;\n  console.log(test[year][month][22]); // let Achievement:[JSX.Element],NotAchieved:[JSX.Element];\n\n  var Achievement = test[year][month][22].tasks.filter(function (value) {\n    return value.flug == true;\n  });\n  console.log(\"Achievement\");\n  console.log(Achievement);\n  var NotAchieved = test[year][month][22].tasks.filter(function (value) {\n    return value.flug == false;\n  });\n  console.log(\"NotAchieved\");\n  console.log(NotAchieved);\n  return __jsx(List, {\n    className: classes.roots,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, NotAchieved.map(function (value, index) {\n    var labelId = \"checkbox-list-label-\".concat(value);\n    return __jsx(ListItem, {\n      key: year & month & date & index,\n      role: undefined,\n      dense: true,\n      button: true,\n      onClick: handleToggle(value.order),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }\n    }, __jsx(ListItemIcon, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 25\n      }\n    }, __jsx(Checkbox, {\n      edge: \"start\",\n      checked: value.flug // checked={checked.indexOf(index) !== -1}\n      ,\n      tabIndex: -1,\n      disableRipple: true,\n      inputProps: {\n        \"aria-labelledby\": labelId\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 29\n      }\n    })), __jsx(ListItemText, {\n      id: labelId,\n      primary: \"Line item \".concat(index + 1, \" \").concat(value.detail1, \" & \").concat(value.detail2, \" & \").concat(value.flug),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 25\n      }\n    }), __jsx(ListItemSecondaryAction, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 25\n      }\n    }, __jsx(IconButton, {\n      edge: \"end\",\n      \"aria-label\": \"comments\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 29\n      }\n    }, __jsx(CommentIcon, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 33\n      }\n    }))));\n  }), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }\n  }, \"\\u9054\\u6210\\u6E08\\u307F\"), __jsx(Accordion, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }\n  }, __jsx(AccordionSummary, {\n    expandIcon: __jsx(ExpandMoreIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 33\n      }\n    }),\n    \"aria-controls\": \"panel1a-content\",\n    id: \"panel1a-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 17\n    }\n  }, __jsx(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 21\n    }\n  }, \"Accordion 1\")), __jsx(AccordionDetails, {\n    className: classes.AchievementList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 17\n    }\n  }, Achievement.map(function (value, index) {\n    var labelId = \"checkbox-list-label-\".concat(value);\n    return __jsx(ListItem, {\n      key: year & month & date & index,\n      role: undefined,\n      dense: true,\n      button: true,\n      onClick: handleToggle(value.order),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 29\n      }\n    }, __jsx(ListItemIcon, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 33\n      }\n    }, __jsx(Checkbox, {\n      edge: \"start\",\n      checked: value.flug // checked={checked.indexOf(index) !== -1}\n      ,\n      tabIndex: -1,\n      disableRipple: true,\n      inputProps: {\n        \"aria-labelledby\": labelId\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 37\n      }\n    })), __jsx(ListItemText, {\n      id: labelId,\n      primary: \"Line item \".concat(index + 1, \" \").concat(value.detail1, \" & \").concat(value.detail2, \" & \").concat(value.flug),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 33\n      }\n    }), __jsx(ListItemSecondaryAction, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 33\n      }\n    }, __jsx(IconButton, {\n      edge: \"end\",\n      \"aria-label\": \"comments\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 37\n      }\n    }, __jsx(CommentIcon, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 41\n      }\n    }))));\n  })))) // <List className={classes.roots}>\n  //   {[0, 1, 2, 3].map((value) => {\n  //     const labelId = `checkbox-list-label-${value}`;\n  //     return (\n  //       <ListItem key={value} role={undefined} dense button onClick={handleToggle(value)}>\n  //         <ListItemIcon>\n  //           <Checkbox\n  //             edge=\"start\"\n  //             checked={checked.indexOf(value) !== -1}\n  //             tabIndex={-1}\n  //             disableRipple\n  //             inputProps={{ 'aria-labelledby': labelId }}\n  //           />\n  //         </ListItemIcon>\n  //         <ListItemText id={labelId} primary={`Line item ${value + 1}`} />\n  //         <ListItemSecondaryAction>\n  //           <IconButton edge=\"end\" aria-label=\"comments\">\n  //           {/* <IconButton aria-label=\"comments\"> */}\n  //             <CommentIcon />\n  //           </IconButton>\n  //         </ListItemSecondaryAction>\n  //       </ListItem>\n  //     );\n  //   })}\n  // </List>\n  ;\n}\n\n_s(CheckboxList, \"jGxcTRXNqEfFn+uczUfALSv1UEg=\", false, function () {\n  return [useStyles, useSelector, useDispatch];\n});\n\n_c = CheckboxList;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckboxList\");","map":{"version":3,"sources":["C:/Users/blelm/Desktop/AppCreate/habitPlan/src/components/view/CheckBoxList.tsx"],"names":["React","useState","createStyles","makeStyles","List","ListItem","ListItemIcon","ListItemSecondaryAction","ListItemText","Checkbox","IconButton","CommentIcon","useDispatch","useSelector","taskCheckComplete","Accordion","AccordionSummary","Typography","AccordionDetails","ExpandMoreIcon","useStyles","theme","roots","width","maxWidth","margin","backgroundColor","palette","background","paper","AchievementList","display","CheckboxList","classes","checked","setChecked","state","tasks","userTaskInfo","dispatch","year","Date","getFullYear","month","getMonth","date","getDate","handleToggle","order","currentIndex","indexOf","newChecked","push","splice","test","calendar","console","log","Achievement","filter","value","flug","NotAchieved","map","index","labelId","undefined","detail1","detail2"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CommentIcon from \"@material-ui/icons/Comment\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../modules/rootReducer\";\r\nimport { taskCheckComplete } from \"../../modules/tasksModule\";\r\nimport { calendar } from \"../../modules/userTasksType\";\r\nimport {\r\n    Accordion,\r\n    AccordionSummary,\r\n    Typography,\r\n    AccordionDetails,\r\n} from \"@material-ui/core\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        roots: {\r\n            width: \"100%\",\r\n            maxWidth: 720,\r\n            margin: \"auto\",\r\n            backgroundColor: theme.palette.background.paper,\r\n        },\r\n        AchievementList:{\r\n          display:'inline-block',\r\n        }\r\n    })\r\n);\r\n\r\nexport default function CheckboxList() {\r\n    const classes = useStyles();\r\n    const [checked, setChecked] = useState([]);\r\n    const { userTaskInfo } = useSelector((state: RootState) => state.tasks);\r\n    const dispatch = useDispatch();\r\n    const year = new Date(\"Thu, 22 May 2020 02:00:00\").getFullYear();\r\n    const month = new Date(\"Thu, 22 May 2020 02:00:00\").getMonth() + 1;\r\n    const date = new Date(\"Thu, 22 May 2020 02:00:00\").getDate();\r\n\r\n    const handleToggle = (order: number) => () => {\r\n        const currentIndex = checked.indexOf(order);\r\n        const newChecked = [...checked];\r\n\r\n        if (currentIndex === -1) {\r\n            newChecked.push(order);\r\n        } else {\r\n            newChecked.splice(currentIndex, 1);\r\n        }\r\n\r\n        setChecked(newChecked);\r\n\r\n        dispatch(taskCheckComplete([year, month, date, order]));\r\n    };\r\n\r\n    // ここで作成する機能はたくさんある。\r\n    // 日付とパターンIDを読み取ること\r\n    // いや、ここじゃないか？ここではカレンダーに格納されたタスクを読み取るだけで良いのでは？\r\n    // カレンダー画面でパターンを登録し、その時にタスクリストからパターンIDが合致するものだけ抽出して、該当する日付のカレンダー配列に格納する\r\n    // 一度シンプルに、カレンダー配列に格納されているタスクを読み取る機能を実装しよう\r\n\r\n    // const test = userTaskInfo.calendar.filter(function(value){\r\n    //   return value.year == year && value.month == month && value.date == date\r\n    // });\r\n\r\n    // const test = userTaskInfo.calendar[year][month][date]\r\n    const test = userTaskInfo.calendar;\r\n\r\n    console.log(test[year][month][22]);\r\n\r\n    // let Achievement:[JSX.Element],NotAchieved:[JSX.Element];\r\n    const Achievement = test[year][month][22].tasks.filter(function (value) {\r\n        return value.flug == true;\r\n    });\r\n    console.log(\"Achievement\");\r\n    console.log(Achievement);\r\n\r\n    const NotAchieved = test[year][month][22].tasks.filter(function (value) {\r\n        return value.flug == false;\r\n    });\r\n    console.log(\"NotAchieved\");\r\n    console.log(NotAchieved);\r\n\r\n    return (\r\n        <List className={classes.roots}>\r\n            {NotAchieved.map((value, index) => {\r\n                const labelId = `checkbox-list-label-${value}`;\r\n\r\n                return (\r\n                    <ListItem\r\n                        key={year & month & date & index}\r\n                        role={undefined}\r\n                        dense\r\n                        button\r\n                        onClick={handleToggle(value.order)}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <Checkbox\r\n                                edge=\"start\"\r\n                                checked={value.flug}\r\n                                // checked={checked.indexOf(index) !== -1}\r\n                                tabIndex={-1}\r\n                                disableRipple\r\n                                inputProps={{ \"aria-labelledby\": labelId }}\r\n                            />\r\n                        </ListItemIcon>\r\n                        <ListItemText\r\n                            id={labelId}\r\n                            primary={`Line item ${index + 1} ${\r\n                                value.detail1\r\n                            } & ${value.detail2} & ${value.flug}`}\r\n                        />\r\n                        <ListItemSecondaryAction>\r\n                            <IconButton edge=\"end\" aria-label=\"comments\">\r\n                                <CommentIcon />\r\n                            </IconButton>\r\n                        </ListItemSecondaryAction>\r\n                    </ListItem>\r\n                );\r\n            })}\r\n            <p>達成済み</p>\r\n            <Accordion>\r\n                <AccordionSummary\r\n                    expandIcon={<ExpandMoreIcon />}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\"\r\n                >\r\n                    {/* <Typography className={classes.heading}>Accordion 1</Typography> */}\r\n                    <Typography>Accordion 1</Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails className={classes.AchievementList}>\r\n                    {/* <Typography> */}\r\n                    {Achievement.map((value, index) => {\r\n                        const labelId = `checkbox-list-label-${value}`;\r\n\r\n                        return (\r\n                            <ListItem\r\n                                key={year & month & date & index}\r\n                                role={undefined}\r\n                                dense\r\n                                button\r\n                                onClick={handleToggle(value.order)}\r\n                            >\r\n                                <ListItemIcon>\r\n                                    <Checkbox\r\n                                        edge=\"start\"\r\n                                        checked={value.flug}\r\n                                        // checked={checked.indexOf(index) !== -1}\r\n                                        tabIndex={-1}\r\n                                        disableRipple\r\n                                        inputProps={{\r\n                                            \"aria-labelledby\": labelId,\r\n                                        }}\r\n                                    />\r\n                                </ListItemIcon>\r\n                                <ListItemText\r\n                                    id={labelId}\r\n                                    primary={`Line item ${index + 1} ${\r\n                                        value.detail1\r\n                                    } & ${value.detail2} & ${value.flug}`}\r\n                                />\r\n                                <ListItemSecondaryAction>\r\n                                    <IconButton\r\n                                        edge=\"end\"\r\n                                        aria-label=\"comments\"\r\n                                    >\r\n                                        <CommentIcon />\r\n                                    </IconButton>\r\n                                </ListItemSecondaryAction>\r\n                            </ListItem>\r\n                        );\r\n                    })}\r\n                    {/* </Typography> */}\r\n                </AccordionDetails>\r\n            </Accordion>\r\n\r\n            {/* {test[year][month][22].tasks.map((value,index) => {\r\n        const labelId = `checkbox-list-label-${value}`;\r\n\r\n        return (\r\n          <ListItem key={year&month&date&index} role={undefined} dense button onClick={handleToggle(index)}>\r\n            <ListItemIcon>\r\n              <Checkbox\r\n                edge=\"start\"\r\n                checked={value.flug}\r\n                // checked={checked.indexOf(index) !== -1}\r\n                tabIndex={-1}\r\n                disableRipple\r\n                inputProps={{ 'aria-labelledby': labelId }}\r\n              />\r\n            </ListItemIcon>\r\n            <ListItemText id={labelId} primary={`Line item ${index + 1} ${value.detail1} & ${value.detail2} & ${value.flug}`} />\r\n            <ListItemSecondaryAction>\r\n              <IconButton edge=\"end\" aria-label=\"comments\">\r\n                <CommentIcon />\r\n              </IconButton>\r\n            </ListItemSecondaryAction>\r\n          </ListItem>\r\n        );\r\n      })} */}\r\n        </List>\r\n        // <List className={classes.roots}>\r\n        //   {[0, 1, 2, 3].map((value) => {\r\n        //     const labelId = `checkbox-list-label-${value}`;\r\n\r\n        //     return (\r\n        //       <ListItem key={value} role={undefined} dense button onClick={handleToggle(value)}>\r\n        //         <ListItemIcon>\r\n        //           <Checkbox\r\n        //             edge=\"start\"\r\n        //             checked={checked.indexOf(value) !== -1}\r\n        //             tabIndex={-1}\r\n        //             disableRipple\r\n        //             inputProps={{ 'aria-labelledby': labelId }}\r\n        //           />\r\n        //         </ListItemIcon>\r\n        //         <ListItemText id={labelId} primary={`Line item ${value + 1}`} />\r\n        //         <ListItemSecondaryAction>\r\n        //           <IconButton edge=\"end\" aria-label=\"comments\">\r\n        //           {/* <IconButton aria-label=\"comments\"> */}\r\n        //             <CommentIcon />\r\n        //           </IconButton>\r\n        //         </ListItemSecondaryAction>\r\n        //       </ListItem>\r\n        //     );\r\n        //   })}\r\n        // </List>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}