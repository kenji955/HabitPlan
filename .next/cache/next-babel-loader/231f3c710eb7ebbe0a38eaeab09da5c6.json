{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport firebase from \"firebase\";\nimport { auth } from \"../components/test/firebaseTest/firebaseTest\";\nconst initialState = {\n  userId: '',\n  userTaskInfo: {\n    calendar: {\n      [new Date(\"Thu, 22 Oct 2020 02:00:00\").getFullYear()]: {\n        [new Date(\"Thu, 22 Oct 2020 02:00:00\").getMonth() + 1]: {\n          [new Date(\"Thu, 22 Oct 2020 02:00:00\").getDate()]: {\n            PatternId: 1,\n            tasks: [{\n              order: 1,\n              detail: {\n                [\"タスク名\"]: \"タスク名 22 1\",\n                [\"testDetail1\"]: \"testDetail1 22 1\",\n                [\"testDetail2\"]: \"testDetail1 22 1\"\n              },\n              flug: false\n            }, {\n              order: 2,\n              detail: {\n                [\"タスク名\"]: \"タスク名 22 2\",\n                [\"testDetail1\"]: \"testDetail1 22 2\",\n                [\"testDetail2\"]: \"testDetail1 22 2\"\n              },\n              flug: false\n            }]\n          },\n          [new Date(\"Thu, 23 Oct 2020 02:00:00\").getDate()]: {\n            PatternId: 1,\n            tasks: [{\n              order: 1,\n              detail: {\n                [\"タスク名\"]: \"タスク名 23 1\",\n                [\"testDetail1\"]: \"testDetail1 23 1\",\n                [\"testDetail2\"]: \"testDetail1 23 1\"\n              },\n              flug: false\n            }, {\n              order: 2,\n              detail: {\n                [\"タスク名\"]: \"タスク名 23 2\",\n                [\"testDetail1\"]: \"testDetail1 23 2\",\n                [\"testDetail2\"]: \"testDetail1 23 2\"\n              },\n              flug: false\n            }]\n          }\n        }\n      }\n    },\n    pattern: [{\n      patternId: 1,\n      patternName: \"testPattern1\"\n    }, {\n      patternId: 2,\n      patternName: \"testPattern2\"\n    }],\n    tasks: [{\n      detail: {\n        [\"タスク名\"]: \"タスク名 22 1\",\n        [\"defalut\"]: \"defalut\",\n        [\"testDetail1\"]: \"testDetail1 22 1\",\n        [\"testDetail2\"]: \"testDetail1 22 1\"\n      },\n      patternInfo: [{\n        patternID: 1,\n        order: 1\n      }]\n    }, {\n      detail: {\n        [\"タスク名\"]: \"タスク名 22 2\",\n        [\"defalut\"]: \"defalut\",\n        [\"testDetail1\"]: \"testDetail1 22 2\",\n        [\"testDetail2\"]: \"testDetail1 22 2\"\n      },\n      patternInfo: [{\n        patternID: 1,\n        order: 2\n      }]\n    }, {\n      detail: {\n        [\"タスク名\"]: \"タスク名 23 1\",\n        [\"defalut\"]: \"defalut\",\n        [\"testDetail1\"]: \"testDetail1 23 1\",\n        [\"testDetail2\"]: \"testDetail1 23 1\"\n      },\n      patternInfo: [{\n        patternID: 2,\n        order: 1\n      }, {\n        patternID: 1,\n        order: 3\n      }]\n    }, {\n      detail: {\n        [\"タスク名\"]: \"タスク名 23 2\",\n        [\"defalut\"]: \"defalut\",\n        [\"testDetail2\"]: \"testDetail1 23 2\",\n        [\"testDetail1\"]: \"testDetail1 23 2\"\n      },\n      patternInfo: [{\n        patternID: 2,\n        order: 2\n      }]\n    }]\n  }\n}; // const diff = (olds: any[], nexts: any[]) => ({\n//     adds: nexts.filter((e) => !olds.includes(e)),\n//     subs: olds.filter((e) => !nexts.includes(e)),\n// });\n// パターン更新時に未来に設定されているパターンの内容を更新する。\n// 更新対象はstate.calendar.tasks\n// 年月日が未来であり、かつ、パターンIDが同じものを対象に新しいパターンを登録する。\n\nconst futurePatternUpdate = (state, updatePatternId) => {\n  console.log(\"====futurePatternUpdateここから====\");\n  console.log(Object.keys(state.userTaskInfo.calendar));\n  const today = new Date();\n  const nowYear = today.getFullYear();\n  const nowMonth = today.getMonth() + 1;\n  const nowDate = today.getDate();\n  const choicePatternTasks = state.userTaskInfo.tasks.filter(function (task) {\n    return task.patternInfo.some(task => task.patternID == updatePatternId);\n  }); // パターンIDに紐付くタスク一覧からカレンダーへの登録情報を抽出する。\n\n  const updateTasks = choicePatternTasks.map(task => {\n    // パターンが複数登録されているタスクへの対応として、選択されているパターンIDに該当する要素だけを抽出する。\n    const taskPattern = task.patternInfo.filter(function (patternInfo) {\n      return patternInfo.patternID == updatePatternId;\n    }); // 配列のタスクと抽出したパターン情報を整形して返す。\n\n    return {\n      order: taskPattern[0].order,\n      detail: task.detail,\n      // detail2: task.detail2,\n      flug: false\n    };\n  });\n\n  const keyMonthList = keyYear => {\n    return Object.keys(state.userTaskInfo.calendar[parseInt(keyYear)]);\n  };\n\n  const keyDateList = (keyYear, keyMonth) => {\n    return Object.keys(state.userTaskInfo.calendar[parseInt(keyYear)][parseInt(keyMonth)]);\n  };\n\n  const dateTaskUpdate = (keyYear, keyMonth, keyDate) => {\n    if (state.userTaskInfo.calendar[parseInt(keyYear)][parseInt(keyMonth)][parseInt(keyDate)].PatternId == updatePatternId) {\n      state.userTaskInfo.calendar[parseInt(keyYear)][parseInt(keyMonth)][parseInt(keyDate)].tasks = updateTasks;\n      console.log(\"===dateTaskUpdate===\");\n      console.log(keyYear);\n      console.log(keyMonth);\n      console.log(keyDate);\n      console.log(updateTasks);\n    }\n  };\n\n  const diff = (olds, nexts) => ({\n    adds: nexts.filter(e => !olds.includes(e)),\n    subs: olds.filter(e => !nexts.includes(e))\n  }); // 登録されている年の連想配列のキーを全て取得\n\n\n  const keyYears = Object.keys(state.userTaskInfo.calendar);\n  keyYears.map(keyYear => {\n    if (parseInt(keyYear) == nowYear) {\n      // もし今年だったら、の処理\n      // 登録されている月の連想配列のキーを全て取得\n      const keyMonths = keyMonthList(keyYear);\n      keyMonths.map(keyMonth => {\n        if (parseInt(keyMonth) == nowMonth) {\n          // もし今月だったら\n          // 登録されている日の連想配列のキーを全て取得\n          const keyDates = keyDateList(keyYear, keyMonth);\n          keyDates.map(keyDate => {\n            if (parseInt(keyDate) > nowDate) {\n              // もし明日以降だったら登録内容を更新する\n              dateTaskUpdate(keyYear, keyMonth, keyDate);\n            } else if (parseInt(keyDate) == nowDate) {\n              // もし今日だったら、変更分だけ反映する。\n              // 処理未作成\n              if (state.userTaskInfo.calendar[parseInt(keyYear)][parseInt(keyMonth)][parseInt(keyDate)].PatternId == updatePatternId) {\n                const result = diff(state.userTaskInfo.calendar[parseInt(keyYear)][parseInt(keyMonth)][parseInt(keyDate)].tasks, updateTasks);\n                const updateArray = state.userTaskInfo.calendar[parseInt(keyYear)][parseInt(keyMonth)][parseInt(keyDate)].tasks.filter(function (task) {\n                  return result.subs.some(sub => sub != task);\n                });\n                result.adds.map(add => {\n                  updateArray.push(add);\n                });\n                state.userTaskInfo.calendar[parseInt(keyYear)][parseInt(keyMonth)][parseInt(keyDate)].tasks = updateArray;\n              }\n            }\n          });\n        } else if (parseInt(keyMonth) > nowMonth) {\n          // もし来月以降だったら、すべて更新する。\n          const keyDates = keyDateList(keyYear, keyMonth);\n          keyDates.map(keyDate => {\n            dateTaskUpdate(keyYear, keyMonth, keyDate);\n          });\n        }\n      });\n    } else if (parseInt(keyYear) > nowYear) {\n      // もし来年以降だったら、の処理。全て更新する。\n      const keyMonths = keyMonthList(keyYear);\n      keyMonths.map(keyMonth => {\n        const keyDates = keyDateList(keyYear, keyMonth);\n        keyDates.map(keyDate => {\n          dateTaskUpdate(keyYear, keyMonth, keyDate);\n        });\n      });\n    }\n  });\n  console.log(\"====futurePatternUpdateここまで====\");\n};\n\nconst DBCRUD = (pass, crud, updateDocument) => {\n  const userId = auth.currentUser.uid;\n  let refPass = '/' + pass;\n\n  if (pass == '') {\n    refPass = '';\n  }\n\n  const ref = firebase.database().ref(\"/users/\" + userId + refPass);\n\n  switch (crud) {\n    case 'register':\n      ref.set(updateDocument);\n      break;\n\n    case 'update':\n      ref.update(updateDocument);\n      break;\n\n    case 'delete':\n      ref.remove();\n      break;\n  }\n};\n\nconst tasksModule = createSlice({\n  name: \"tasks\",\n  initialState,\n  reducers: {\n    init(state, action) {\n      const data = action.payload;\n      console.log(\"init data\");\n      console.log(data); // state = {...data};\n      // console.log(\"init state.userTaskInfo 前\");\n      // console.log(state.userTaskInfo);\n\n      state.userTaskInfo = data; // console.log(\"init state.userTaskInfo 後\");\n      // console.log(state.userTaskInfo);\n    },\n\n    Register(state, action) {\n      const data = action.payload;\n      state = _objectSpread(_objectSpread({}, state), data); // console.log('state');\n      // console.log(state);\n    },\n\n    allDelete(state) {\n      state = initialState;\n      console.log(\"check allDelete\");\n    },\n\n    // DayPlanにてタスクをクリックした際に完了フラグをtrueに変更する処理。引数にて年、月、日、タスクのインデックス番号を受け取っている。\n    taskCheckComplete(state, action) {\n      const index = state.userTaskInfo.calendar[action.payload[0]][action.payload[1]][action.payload[2]].tasks.findIndex(tasks => tasks.order == action.payload[3]);\n      console.log(index);\n      state.userTaskInfo.calendar[action.payload[0]][action.payload[1]][action.payload[2]].tasks[index].flug = !state.userTaskInfo.calendar[action.payload[0]][action.payload[1]][action.payload[2]].tasks[index].flug;\n      DBCRUD(`calendar/${action.payload[0]}/${action.payload[1]}/${action.payload[2]}/tasks/${index}`, 'update', state.userTaskInfo.calendar[action.payload[0]][action.payload[1]][action.payload[2]].tasks[index]);\n    },\n\n    // 引数はstateと年、月、日、選択されているパターンIDの4つの数値が格納された配列\n    calendarPatternRegister(state, action) {\n      // stateから選択されているパターンIDが設定されているタスクを抽出する。\n      const choicePatternTasks = state.userTaskInfo.tasks.filter(function (task) {\n        return task.patternInfo.some(task => task.patternID == action.payload[3]);\n      }); // パターンIDに紐付くタスク一覧からカレンダーへの登録情報を抽出する。\n\n      const TodayTasks = choicePatternTasks.map(task => {\n        // パターンが複数登録されているタスクへの対応として、選択されているパターンIDに該当する要素だけを抽出する。\n        const taskPattern = task.patternInfo.filter(function (patternInfo) {\n          return patternInfo.patternID == action.payload[3];\n        }); // 配列のタスクと抽出したパターン情報を整形して返す。\n\n        return {\n          order: taskPattern[0].order,\n          detail: task.detail,\n          // detail2: task.detail2,\n          flug: false\n        };\n      }); // ここに年がなかった時の処理を加える\n\n      if (action.payload[0] in state.userTaskInfo.calendar) {\n        // stateのMonthの連想配列に新しい日付の連想配列を追加する。\n        // 追加情報は引数の日とこれまでの処理で作成したカレンダー登録用情報\n        state.userTaskInfo.calendar[action.payload[0]][action.payload[1]] = _objectSpread(_objectSpread({}, state.userTaskInfo.calendar[action.payload[0]][action.payload[1]]), {}, {\n          [action.payload[2]]: {\n            PatternId: action.payload[3],\n            tasks: TodayTasks\n          }\n        });\n      } else {\n        // stateのMonthの連想配列に新しい日付の連想配列を追加する。\n        // 追加情報は引数の日とこれまでの処理で作成したカレンダー登録用情報\n        state.userTaskInfo.calendar[action.payload[0]] = _objectSpread(_objectSpread({}, state.userTaskInfo.calendar[action.payload[0]]), {}, {\n          [action.payload[1]]: {\n            [action.payload[2]]: {\n              PatternId: action.payload[3],\n              tasks: TodayTasks\n            }\n          }\n        });\n      }\n\n      DBCRUD(`calendar/${action.payload[0]}/${action.payload[1]}/${action.payload[2]}`, 'update', state.userTaskInfo.calendar[action.payload[0]][action.payload[1]][action.payload[2]]);\n      console.log(state.userTaskInfo.calendar[action.payload[0]][action.payload[1]][action.payload[2]]);\n    },\n\n    // タスクの詳細を設定する処理。引数のテキスト配列には[入力内容、連想配列のキー、タスクの配列を指定する数字]が格納されている。\n    taskDetailRegister(state, action) {\n      state.userTaskInfo.tasks[parseInt(action.payload[2])].detail = _objectSpread(_objectSpread({}, state.userTaskInfo.tasks[parseInt(action.payload[2])].detail), {}, {\n        [action.payload[1]]: action.payload[0]\n      });\n      DBCRUD(`tasks/${[parseInt(action.payload[2])]}/detail`, 'update', state.userTaskInfo.tasks[parseInt(action.payload[2])].detail);\n    },\n\n    // タスクを追加する処理。引数のテキスト配列には[入力内容、連想配列のキー、タスクの配列を指定する数字]が格納されている。\n    taskRegister(state, action) {\n      const registerTask = action.payload;\n      registerTask.patternInfo.map(content => {\n        const choicePatternTasks = state.userTaskInfo.tasks.filter(function (task) {\n          return task.patternInfo.some(task => task.patternID == content.patternID);\n        });\n        content.order = choicePatternTasks.length + 1;\n      });\n      console.log(registerTask);\n      state.userTaskInfo.tasks = [...state.userTaskInfo.tasks, registerTask];\n      DBCRUD('tasks', 'register', state.userTaskInfo.tasks);\n    },\n\n    // タスクのパターン登録状況を更新する。\n    taskPatternUpdate(state, action) {\n      // ここでやることは？\n      // まず引数にタスクの配列インデックス番号が必要\n      // パターンIDの配列を受け取る。\n      // 配列とstateを比較して、なければ登録。Orderは最大値+1。逆に削除されているものは除外。\n      const statePatternIdList = state.userTaskInfo.tasks[action.payload.index].patternInfo.map(content => {\n        return content.patternID;\n      });\n      console.log(\"statePatternIdList\");\n      console.log(statePatternIdList);\n\n      const diff = (olds, nexts) => ({\n        adds: nexts.filter(e => !olds.includes(e)),\n        subs: olds.filter(e => !nexts.includes(e))\n      });\n\n      const result = diff(statePatternIdList, action.payload.newChecked);\n      let updateArray;\n      console.log(result); // stateから削除対象を除外した配列を抽出する。\n\n      if (result.subs.length > 0) {\n        updateArray = state.userTaskInfo.tasks[action.payload.index].patternInfo.filter(function (content) {\n          // futurePatternUpdate(state,);\n          return result.subs.some(sub => sub != content.patternID);\n        });\n      } else {\n        updateArray = state.userTaskInfo.tasks[action.payload.index].patternInfo;\n      }\n\n      console.log(\"1:updateArray\");\n      console.log(updateArray); //\n\n      result.adds.map(add => {\n        let Max = 0; // 追加されたIDが設定されているタスクを抽出する。\n\n        const choicePatternTasks = state.userTaskInfo.tasks.filter(function (task) {\n          return task.patternInfo.some(taskPatternInfo => taskPatternInfo.patternID == add);\n        }); //\n\n        choicePatternTasks.map(task => {\n          // 抽出された各タスクのパターンIDを比較し、最大値を取得する。\n          let content = task.patternInfo.find(info => info.patternID == add);\n          Max < content.order ? Max = content.order : \"\";\n        });\n        const pushContent = {\n          patternID: add,\n          order: Max + 1\n        };\n        updateArray.push(pushContent);\n        futurePatternUpdate(state, add);\n      });\n      console.log(\"2:updateArray\");\n      console.log(updateArray);\n      state.userTaskInfo.tasks[action.payload.index].patternInfo = updateArray;\n      DBCRUD(`tasks/${action.payload.index}/patternInfo`, 'register', updateArray);\n    },\n\n    // タスクを削除する処理。引数には削除対象タスクのインデックス番号が格納されている。\n    taskDelete(state, action) {\n      // const deleteTask = state.userTaskInfo.tasks.splice(\n      //     action.payload,\n      //     1\n      // );\n      const deleteTask = state.userTaskInfo.tasks.filter(function (content, index) {\n        return index != action.payload;\n      });\n      console.log(deleteTask);\n      state.userTaskInfo.tasks = deleteTask;\n      DBCRUD(`tasks`, 'register', deleteTask);\n    },\n\n    // タスクをパターンから除外する処理。引数のオブジェクトにはパターンIDと削除対象タスクの名称が格納されている。\n    taskRemovePattern(state, action) {\n      console.log(action.payload.detailTitle);\n      const index = state.userTaskInfo.tasks.findIndex(content => {\n        return content.detail[\"タスク名\"] == action.payload.detailTitle;\n      });\n      console.log(index);\n      const deletedTask = state.userTaskInfo.tasks[index].patternInfo.filter(function (content) {\n        return content.patternID != action.payload.patternId;\n      });\n      state.userTaskInfo.tasks[index].patternInfo = deletedTask;\n      console.log(deletedTask);\n      DBCRUD(`tasks/${index}/patternInfo`, 'register', deletedTask); // futurePatternUpdate(state);\n    },\n\n    // パターンを追加する処理。引数にはパターン名称が格納されている。\n    patternRegister(state, action) {\n      let MaxId = 0;\n      state.userTaskInfo.pattern.map(patternContent => {\n        patternContent.patternId > MaxId ? MaxId = patternContent.patternId : \"\";\n      });\n      const addPattern = {\n        patternId: MaxId + 1,\n        patternName: action.payload\n      };\n      state.userTaskInfo.pattern = [...state.userTaskInfo.pattern, addPattern];\n      DBCRUD('pattern', 'register', state.userTaskInfo.pattern);\n    },\n\n    // パターンを削除する処理。引数にはパターンIDが格納されている。\n    patternDelete(state, action) {\n      const updatePatternList = state.userTaskInfo.pattern.filter(patternContent => {\n        // console.log(patternContent.patternId);\n        // console.log(action.payload);\n        return patternContent.patternId != action.payload;\n      });\n      console.log(updatePatternList);\n      state.userTaskInfo.pattern = updatePatternList; // タスクとカレンダーに保管されているパターンを全て削除する必要がある\n      // カレンダーは未来分だけ\n      // state.userTaskInfo.tasksに保管されているパターン情報を削除する。\n\n      let updateTaskList = state.userTaskInfo.tasks.map(task => {\n        const updatePatternInfo = task.patternInfo.filter(taskPatternInfo => {\n          return taskPatternInfo.patternID != action.payload;\n        });\n        const updateTask = {\n          detail: task.detail,\n          patternInfo: updatePatternInfo\n        };\n        return updateTask;\n      });\n      console.log(\"after:updateTaskList\");\n      console.log(updateTaskList);\n      state.userTaskInfo.tasks = updateTaskList; // state.userTaskInfo.calendarの未来分に保管されているパターン情報を削除する。\n\n      const today = new Date();\n      const nowYear = today.getFullYear();\n      const nowMonth = today.getMonth() + 1;\n      const nowDate = today.getDate();\n      const keyYears = Object.keys(state.userTaskInfo.calendar);\n\n      const deleteCalendarDate = (year, month, date) => {\n        if (state.userTaskInfo.calendar[parseInt(year)][parseInt(month)][parseInt(date)].PatternId == action.payload) {\n          delete state.userTaskInfo.calendar[parseInt(year)][parseInt(month)][parseInt(date)];\n        }\n      };\n\n      keyYears.map(year => {\n        const keyMonth = Object.keys(state.userTaskInfo.calendar[parseInt(year)]);\n\n        if (parseInt(year) > nowYear) {\n          // 対象が来年以降である場合、削除する。deleteのほうがいい\n          keyMonth.map(month => {\n            const keyDate = Object.keys(state.userTaskInfo.calendar[parseInt(year)][parseInt(month)]);\n            keyDate.map(date => {\n              deleteCalendarDate(year, month, date);\n            });\n          });\n        } else if (parseInt(year) == nowYear) {\n          // 対象が今年である場合\n          keyMonth.map(month => {\n            const keyDate = Object.keys(state.userTaskInfo.calendar[parseInt(year)][parseInt(month)]);\n\n            if (parseInt(month) > nowMonth) {\n              // 来月以降の場合、削除する。deleteのほうがいい\n              console.log(keyDate);\n              keyDate.map(date => {\n                deleteCalendarDate(year, month, date);\n              });\n            } else if (parseInt(month) == nowMonth) {\n              // 今月の場合\n              keyDate.map(date => {\n                if (parseInt(date) > nowDate) {\n                  // 明日以降の場合、削除する\n                  deleteCalendarDate(year, month, date);\n                }\n              });\n            }\n          });\n        }\n      });\n      DBCRUD('', 'register', state.userTaskInfo);\n    },\n\n    // パターン名称を編集する処理。引数にはパターンIDとパターン名称が格納されている。\n    patternNameEdit(state, action) {\n      // IDに合致する要素のインデックス番号を取得\n      const editPatternIndex = state.userTaskInfo.pattern.findIndex(patternContent => patternContent.patternId == action.payload.editPatternId); // 取得したインデックス番号を目印に、引数の新しい名称で更新する。\n\n      state.userTaskInfo.pattern[editPatternIndex].patternName = action.payload.patternName;\n      DBCRUD(`pattern/${editPatternIndex}`, 'update', state.userTaskInfo.pattern[editPatternIndex]);\n    }\n\n  }\n});\nexport const {\n  init,\n  Register,\n  allDelete,\n  taskCheckComplete,\n  calendarPatternRegister,\n  taskDetailRegister,\n  taskRegister,\n  taskPatternUpdate,\n  taskDelete,\n  taskRemovePattern,\n  patternRegister,\n  patternDelete,\n  patternNameEdit\n} = tasksModule.actions;\nexport default tasksModule;","map":null,"metadata":{},"sourceType":"module"}