{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { calendarPatternRegister } from \"../../modules/tasksModule\";\nimport { RootState } from \"../../modules/rootReducer\";\nimport format from \"date-fns/format\";\nimport getDate from \"date-fns/getDate\";\nimport getDay from \"date-fns/getDay\";\nimport isSameDay from \"date-fns/isSameDay\";\nimport eachDayOfInterval from \"date-fns/eachDayOfInterval\";\nimport endOfWeek from \"date-fns/endOfWeek\";\nimport eachWeekOfInterval from \"date-fns/eachWeekOfInterval\";\nimport addMonths from \"date-fns/addMonths\";\nimport subMonths from \"date-fns/subMonths\";\nimport startOfMonth from \"date-fns/startOfMonth\";\nimport endOfMonth from \"date-fns/endOfMonth\";\nimport isSameMonth from \"date-fns/isSameMonth\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Typography from \"@material-ui/core/Typography\";\nimport blue from \"@material-ui/core/colors/blue\";\nimport pink from \"@material-ui/core/colors/pink\";\nimport red from \"@material-ui/core/colors/red\";\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    margin: theme.spacing(5, 10),\n    padding: theme.spacing(5, 5)\n  },\n  yearmonth: {\n    margin: theme.spacing(2, 0, 1, 0)\n  },\n  tableHead: {\n    color: theme.palette.secondary.contrastText,\n    backgroundColor: theme.palette.secondary.light\n  }\n}));\nconst useCalendarCellStyles = makeStyles(theme => ({\n  calendarCell: {\n    color: ({\n      wday,\n      isTargetMonth\n    }) => {\n      if (isTargetMonth) {\n        switch (wday) {\n          case 0:\n            // Sunday\n            return red[500];\n\n          case 6:\n            // Saturday\n            return blue[500];\n\n          default:\n            return theme.palette.text.primary;\n        }\n      } else {\n        // previous or next month\n        switch (wday) {\n          case 0:\n            // Sunday\n            return red[200];\n\n          case 6:\n            // Saturday\n            return blue[200];\n\n          default:\n            return theme.palette.text.secondary;\n        }\n      }\n    },\n    backgroundColor: ({\n      isToday\n    }) => isToday ? pink[50] : \"transparent\"\n  }\n}));\n\nconst getCalendarArray = date => {\n  const sundays = eachWeekOfInterval({\n    start: startOfMonth(date),\n    end: endOfMonth(date)\n  });\n  return sundays.map(sunday => eachDayOfInterval({\n    start: sunday,\n    end: endOfWeek(sunday)\n  }));\n};\n\nconst calendarCellClick = (dateData, dispatch, choice) => () => {\n  const year = dateData.getFullYear();\n  const month = dateData.getMonth() + 1;\n  const date = dateData.getDate();\n  dispatch(calendarPatternRegister([year, month, date, choice]));\n}; // カレンダー欄に設定されているパターンIDを表示させるための関数\n\n\nfunction PatternRegistrationStatus(dateData, userTaskInfo) {\n  const year = dateData.getFullYear();\n  const month = dateData.getMonth() + 1;\n  const date = dateData.getDate(); // console.log(\"チェック：\" + date + \":\" + month + \":\" + year);\n  // console.log(\"チェック2\");\n  // console.log(userTaskInfo.calendar[year]);\n\n  if ([year] in userTaskInfo.calendar) {\n    if ([month] in userTaskInfo.calendar[year]) {\n      if ([date] in userTaskInfo.calendar[year][month]) {\n        console.log(\"PatternId：\" + userTaskInfo.calendar[year][month][date].PatternId);\n        return userTaskInfo.calendar[year][month][date].PatternId;\n      }\n    }\n  } // console.log(\"なし：\" + date);\n\n\n  return \"×\";\n}\n\nfunction CalendarTableCell(props) {\n  const {\n    key,\n    wday,\n    isTargetMonth,\n    isToday,\n    children,\n    dateData,\n    dispatch,\n    choice\n  } = props,\n        other = _objectWithoutProperties(props, [\"key\", \"wday\", \"isTargetMonth\", \"isToday\", \"children\", \"dateData\", \"dispatch\", \"choice\"]);\n\n  const classes = useCalendarCellStyles(props);\n  return __jsx(TableCell, _extends({\n    className: classes.calendarCell\n  }, other, {\n    onClick: calendarCellClick(dateData, dispatch, choice)\n  }), children);\n}\n\nfunction App(props) {\n  const {\n    0: targetDate,\n    1: setTargetDate\n  } = useState(new Date());\n  const classes = useStyles();\n  const calendar = getCalendarArray(targetDate);\n  const today = new Date();\n  const dispatch = useDispatch();\n  const {\n    userTaskInfo\n  } = useSelector(state => state.tasks);\n  return __jsx(\"div\", null, __jsx(CssBaseline, null), __jsx(Paper, {\n    className: classes.paper\n  }, __jsx(Grid, {\n    container: true,\n    justify: \"space-between\"\n  }, __jsx(Grid, {\n    item: true\n  }, __jsx(Button, {\n    variant: \"outlined\",\n    onClick: () => setTargetDate(subMonths(targetDate, 1))\n  }, \"\\u524D\\u306E\\u6708\")), __jsx(Grid, {\n    item: true\n  }, __jsx(Button, {\n    variant: \"outlined\",\n    onClick: () => setTargetDate(new Date())\n  }, \"\\u4ECA\\u6708\")), __jsx(Grid, {\n    item: true\n  }, __jsx(Button, {\n    variant: \"outlined\",\n    onClick: () => setTargetDate(addMonths(targetDate, 1))\n  }, \"\\u6B21\\u306E\\u6708\"))), __jsx(Typography, {\n    variant: \"h4\",\n    align: \"center\",\n    className: classes.yearmonth\n  }, format(targetDate, \"y年M月\")), __jsx(Table, null, __jsx(TableHead, null, __jsx(TableRow, null, __jsx(TableCell, {\n    align: \"center\",\n    classes: {\n      head: classes.tableHead\n    }\n  }, \"\\u65E5\"), __jsx(TableCell, {\n    align: \"center\",\n    classes: {\n      head: classes.tableHead\n    }\n  }, \"\\u6708\"), __jsx(TableCell, {\n    align: \"center\",\n    classes: {\n      head: classes.tableHead\n    }\n  }, \"\\u706B\"), __jsx(TableCell, {\n    align: \"center\",\n    classes: {\n      head: classes.tableHead\n    }\n  }, \"\\u6C34\"), __jsx(TableCell, {\n    align: \"center\",\n    classes: {\n      head: classes.tableHead\n    }\n  }, \"\\u6728\"), __jsx(TableCell, {\n    align: \"center\",\n    classes: {\n      head: classes.tableHead\n    }\n  }, \"\\u91D1\"), __jsx(TableCell, {\n    align: \"center\",\n    onClick: calendarCellClick,\n    classes: {\n      head: classes.tableHead\n    }\n  }, \"\\u571F\"))), __jsx(TableBody, null, calendar.map((weekRow, rowNum) => __jsx(TableRow, {\n    key: rowNum\n  }, weekRow.map(date => __jsx(CalendarTableCell, {\n    key: getDay(date),\n    wday: getDay(date),\n    isTargetMonth: isSameMonth(date, targetDate),\n    isToday: isSameDay(date, today),\n    dateData: date,\n    dispatch: dispatch,\n    choice: props.choice,\n    align: \"center\"\n  }, getDate(date), __jsx(\"br\", null), PatternRegistrationStatus(date, userTaskInfo)))))))));\n}\n\nexport default App;","map":null,"metadata":{},"sourceType":"module"}