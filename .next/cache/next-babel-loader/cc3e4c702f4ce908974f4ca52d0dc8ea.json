{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\blelm\\\\Desktop\\\\AppCreate\\\\habitPlan\\\\src\\\\components\\\\view\\\\TaskList.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CommentIcon from \"@material-ui/icons/Comment\";\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport Divider from '@material-ui/core/Divider';\nimport TaskModal from \"./TaskModal\";\nimport { useSelector } from \"react-redux\";\nvar useStyles = makeStyles(function (theme) {\n  return createStyles({\n    roots: {\n      width: \"100%\",\n      maxWidth: 720,\n      margin: \"auto\",\n      backgroundColor: theme.palette.background.paper\n    },\n    icon: {\n      display: 'flex',\n      margin: '10px auto',\n      paddingTop: '10px'\n    }\n  });\n});\nexport default function CheckboxList() {\n  _s();\n\n  var _this = this;\n\n  var classes = useStyles(); // const [checked, setChecked] = React.useState([0]);\n\n  var _React$useState = React.useState(9999),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      open = _React$useState2[0],\n      setOpen = _React$useState2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.tasks;\n  }),\n      userTaskInfo = _useSelector.userTaskInfo;\n\n  var handleToggle = function handleToggle(value) {\n    return function () {\n      // const currentIndex = checked.indexOf(value);\n      // const newChecked = [...checked];\n      // if (currentIndex === -1) {\n      //     newChecked.push(value);\n      // } else {\n      //     newChecked.splice(currentIndex, 1);\n      // }\n      setOpen(value);\n      console.log(\"open:\" + open); // setChecked(newChecked);\n    };\n  };\n\n  return __jsx(List, {\n    className: classes.roots,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, userTaskInfo.tasks.map(function (task, index) {\n    var labelId = \"checkbox-list-label-\".concat(task.detail[\"testDetail1\"]);\n    return __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 25\n      }\n    }, __jsx(ListItem, {\n      key: task.patternInfo[0].order + \":\" + task.patternInfo[0].patternID,\n      role: undefined,\n      dense: true,\n      button: true,\n      onClick: handleToggle(index),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 25\n      }\n    }, __jsx(ListItemText, {\n      id: labelId,\n      primary: \"Line item \".concat(index + 1, \" \").concat(task.detail[\"testDetail1\"], \" \").concat(task.detail[\"testDetail2\"]),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 29\n      }\n    }), __jsx(ListItemSecondaryAction, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 29\n      }\n    }, __jsx(TaskModal, {\n      open: open,\n      setOpen: setOpen,\n      task: task,\n      index: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 33\n      }\n    }), __jsx(IconButton, {\n      edge: \"end\",\n      \"aria-label\": \"comments\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 33\n      }\n    }, __jsx(CommentIcon, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 37\n      }\n    })))), __jsx(Divider, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 25\n      }\n    }));\n  }), __jsx(AddCircleIcon, {\n    className: classes.icon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }));\n}\n\n_s(CheckboxList, \"E/eJ56t/AylQRe7m3WKF5G5o1jg=\", false, function () {\n  return [useStyles, useSelector];\n});\n\n_c = CheckboxList;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckboxList\");","map":{"version":3,"sources":["C:/Users/blelm/Desktop/AppCreate/habitPlan/src/components/view/TaskList.tsx"],"names":["React","createStyles","makeStyles","List","ListItem","ListItemSecondaryAction","ListItemText","IconButton","CommentIcon","AddCircleIcon","Divider","TaskModal","useSelector","useStyles","theme","roots","width","maxWidth","margin","backgroundColor","palette","background","paper","icon","display","paddingTop","CheckboxList","classes","useState","open","setOpen","state","tasks","userTaskInfo","handleToggle","value","console","log","map","task","index","labelId","detail","patternInfo","order","patternID","undefined"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Fade from \"@material-ui/core/Fade\";\r\nimport CommentIcon from \"@material-ui/icons/Comment\";\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nimport TaskModal from \"./TaskModal\";\r\nimport TaskPlusIcon from \"./taskPlus\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../modules/rootReducer\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        roots: {\r\n            width: \"100%\",\r\n            maxWidth: 720,\r\n            margin: \"auto\",\r\n            backgroundColor: theme.palette.background.paper,\r\n        },\r\n        icon: {\r\n            display:'flex',\r\n            margin:'10px auto',\r\n            paddingTop:'10px',\r\n        },\r\n    })\r\n);\r\n\r\nexport default function CheckboxList() {\r\n    const classes = useStyles();\r\n    // const [checked, setChecked] = React.useState([0]);\r\n    const [open, setOpen] = React.useState(9999);\r\n    const { userTaskInfo } = useSelector((state: RootState) => state.tasks);\r\n\r\n    const handleToggle = (value: number) => () => {\r\n        // const currentIndex = checked.indexOf(value);\r\n        // const newChecked = [...checked];\r\n\r\n        // if (currentIndex === -1) {\r\n        //     newChecked.push(value);\r\n        // } else {\r\n        //     newChecked.splice(currentIndex, 1);\r\n        // }\r\n\r\n        setOpen(value);\r\n        console.log(\"open:\" + open);\r\n        // setChecked(newChecked);\r\n    };\r\n\r\n    return (\r\n            <List className={classes.roots}>\r\n                {/* {[0, 1, 2, 3].map((value) => { */}\r\n                {userTaskInfo.tasks.map((task, index) => {\r\n                    const labelId = `checkbox-list-label-${task.detail[\"testDetail1\"]}`;\r\n\r\n                    return (\r\n                        <div>\r\n                        <ListItem\r\n                            key={\r\n                                task.patternInfo[0].order +\r\n                                \":\" +\r\n                                task.patternInfo[0].patternID\r\n                            }\r\n                            role={undefined}\r\n                            dense\r\n                            button\r\n                            onClick={handleToggle(index)}\r\n                        >\r\n                            <ListItemText\r\n                                id={labelId}\r\n                                primary={`Line item ${index + 1} ${\r\n                                    task.detail[\"testDetail1\"]\r\n                                } ${task.detail[\"testDetail2\"]}`}\r\n                            />\r\n                            <ListItemSecondaryAction>\r\n                                <TaskModal\r\n                                    open={open}\r\n                                    setOpen={setOpen}\r\n                                    task={task}\r\n                                    index={index}\r\n                                />\r\n                                <IconButton edge=\"end\" aria-label=\"comments\">\r\n                                    {/* <IconButton aria-label=\"comments\"> */}\r\n                                    <CommentIcon />\r\n                                </IconButton>\r\n                            </ListItemSecondaryAction>\r\n                        </ListItem>\r\n                        <Divider /></div>\r\n                    );\r\n                })}\r\n            {/* <TaskPlusIcon className={classes.icon}/> */}\r\n            <AddCircleIcon className={classes.icon}/>\r\n            </List>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}