{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\blelm\\\\Desktop\\\\AppCreate\\\\habitPlan\\\\src\\\\components\\\\view\\\\AppVar.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport InputN from \"./InputNormal\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { taskDetailRegister } from '../../modules/tasksModule';\nvar useStyles = makeStyles(function (theme) {\n  return createStyles({\n    root: {\n      flexGrow: 1,\n      position: 'fixed',\n      width: '40%',\n      zIndex: 5\n    },\n    title: {\n      flexGrow: 1\n    }\n  });\n});\nexport default function ButtonAppBar(props) {\n  _s();\n\n  var classes = useStyles();\n\n  var _useSelector = useSelector(function (state) {\n    return state.tasks;\n  }),\n      userTaskInfo = _useSelector.userTaskInfo;\n\n  var dispatch = useDispatch();\n\n  var onChangeHandler = function onChangeHandler(event) {\n    // console.log(event.target.value);\n    // ここでevent.target.valueとラベル(連想配列のキー)を送って処理する。処理も未作成\n    dispatch(taskDetailRegister([event.target.value, 'タスク名', props.index]));\n  };\n\n  var button;\n\n  if (props.checkNew) {\n    button = __jsx(Button, {\n      color: \"inherit\",\n      onClick: props.handleRegister,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 14\n      }\n    }, \"\\u767B\\u9332\");\n  }\n\n  return __jsx(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, __jsx(AppBar, {\n    position: \"static\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, __jsx(Toolbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, __jsx(Typography, {\n    variant: \"h6\",\n    className: classes.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }\n  }, __jsx(InputN, {\n    label: 'タスク名',\n    required: false,\n    index: props.index,\n    contentIndex: props.contents.length - 1,\n    contents: props.contents,\n    setContents: props.setContents,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  })), props.checkNew ? __jsx(Button, {\n    color: \"inherit\",\n    onClick: props.handleRegister,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 29\n    }\n  }, \"\\u767B\\u9332\") : null)));\n}\n\n_s(ButtonAppBar, \"COatBh4vTMzDyn2MqS5bzL5x5E8=\", false, function () {\n  return [useStyles, useSelector, useDispatch];\n});\n\n_c = ButtonAppBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"ButtonAppBar\");","map":{"version":3,"sources":["C:/Users/blelm/Desktop/AppCreate/habitPlan/src/components/view/AppVar.tsx"],"names":["React","createStyles","makeStyles","AppBar","Toolbar","Typography","Button","InputN","useDispatch","useSelector","taskDetailRegister","useStyles","theme","root","flexGrow","position","width","zIndex","title","ButtonAppBar","props","classes","state","tasks","userTaskInfo","dispatch","onChangeHandler","event","target","value","index","button","checkNew","handleRegister","contents","length","setContents"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport Input from '@material-ui/core/Input';\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport InputN from \"./InputNormal\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RootState } from '../../modules/rootReducer';\r\nimport { taskDetailRegister } from '../../modules/tasksModule';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n      position: 'fixed',\r\n      width: '40%',\r\n      zIndex: 5,\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n  }),\r\n);\r\n\r\nexport default function ButtonAppBar(props: any) {\r\n  const classes = useStyles();\r\n  const { userTaskInfo } = useSelector((state: RootState) => state.tasks);\r\n  const dispatch = useDispatch();\r\n\r\n  const onChangeHandler = (event: any) => {\r\n    // console.log(event.target.value);\r\n    // ここでevent.target.valueとラベル(連想配列のキー)を送って処理する。処理も未作成\r\n    dispatch(\r\n      taskDetailRegister([event.target.value, 'タスク名', props.index])\r\n    );\r\n  };\r\n\r\n  let button;\r\n  if (props.checkNew) {\r\n    button = <Button color=\"inherit\" onClick={props.handleRegister}>登録</Button>\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          {/* <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n            <MenuIcon />\r\n          </IconButton> */}\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            {/* News */}\r\n            {/* <Input placeholder=\"タスク名\" inputProps={{ 'aria-label': 'description' }} onChange={onChangeHandler} value={userTaskInfo.tasks[parseInt(props.index)].detail['title']} /> */}\r\n            {/* <TextField\r\n            id=\"standard-basic\"\r\n            placeholder=\"タスク名\"\r\n            label={props.label}\r\n            onChange={onChangeHandler}\r\n            value={\r\n              userTaskInfo.tasks[parseInt(props.index)].detail['title']\r\n            }\r\n        /> */}\r\n            <InputN\r\n              label={'タスク名'}\r\n              required={false}\r\n              index={props.index}\r\n              contentIndex={props.contents.length-1}\r\n              contents={props.contents}\r\n              setContents={props.setContents}\r\n            />\r\n          </Typography>\r\n          {props.checkNew ? <Button color=\"inherit\" onClick={props.handleRegister}>登録</Button> : null}\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}