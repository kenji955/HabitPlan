{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _detail, _detail2, _detail3, _detail4, _ref, _detail5, _detail6, _detail7, _detail8;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { useRegisterData } from \"../components/test/firebaseTest/DBFetch\";\nvar initialState = {\n  userTaskInfo: {\n    calendar: _defineProperty({}, new Date(\"Thu, 22 Oct 2020 02:00:00\").getFullYear(), _defineProperty({}, new Date(\"Thu, 22 Oct 2020 02:00:00\").getMonth() + 1, (_ref = {}, _defineProperty(_ref, new Date(\"Thu, 22 Oct 2020 02:00:00\").getDate(), {\n      PatternId: 1,\n      tasks: [{\n        order: 1,\n        detail: (_detail = {}, _defineProperty(_detail, \"タスク名\", \"タスク名 22 1\"), _defineProperty(_detail, \"testDetail1\", \"testDetail1 22 1\"), _defineProperty(_detail, \"testDetail2\", \"testDetail1 22 1\"), _detail),\n        flug: false\n      }, {\n        order: 2,\n        detail: (_detail2 = {}, _defineProperty(_detail2, \"タスク名\", \"タスク名 22 2\"), _defineProperty(_detail2, \"testDetail1\", \"testDetail1 22 2\"), _defineProperty(_detail2, \"testDetail2\", \"testDetail1 22 2\"), _detail2),\n        flug: false\n      }]\n    }), _defineProperty(_ref, new Date(\"Thu, 23 Oct 2020 02:00:00\").getDate(), {\n      PatternId: 1,\n      tasks: [{\n        order: 1,\n        detail: (_detail3 = {}, _defineProperty(_detail3, \"タスク名\", \"タスク名 23 1\"), _defineProperty(_detail3, \"testDetail1\", \"testDetail1 23 1\"), _defineProperty(_detail3, \"testDetail2\", \"testDetail1 23 1\"), _detail3),\n        flug: false\n      }, {\n        order: 2,\n        detail: (_detail4 = {}, _defineProperty(_detail4, \"タスク名\", \"タスク名 23 2\"), _defineProperty(_detail4, \"testDetail1\", \"testDetail1 23 2\"), _defineProperty(_detail4, \"testDetail2\", \"testDetail1 23 2\"), _detail4),\n        flug: false\n      }]\n    }), _ref))),\n    pattern: [{\n      patternId: 1,\n      patternName: \"testPattern1\"\n    }, {\n      patternId: 2,\n      patternName: \"testPattern2\"\n    }],\n    tasks: [{\n      detail: (_detail5 = {}, _defineProperty(_detail5, \"タスク名\", \"タスク名 22 1\"), _defineProperty(_detail5, \"defalut\", \"defalut\"), _defineProperty(_detail5, \"testDetail1\", \"testDetail1 22 1\"), _defineProperty(_detail5, \"testDetail2\", \"testDetail1 22 1\"), _detail5),\n      patternInfo: [{\n        patternID: 1,\n        order: 1\n      }]\n    }, {\n      detail: (_detail6 = {}, _defineProperty(_detail6, \"タスク名\", \"タスク名 22 2\"), _defineProperty(_detail6, \"defalut\", \"defalut\"), _defineProperty(_detail6, \"testDetail1\", \"testDetail1 22 2\"), _defineProperty(_detail6, \"testDetail2\", \"testDetail1 22 2\"), _detail6),\n      patternInfo: [{\n        patternID: 1,\n        order: 2\n      }]\n    }, {\n      detail: (_detail7 = {}, _defineProperty(_detail7, \"タスク名\", \"タスク名 23 1\"), _defineProperty(_detail7, \"defalut\", \"defalut\"), _defineProperty(_detail7, \"testDetail1\", \"testDetail1 23 1\"), _defineProperty(_detail7, \"testDetail2\", \"testDetail1 23 1\"), _detail7),\n      patternInfo: [{\n        patternID: 2,\n        order: 1\n      }, {\n        patternID: 1,\n        order: 3\n      }]\n    }, {\n      detail: (_detail8 = {}, _defineProperty(_detail8, \"タスク名\", \"タスク名 23 2\"), _defineProperty(_detail8, \"defalut\", \"defalut\"), _defineProperty(_detail8, \"testDetail2\", \"testDetail1 23 2\"), _defineProperty(_detail8, \"testDetail1\", \"testDetail1 23 2\"), _detail8),\n      patternInfo: [{\n        patternID: 2,\n        order: 2\n      }]\n    }]\n  }\n}; // const diff = (olds: any[], nexts: any[]) => ({\n//     adds: nexts.filter((e) => !olds.includes(e)),\n//     subs: olds.filter((e) => !nexts.includes(e)),\n// });\n// パターン更新時に未来に設定されているパターンの内容を更新する。\n// 更新対象はstate.calendar.tasks\n// 年月日が未来であり、かつ、パターンIDが同じものを対象に新しいパターンを登録する。\n\nvar futurePatternUpdate = function futurePatternUpdate(state, updatePatternId) {\n  console.log(\"====futurePatternUpdateここから====\");\n  console.log(Object.keys(state.userTaskInfo.calendar));\n  var today = new Date();\n  var nowYear = today.getFullYear();\n  var nowMonth = today.getMonth() + 1;\n  var nowDate = today.getDate();\n  var choicePatternTasks = state.userTaskInfo.tasks.filter(function (task) {\n    return task.patternInfo.some(function (task) {\n      return task.patternID == updatePatternId;\n    });\n  }); // パターンIDに紐付くタスク一覧からカレンダーへの登録情報を抽出する。\n\n  var updateTasks = choicePatternTasks.map(function (task) {\n    // パターンが複数登録されているタスクへの対応として、選択されているパターンIDに該当する要素だけを抽出する。\n    var taskPattern = task.patternInfo.filter(function (patternInfo) {\n      return patternInfo.patternID == updatePatternId;\n    }); // 配列のタスクと抽出したパターン情報を整形して返す。\n\n    return {\n      order: taskPattern[0].order,\n      detail: task.detail,\n      // detail2: task.detail2,\n      flug: false\n    };\n  });\n\n  var keyMonthList = function keyMonthList(keyYear) {\n    return Object.keys(state.userTaskInfo.calendar[parseInt(keyYear)]);\n  };\n\n  var keyDateList = function keyDateList(keyYear, keyMonth) {\n    return Object.keys(state.userTaskInfo.calendar[parseInt(keyYear)][parseInt(keyMonth)]);\n  };\n\n  var dateTaskUpdate = function dateTaskUpdate(keyYear, keyMonth, keyDate) {\n    if (state.userTaskInfo.calendar[parseInt(keyYear)][parseInt(keyMonth)][parseInt(keyDate)].PatternId == updatePatternId) {\n      state.userTaskInfo.calendar[parseInt(keyYear)][parseInt(keyMonth)][parseInt(keyDate)].tasks = updateTasks;\n      console.log(\"===dateTaskUpdate===\");\n      console.log(keyYear);\n      console.log(keyMonth);\n      console.log(keyDate);\n      console.log(updateTasks);\n    }\n  };\n\n  var diff = function diff(olds, nexts) {\n    return {\n      adds: nexts.filter(function (e) {\n        return !olds.includes(e);\n      }),\n      subs: olds.filter(function (e) {\n        return !nexts.includes(e);\n      })\n    };\n  }; // 登録されている年の連想配列のキーを全て取得\n\n\n  var keyYears = Object.keys(state.userTaskInfo.calendar);\n  keyYears.map(function (keyYear) {\n    if (parseInt(keyYear) == nowYear) {\n      // もし今年だったら、の処理\n      // 登録されている月の連想配列のキーを全て取得\n      var keyMonths = keyMonthList(keyYear);\n      keyMonths.map(function (keyMonth) {\n        if (parseInt(keyMonth) == nowMonth) {\n          // もし今月だったら\n          // 登録されている日の連想配列のキーを全て取得\n          var keyDates = keyDateList(keyYear, keyMonth);\n          keyDates.map(function (keyDate) {\n            if (parseInt(keyDate) > nowDate) {\n              // もし明日以降だったら登録内容を更新する\n              dateTaskUpdate(keyYear, keyMonth, keyDate);\n            } else if (parseInt(keyDate) == nowDate) {\n              // もし今日だったら、変更分だけ反映する。\n              // 処理未作成\n              if (state.userTaskInfo.calendar[parseInt(keyYear)][parseInt(keyMonth)][parseInt(keyDate)].PatternId == updatePatternId) {\n                var result = diff(state.userTaskInfo.calendar[parseInt(keyYear)][parseInt(keyMonth)][parseInt(keyDate)].tasks, updateTasks);\n                var updateArray = state.userTaskInfo.calendar[parseInt(keyYear)][parseInt(keyMonth)][parseInt(keyDate)].tasks.filter(function (task) {\n                  return result.subs.some(function (sub) {\n                    return sub != task;\n                  });\n                });\n                result.adds.map(function (add) {\n                  updateArray.push(add);\n                });\n                state.userTaskInfo.calendar[parseInt(keyYear)][parseInt(keyMonth)][parseInt(keyDate)].tasks = updateArray;\n              }\n            }\n          });\n        } else if (parseInt(keyMonth) > nowMonth) {\n          // もし来月以降だったら、すべて更新する。\n          var _keyDates = keyDateList(keyYear, keyMonth);\n\n          _keyDates.map(function (keyDate) {\n            dateTaskUpdate(keyYear, keyMonth, keyDate);\n          });\n        }\n      });\n    } else if (parseInt(keyYear) > nowYear) {\n      // もし来年以降だったら、の処理。全て更新する。\n      var _keyMonths = keyMonthList(keyYear);\n\n      _keyMonths.map(function (keyMonth) {\n        var keyDates = keyDateList(keyYear, keyMonth);\n        keyDates.map(function (keyDate) {\n          dateTaskUpdate(keyYear, keyMonth, keyDate);\n        });\n      });\n    }\n  });\n  console.log(\"====futurePatternUpdateここまで====\");\n};\n\nvar registerData = useRegisterData();\nvar tasksModule = createSlice({\n  name: \"tasks\",\n  initialState: initialState,\n  reducers: {\n    init: function init(state, action) {\n      var data = action.payload;\n      console.log(\"init data\");\n      console.log(data); // state = {...data};\n      // console.log(\"init state.userTaskInfo 前\");\n      // console.log(state.userTaskInfo);\n\n      state.userTaskInfo = data; // console.log(\"init state.userTaskInfo 後\");\n      // console.log(state.userTaskInfo);\n    },\n    Register: function Register(state, action) {\n      var data = action.payload;\n      state = _objectSpread(_objectSpread({}, state), data); // console.log('state');\n      // console.log(state);\n    },\n    allDelete: function allDelete(state) {\n      state = initialState;\n      console.log(\"check allDelete\");\n    },\n    // DayPlanにてタスクをクリックした際に完了フラグをtrueに変更する処理。引数にて年、月、日、タスクのインデックス番号を受け取っている。\n    taskCheckComplete: function taskCheckComplete(state, action) {\n      var index = state.userTaskInfo.calendar[action.payload[0]][action.payload[1]][action.payload[2]].tasks.findIndex(function (tasks) {\n        return tasks.order == action.payload[3];\n      });\n      console.log(index);\n      state.userTaskInfo.calendar[action.payload[0]][action.payload[1]][action.payload[2]].tasks[index].flug = !state.userTaskInfo.calendar[action.payload[0]][action.payload[1]][action.payload[2]].tasks[index].flug;\n    },\n    // 引数はstateと年、月、日、選択されているパターンIDの4つの数値が格納された配列\n    calendarPatternRegister: function calendarPatternRegister(state, action) {\n      // stateから選択されているパターンIDが設定されているタスクを抽出する。\n      var choicePatternTasks = state.userTaskInfo.tasks.filter(function (task) {\n        return task.patternInfo.some(function (task) {\n          return task.patternID == action.payload[3];\n        });\n      }); // パターンIDに紐付くタスク一覧からカレンダーへの登録情報を抽出する。\n\n      var TodayTasks = choicePatternTasks.map(function (task) {\n        // パターンが複数登録されているタスクへの対応として、選択されているパターンIDに該当する要素だけを抽出する。\n        var taskPattern = task.patternInfo.filter(function (patternInfo) {\n          return patternInfo.patternID == action.payload[3];\n        }); // 配列のタスクと抽出したパターン情報を整形して返す。\n\n        return {\n          order: taskPattern[0].order,\n          detail: task.detail,\n          // detail2: task.detail2,\n          flug: false\n        };\n      }); // ここに年がなかった時の処理を加える\n\n      if (action.payload[0] in state.userTaskInfo.calendar) {\n        // stateのMonthの連想配列に新しい日付の連想配列を追加する。\n        // 追加情報は引数の日とこれまでの処理で作成したカレンダー登録用情報\n        state.userTaskInfo.calendar[action.payload[0]][action.payload[1]] = _objectSpread(_objectSpread({}, state.userTaskInfo.calendar[action.payload[0]][action.payload[1]]), {}, _defineProperty({}, action.payload[2], {\n          PatternId: action.payload[3],\n          tasks: TodayTasks\n        }));\n      } else {\n        // stateのMonthの連想配列に新しい日付の連想配列を追加する。\n        // 追加情報は引数の日とこれまでの処理で作成したカレンダー登録用情報\n        state.userTaskInfo.calendar[action.payload[0]] = _objectSpread(_objectSpread({}, state.userTaskInfo.calendar[action.payload[0]]), {}, _defineProperty({}, action.payload[1], _defineProperty({}, action.payload[2], {\n          PatternId: action.payload[3],\n          tasks: TodayTasks\n        })));\n      } // action.payload[3];\n      // console.log(\n      //     state.userTaskInfo.calendar[action.payload[0]][\n      //         action.payload[1]\n      //     ][action.payload[2]]\n      // );\n\n    },\n    // タスクの詳細を設定する処理。引数のテキスト配列には[入力内容、連想配列のキー、タスクの配列を指定する数字]が格納されている。\n    taskDetailRegister: function taskDetailRegister(state, action) {\n      state.userTaskInfo.tasks[parseInt(action.payload[2])].detail = _objectSpread(_objectSpread({}, state.userTaskInfo.tasks[parseInt(action.payload[2])].detail), {}, _defineProperty({}, action.payload[1], action.payload[0]));\n    },\n    // タスクを追加する処理。引数のテキスト配列には[入力内容、連想配列のキー、タスクの配列を指定する数字]が格納されている。\n    taskRegister: function taskRegister(state, action) {\n      var registerTask = action.payload;\n      registerTask.patternInfo.map(function (content) {\n        var choicePatternTasks = state.userTaskInfo.tasks.filter(function (task) {\n          return task.patternInfo.some(function (task) {\n            return task.patternID == content.patternID;\n          });\n        });\n        content.order = choicePatternTasks.length + 1;\n      });\n      console.log(registerTask);\n      state.userTaskInfo.tasks.push(registerTask);\n    },\n    // タスクのパターン登録状況を更新する。\n    taskPatternUpdate: function taskPatternUpdate(state, action) {\n      // ここでやることは？\n      // まず引数にタスクの配列インデックス番号が必要\n      // パターンIDの配列を受け取る。\n      // 配列とstateを比較して、なければ登録。Orderは最大値+1。逆に削除されているものは除外。\n      var statePatternIdList = state.userTaskInfo.tasks[action.payload.index].patternInfo.map(function (content) {\n        return content.patternID;\n      });\n      console.log(\"statePatternIdList\");\n      console.log(statePatternIdList);\n\n      var diff = function diff(olds, nexts) {\n        return {\n          adds: nexts.filter(function (e) {\n            return !olds.includes(e);\n          }),\n          subs: olds.filter(function (e) {\n            return !nexts.includes(e);\n          })\n        };\n      };\n\n      var result = diff(statePatternIdList, action.payload.newChecked);\n      var updateArray;\n      console.log(result); // stateから削除対象を除外した配列を抽出する。\n\n      if (result.subs.length > 0) {\n        updateArray = state.userTaskInfo.tasks[action.payload.index].patternInfo.filter(function (content) {\n          // futurePatternUpdate(state,);\n          return result.subs.some(function (sub) {\n            return sub != content.patternID;\n          });\n        });\n      } else {\n        updateArray = state.userTaskInfo.tasks[action.payload.index].patternInfo;\n      }\n\n      console.log(\"1:updateArray\");\n      console.log(updateArray); //\n\n      result.adds.map(function (add) {\n        var Max = 0; // 追加されたIDが設定されているタスクを抽出する。\n\n        var choicePatternTasks = state.userTaskInfo.tasks.filter(function (task) {\n          return task.patternInfo.some(function (taskPatternInfo) {\n            return taskPatternInfo.patternID == add;\n          });\n        }); //\n\n        choicePatternTasks.map(function (task) {\n          // 抽出された各タスクのパターンIDを比較し、最大値を取得する。\n          var content = task.patternInfo.find(function (info) {\n            return info.patternID == add;\n          });\n          Max < content.patternID ? Max = content.patternID : \"\";\n        });\n        var pushContent = {\n          patternID: add,\n          order: Max + 1\n        };\n        updateArray.push(pushContent);\n        futurePatternUpdate(state, add);\n      });\n      console.log(\"2:updateArray\");\n      console.log(updateArray);\n      state.userTaskInfo.tasks[action.payload.index].patternInfo = updateArray;\n    },\n    // タスクを削除する処理。引数には削除対象タスクのインデックス番号が格納されている。\n    taskDelete: function taskDelete(state, action) {\n      // const deleteTask = state.userTaskInfo.tasks.splice(\n      //     action.payload,\n      //     1\n      // );\n      var deleteTask = state.userTaskInfo.tasks.filter(function (content, index) {\n        return index != action.payload;\n      });\n      console.log(deleteTask);\n      state.userTaskInfo.tasks = deleteTask;\n    },\n    // タスクをパターンから除外する処理。引数のオブジェクトにはパターンIDと削除対象タスクの名称が格納されている。\n    taskRemovePattern: function taskRemovePattern(state, action) {\n      var index = state.userTaskInfo.tasks.findIndex(function (content) {\n        return content.detail[\"タスク名\"] == action.payload.detailTitle;\n      });\n      var deletedTask = state.userTaskInfo.tasks[index].patternInfo.filter(function (content) {\n        return content.patternID != action.payload.patternId;\n      });\n      state.userTaskInfo.tasks[index].patternInfo = deletedTask;\n      console.log(deletedTask); // futurePatternUpdate(state);\n    },\n    // パターンを追加する処理。引数にはパターン名称が格納されている。\n    patternRegister: function patternRegister(state, action) {\n      var MaxId = 0;\n      state.userTaskInfo.pattern.map(function (patternContent) {\n        patternContent.patternId > MaxId ? MaxId = patternContent.patternId : \"\";\n      });\n      var addPattern = {\n        patternId: MaxId + 1,\n        patternName: action.payload\n      };\n      state.userTaskInfo.pattern.push(addPattern);\n    },\n    // パターンを削除する処理。引数にはパターンIDが格納されている。\n    patternDelete: function patternDelete(state, action) {\n      var updatePatternList = state.userTaskInfo.pattern.filter(function (patternContent) {\n        // console.log(patternContent.patternId);\n        // console.log(action.payload);\n        return patternContent.patternId != action.payload;\n      });\n      console.log(updatePatternList);\n      state.userTaskInfo.pattern = updatePatternList; // タスクとカレンダーに保管されているパターンを全て削除する必要がある\n      // カレンダーは未来分だけ\n      // state.userTaskInfo.tasksに保管されているパターン情報を削除する。\n\n      var updateTaskList = state.userTaskInfo.tasks.map(function (task) {\n        var updatePatternInfo = task.patternInfo.filter(function (taskPatternInfo) {\n          return taskPatternInfo.patternID != action.payload;\n        });\n        var updateTask = {\n          detail: task.detail,\n          patternInfo: updatePatternInfo\n        };\n        return updateTask;\n      });\n      console.log(\"after:updateTaskList\");\n      console.log(updateTaskList);\n      state.userTaskInfo.tasks = updateTaskList; // state.userTaskInfo.calendarの未来分に保管されているパターン情報を削除する。\n\n      var today = new Date();\n      var nowYear = today.getFullYear();\n      var nowMonth = today.getMonth() + 1;\n      var nowDate = today.getDate();\n      var keyYears = Object.keys(state.userTaskInfo.calendar);\n\n      var deleteCalendarDate = function deleteCalendarDate(year, month, date) {\n        if (state.userTaskInfo.calendar[parseInt(year)][parseInt(month)][parseInt(date)].PatternId == action.payload) {\n          delete state.userTaskInfo.calendar[parseInt(year)][parseInt(month)][parseInt(date)];\n        }\n      };\n\n      keyYears.map(function (year) {\n        var keyMonth = Object.keys(state.userTaskInfo.calendar[parseInt(year)]);\n\n        if (parseInt(year) > nowYear) {\n          // 対象が来年以降である場合、削除する。deleteのほうがいい\n          keyMonth.map(function (month) {\n            var keyDate = Object.keys(state.userTaskInfo.calendar[parseInt(year)][parseInt(month)]);\n            keyDate.map(function (date) {\n              deleteCalendarDate(year, month, date);\n            });\n          });\n        } else if (parseInt(year) == nowYear) {\n          // 対象が今年である場合\n          keyMonth.map(function (month) {\n            var keyDate = Object.keys(state.userTaskInfo.calendar[parseInt(year)][parseInt(month)]);\n\n            if (parseInt(month) > nowMonth) {\n              // 来月以降の場合、削除する。deleteのほうがいい\n              console.log(keyDate);\n              keyDate.map(function (date) {\n                deleteCalendarDate(year, month, date);\n              });\n            } else if (parseInt(month) == nowMonth) {\n              // 今月の場合\n              keyDate.map(function (date) {\n                if (parseInt(date) > nowDate) {\n                  // 明日以降の場合、削除する\n                  deleteCalendarDate(year, month, date);\n                }\n              });\n            }\n          });\n        }\n      });\n    },\n    // パターン名称を編集する処理。引数にはパターンIDとパターン名称が格納されている。\n    patternNameEdit: function patternNameEdit(state, action) {\n      // IDに合致する要素のインデックス番号を取得\n      var editPatternIndex = state.userTaskInfo.pattern.findIndex(function (patternContent) {\n        return patternContent.patternId == action.payload.editPatternId;\n      }); // 取得したインデックス番号を目印に、引数の新しい名称で更新する。\n\n      state.userTaskInfo.pattern[editPatternIndex].patternName = action.payload.patternName;\n    }\n  }\n});\nvar _tasksModule$actions = tasksModule.actions,\n    init = _tasksModule$actions.init,\n    Register = _tasksModule$actions.Register,\n    allDelete = _tasksModule$actions.allDelete,\n    taskCheckComplete = _tasksModule$actions.taskCheckComplete,\n    calendarPatternRegister = _tasksModule$actions.calendarPatternRegister,\n    taskDetailRegister = _tasksModule$actions.taskDetailRegister,\n    taskRegister = _tasksModule$actions.taskRegister,\n    taskPatternUpdate = _tasksModule$actions.taskPatternUpdate,\n    taskDelete = _tasksModule$actions.taskDelete,\n    taskRemovePattern = _tasksModule$actions.taskRemovePattern,\n    patternRegister = _tasksModule$actions.patternRegister,\n    patternDelete = _tasksModule$actions.patternDelete,\n    patternNameEdit = _tasksModule$actions.patternNameEdit;\nexport { init, Register, allDelete, taskCheckComplete, calendarPatternRegister, taskDetailRegister, taskRegister, taskPatternUpdate, taskDelete, taskRemovePattern, patternRegister, patternDelete, patternNameEdit };\nexport default tasksModule;","map":{"version":3,"sources":["C:/Users/blelm/Desktop/AppCreate/habitPlan/src/modules/tasksModule.tsx"],"names":["createSlice","useRegisterData","initialState","userTaskInfo","calendar","Date","getFullYear","getMonth","getDate","PatternId","tasks","order","detail","flug","pattern","patternId","patternName","patternInfo","patternID","futurePatternUpdate","state","updatePatternId","console","log","Object","keys","today","nowYear","nowMonth","nowDate","choicePatternTasks","filter","task","some","updateTasks","map","taskPattern","keyMonthList","keyYear","parseInt","keyDateList","keyMonth","dateTaskUpdate","keyDate","diff","olds","nexts","adds","e","includes","subs","keyYears","keyMonths","keyDates","result","updateArray","sub","add","push","registerData","tasksModule","name","reducers","init","action","data","payload","Register","allDelete","taskCheckComplete","index","findIndex","calendarPatternRegister","TodayTasks","taskDetailRegister","taskRegister","registerTask","content","length","taskPatternUpdate","statePatternIdList","newChecked","Max","taskPatternInfo","find","info","pushContent","taskDelete","deleteTask","taskRemovePattern","detailTitle","deletedTask","patternRegister","MaxId","patternContent","addPattern","patternDelete","updatePatternList","updateTaskList","updatePatternInfo","updateTask","deleteCalendarDate","year","month","date","patternNameEdit","editPatternIndex","editPatternId","actions"],"mappings":"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","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { subSeconds } from \"date-fns\";\r\nimport { useRegisterData } from \"../components/test/firebaseTest/DBFetch\";\r\nimport {\r\n    calendar,\r\n    pattern,\r\n    tasks,\r\n    userTask,\r\n    userTaskInfo,\r\n} from \"./userTasksType\";\r\n\r\ntype State = {\r\n    [key: string]: string;\r\n};\r\n\r\nconst initialState: userTask = {\r\n    userTaskInfo: {\r\n        calendar: {\r\n            [new Date(\"Thu, 22 Oct 2020 02:00:00\").getFullYear()]: {\r\n                [new Date(\"Thu, 22 Oct 2020 02:00:00\").getMonth() + 1]: {\r\n                    [new Date(\"Thu, 22 Oct 2020 02:00:00\").getDate()]: {\r\n                        PatternId: 1,\r\n                        tasks: [\r\n                            {\r\n                                order: 1,\r\n                                detail: {\r\n                                    [\"タスク名\"]: \"タスク名 22 1\",\r\n                                    [\"testDetail1\"]: \"testDetail1 22 1\",\r\n                                    [\"testDetail2\"]: \"testDetail1 22 1\",\r\n                                },\r\n                                flug: false,\r\n                            },\r\n                            {\r\n                                order: 2,\r\n                                detail: {\r\n                                    [\"タスク名\"]: \"タスク名 22 2\",\r\n                                    [\"testDetail1\"]: \"testDetail1 22 2\",\r\n                                    [\"testDetail2\"]: \"testDetail1 22 2\",\r\n                                },\r\n                                flug: false,\r\n                            },\r\n                        ],\r\n                    },\r\n                    [new Date(\"Thu, 23 Oct 2020 02:00:00\").getDate()]: {\r\n                        PatternId: 1,\r\n                        tasks: [\r\n                            {\r\n                                order: 1,\r\n                                detail: {\r\n                                    [\"タスク名\"]: \"タスク名 23 1\",\r\n                                    [\"testDetail1\"]: \"testDetail1 23 1\",\r\n                                    [\"testDetail2\"]: \"testDetail1 23 1\",\r\n                                },\r\n                                flug: false,\r\n                            },\r\n                            {\r\n                                order: 2,\r\n                                detail: {\r\n                                    [\"タスク名\"]: \"タスク名 23 2\",\r\n                                    [\"testDetail1\"]: \"testDetail1 23 2\",\r\n                                    [\"testDetail2\"]: \"testDetail1 23 2\",\r\n                                },\r\n                                flug: false,\r\n                            },\r\n                        ],\r\n                    },\r\n                },\r\n            },\r\n        },\r\n\r\n        pattern: [\r\n            {\r\n                patternId: 1,\r\n                patternName: \"testPattern1\",\r\n            },\r\n            {\r\n                patternId: 2,\r\n                patternName: \"testPattern2\",\r\n            },\r\n        ],\r\n        tasks: [\r\n            {\r\n                detail: {\r\n                    [\"タスク名\"]: \"タスク名 22 1\",\r\n                    [\"defalut\"]: \"defalut\",\r\n                    [\"testDetail1\"]: \"testDetail1 22 1\",\r\n                    [\"testDetail2\"]: \"testDetail1 22 1\",\r\n                },\r\n                patternInfo: [\r\n                    {\r\n                        patternID: 1,\r\n                        order: 1,\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                detail: {\r\n                    [\"タスク名\"]: \"タスク名 22 2\",\r\n                    [\"defalut\"]: \"defalut\",\r\n                    [\"testDetail1\"]: \"testDetail1 22 2\",\r\n                    [\"testDetail2\"]: \"testDetail1 22 2\",\r\n                },\r\n                patternInfo: [\r\n                    {\r\n                        patternID: 1,\r\n                        order: 2,\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                detail: {\r\n                    [\"タスク名\"]: \"タスク名 23 1\",\r\n                    [\"defalut\"]: \"defalut\",\r\n                    [\"testDetail1\"]: \"testDetail1 23 1\",\r\n                    [\"testDetail2\"]: \"testDetail1 23 1\",\r\n                },\r\n                patternInfo: [\r\n                    {\r\n                        patternID: 2,\r\n                        order: 1,\r\n                    },\r\n                    {\r\n                        patternID: 1,\r\n                        order: 3,\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                detail: {\r\n                    [\"タスク名\"]: \"タスク名 23 2\",\r\n                    [\"defalut\"]: \"defalut\",\r\n                    [\"testDetail2\"]: \"testDetail1 23 2\",\r\n                    [\"testDetail1\"]: \"testDetail1 23 2\",\r\n                },\r\n                patternInfo: [\r\n                    {\r\n                        patternID: 2,\r\n                        order: 2,\r\n                    },\r\n                ],\r\n            },\r\n        ],\r\n    },\r\n};\r\n\r\n// const diff = (olds: any[], nexts: any[]) => ({\r\n//     adds: nexts.filter((e) => !olds.includes(e)),\r\n//     subs: olds.filter((e) => !nexts.includes(e)),\r\n// });\r\n\r\n// パターン更新時に未来に設定されているパターンの内容を更新する。\r\n// 更新対象はstate.calendar.tasks\r\n// 年月日が未来であり、かつ、パターンIDが同じものを対象に新しいパターンを登録する。\r\nconst futurePatternUpdate = (state: userTask, updatePatternId: number) => {\r\n    console.log(\"====futurePatternUpdateここから====\");\r\n\r\n    console.log(Object.keys(state.userTaskInfo.calendar));\r\n    const today = new Date();\r\n    const nowYear = today.getFullYear();\r\n    const nowMonth = today.getMonth() + 1;\r\n    const nowDate = today.getDate();\r\n\r\n    const choicePatternTasks = state.userTaskInfo.tasks.filter(function (task) {\r\n        return task.patternInfo.some(\r\n            (task) => task.patternID == updatePatternId\r\n        );\r\n    });\r\n\r\n    // パターンIDに紐付くタスク一覧からカレンダーへの登録情報を抽出する。\r\n    const updateTasks = choicePatternTasks.map((task) => {\r\n        // パターンが複数登録されているタスクへの対応として、選択されているパターンIDに該当する要素だけを抽出する。\r\n        const taskPattern = task.patternInfo.filter(function (patternInfo) {\r\n            return patternInfo.patternID == updatePatternId;\r\n        });\r\n\r\n        // 配列のタスクと抽出したパターン情報を整形して返す。\r\n        return {\r\n            order: taskPattern[0].order,\r\n            detail: task.detail,\r\n            // detail2: task.detail2,\r\n            flug: false,\r\n        };\r\n    });\r\n\r\n    const keyMonthList = (keyYear: string) => {\r\n        return Object.keys(state.userTaskInfo.calendar[parseInt(keyYear)]);\r\n    };\r\n    const keyDateList = (keyYear: string, keyMonth: string) => {\r\n        return Object.keys(\r\n            state.userTaskInfo.calendar[parseInt(keyYear)][parseInt(keyMonth)]\r\n        );\r\n    };\r\n\r\n    const dateTaskUpdate = (\r\n        keyYear: string,\r\n        keyMonth: string,\r\n        keyDate: string\r\n    ) => {\r\n        if (\r\n            state.userTaskInfo.calendar[parseInt(keyYear)][parseInt(keyMonth)][\r\n                parseInt(keyDate)\r\n            ].PatternId == updatePatternId\r\n        ) {\r\n            state.userTaskInfo.calendar[parseInt(keyYear)][parseInt(keyMonth)][\r\n                parseInt(keyDate)\r\n            ].tasks = updateTasks;\r\n            console.log(\"===dateTaskUpdate===\");\r\n            console.log(keyYear);\r\n            console.log(keyMonth);\r\n            console.log(keyDate);\r\n            console.log(updateTasks);\r\n        }\r\n    };\r\n\r\n    type calendarPattern = {\r\n        order: number;\r\n        detail: {\r\n            [content: string]: string;\r\n        };\r\n        flug: boolean;\r\n    };\r\n\r\n    const diff = (olds: calendarPattern[], nexts: calendarPattern[]) => ({\r\n        adds: nexts.filter((e) => !olds.includes(e)),\r\n        subs: olds.filter((e) => !nexts.includes(e)),\r\n    });\r\n\r\n    // 登録されている年の連想配列のキーを全て取得\r\n    const keyYears = Object.keys(state.userTaskInfo.calendar);\r\n    keyYears.map((keyYear) => {\r\n        if (parseInt(keyYear) == nowYear) {\r\n            // もし今年だったら、の処理\r\n            // 登録されている月の連想配列のキーを全て取得\r\n            const keyMonths = keyMonthList(keyYear);\r\n\r\n            keyMonths.map((keyMonth) => {\r\n                if (parseInt(keyMonth) == nowMonth) {\r\n                    // もし今月だったら\r\n                    // 登録されている日の連想配列のキーを全て取得\r\n                    const keyDates = keyDateList(keyYear, keyMonth);\r\n                    keyDates.map((keyDate) => {\r\n                        if (parseInt(keyDate) > nowDate) {\r\n                            // もし明日以降だったら登録内容を更新する\r\n                            dateTaskUpdate(keyYear, keyMonth, keyDate);\r\n                        } else if (parseInt(keyDate) == nowDate) {\r\n                            // もし今日だったら、変更分だけ反映する。\r\n                            // 処理未作成\r\n                            if (\r\n                                state.userTaskInfo.calendar[parseInt(keyYear)][\r\n                                    parseInt(keyMonth)\r\n                                ][parseInt(keyDate)].PatternId ==\r\n                                updatePatternId\r\n                            ) {\r\n                                const result = diff(\r\n                                    state.userTaskInfo.calendar[\r\n                                        parseInt(keyYear)\r\n                                    ][parseInt(keyMonth)][parseInt(keyDate)]\r\n                                        .tasks,\r\n                                    updateTasks\r\n                                );\r\n                                const updateArray = state.userTaskInfo.calendar[\r\n                                    parseInt(keyYear)\r\n                                ][parseInt(keyMonth)][\r\n                                    parseInt(keyDate)\r\n                                ].tasks.filter(function (task) {\r\n                                    return result.subs.some(\r\n                                        (sub) => sub != task\r\n                                    );\r\n                                });\r\n\r\n                                result.adds.map((add) => {\r\n                                    updateArray.push(add);\r\n                                });\r\n                                state.userTaskInfo.calendar[parseInt(keyYear)][\r\n                                    parseInt(keyMonth)\r\n                                ][parseInt(keyDate)].tasks = updateArray;\r\n                            }\r\n                        }\r\n                    });\r\n                } else if (parseInt(keyMonth) > nowMonth) {\r\n                    // もし来月以降だったら、すべて更新する。\r\n                    const keyDates = keyDateList(keyYear, keyMonth);\r\n                    keyDates.map((keyDate) => {\r\n                        dateTaskUpdate(keyYear, keyMonth, keyDate);\r\n                    });\r\n                }\r\n            });\r\n        } else if (parseInt(keyYear) > nowYear) {\r\n            // もし来年以降だったら、の処理。全て更新する。\r\n            const keyMonths = keyMonthList(keyYear);\r\n            keyMonths.map((keyMonth) => {\r\n                const keyDates = keyDateList(keyYear, keyMonth);\r\n                keyDates.map((keyDate) => {\r\n                    dateTaskUpdate(keyYear, keyMonth, keyDate);\r\n                });\r\n            });\r\n        }\r\n    });\r\n\r\n    console.log(\"====futurePatternUpdateここまで====\");\r\n};\r\n\r\nconst registerData = useRegisterData();\r\n\r\nconst tasksModule = createSlice({\r\n    name: \"tasks\",\r\n    initialState,\r\n    reducers: {\r\n        init(state: userTask, action: PayloadAction<userTaskInfo>) {\r\n            const data = action.payload;\r\n            console.log(\"init data\");\r\n            console.log(data);\r\n            // state = {...data};\r\n            // console.log(\"init state.userTaskInfo 前\");\r\n            // console.log(state.userTaskInfo);\r\n            state.userTaskInfo = data;\r\n            // console.log(\"init state.userTaskInfo 後\");\r\n            // console.log(state.userTaskInfo);\r\n        },\r\n        Register(state: userTask, action: PayloadAction<userTask>) {\r\n            const data = action.payload;\r\n\r\n            state = { ...state, ...data };\r\n            // console.log('state');\r\n            // console.log(state);\r\n        },\r\n        allDelete(state: userTask) {\r\n            state = initialState;\r\n            console.log(\"check allDelete\");\r\n        },\r\n        // DayPlanにてタスクをクリックした際に完了フラグをtrueに変更する処理。引数にて年、月、日、タスクのインデックス番号を受け取っている。\r\n        taskCheckComplete(state: userTask, action: PayloadAction<number[]>) {\r\n            const index = state.userTaskInfo.calendar[action.payload[0]][\r\n                action.payload[1]\r\n            ][action.payload[2]].tasks.findIndex(\r\n                (tasks) => tasks.order == action.payload[3]\r\n            );\r\n            console.log(index);\r\n            state.userTaskInfo.calendar[action.payload[0]][action.payload[1]][\r\n                action.payload[2]\r\n            ].tasks[index].flug = !state.userTaskInfo.calendar[\r\n                action.payload[0]\r\n            ][action.payload[1]][action.payload[2]].tasks[index].flug;\r\n            \r\n        },\r\n        // 引数はstateと年、月、日、選択されているパターンIDの4つの数値が格納された配列\r\n        calendarPatternRegister(\r\n            state: userTask,\r\n            action: PayloadAction<number[]>\r\n        ) {\r\n            // stateから選択されているパターンIDが設定されているタスクを抽出する。\r\n            const choicePatternTasks = state.userTaskInfo.tasks.filter(\r\n                function (task) {\r\n                    return task.patternInfo.some(\r\n                        (task) => task.patternID == action.payload[3]\r\n                    );\r\n                }\r\n            );\r\n\r\n            // パターンIDに紐付くタスク一覧からカレンダーへの登録情報を抽出する。\r\n            const TodayTasks = choicePatternTasks.map((task) => {\r\n                // パターンが複数登録されているタスクへの対応として、選択されているパターンIDに該当する要素だけを抽出する。\r\n                const taskPattern = task.patternInfo.filter(function (\r\n                    patternInfo\r\n                ) {\r\n                    return patternInfo.patternID == action.payload[3];\r\n                });\r\n\r\n                // 配列のタスクと抽出したパターン情報を整形して返す。\r\n                return {\r\n                    order: taskPattern[0].order,\r\n                    detail: task.detail,\r\n                    // detail2: task.detail2,\r\n                    flug: false,\r\n                };\r\n            });\r\n\r\n            // ここに年がなかった時の処理を加える\r\n            if (action.payload[0] in state.userTaskInfo.calendar) {\r\n                // stateのMonthの連想配列に新しい日付の連想配列を追加する。\r\n                // 追加情報は引数の日とこれまでの処理で作成したカレンダー登録用情報\r\n                state.userTaskInfo.calendar[action.payload[0]][\r\n                    action.payload[1]\r\n                ] = {\r\n                    ...state.userTaskInfo.calendar[action.payload[0]][\r\n                        action.payload[1]\r\n                    ],\r\n                    [action.payload[2]]: {\r\n                        PatternId: action.payload[3],\r\n                        tasks: TodayTasks,\r\n                    },\r\n                };\r\n            } else {\r\n                // stateのMonthの連想配列に新しい日付の連想配列を追加する。\r\n                // 追加情報は引数の日とこれまでの処理で作成したカレンダー登録用情報\r\n                state.userTaskInfo.calendar[action.payload[0]] = {\r\n                    ...state.userTaskInfo.calendar[action.payload[0]],\r\n                    [action.payload[1]]: {\r\n                        [action.payload[2]]: {\r\n                            PatternId: action.payload[3],\r\n                            tasks: TodayTasks,\r\n                        },\r\n                    },\r\n                };\r\n            }\r\n\r\n            // action.payload[3];\r\n            // console.log(\r\n            //     state.userTaskInfo.calendar[action.payload[0]][\r\n            //         action.payload[1]\r\n            //     ][action.payload[2]]\r\n            // );\r\n            \r\n        },\r\n        // タスクの詳細を設定する処理。引数のテキスト配列には[入力内容、連想配列のキー、タスクの配列を指定する数字]が格納されている。\r\n        taskDetailRegister(state: userTask, action: PayloadAction<string[]>) {\r\n            state.userTaskInfo.tasks[parseInt(action.payload[2])].detail = {\r\n                ...state.userTaskInfo.tasks[parseInt(action.payload[2])].detail,\r\n                [action.payload[1]]: action.payload[0],\r\n            };\r\n            \r\n        },\r\n        // タスクを追加する処理。引数のテキスト配列には[入力内容、連想配列のキー、タスクの配列を指定する数字]が格納されている。\r\n        taskRegister(state: userTask, action: PayloadAction<tasks>) {\r\n            const registerTask = action.payload;\r\n            registerTask.patternInfo.map((content) => {\r\n                const choicePatternTasks = state.userTaskInfo.tasks.filter(\r\n                    function (task) {\r\n                        return task.patternInfo.some(\r\n                            (task) => task.patternID == content.patternID\r\n                        );\r\n                    }\r\n                );\r\n                content.order = choicePatternTasks.length + 1;\r\n            });\r\n            console.log(registerTask);\r\n            state.userTaskInfo.tasks.push(registerTask);\r\n            \r\n        },\r\n        // タスクのパターン登録状況を更新する。\r\n        taskPatternUpdate(\r\n            state: userTask,\r\n            action: PayloadAction<{\r\n                newChecked: number[];\r\n                index: number;\r\n            }>\r\n        ) {\r\n            // ここでやることは？\r\n            // まず引数にタスクの配列インデックス番号が必要\r\n            // パターンIDの配列を受け取る。\r\n            // 配列とstateを比較して、なければ登録。Orderは最大値+1。逆に削除されているものは除外。\r\n\r\n            const statePatternIdList = state.userTaskInfo.tasks[\r\n                action.payload.index\r\n            ].patternInfo.map((content) => {\r\n                return content.patternID;\r\n            });\r\n            console.log(\"statePatternIdList\");\r\n            console.log(statePatternIdList);\r\n            const diff = (olds: number[], nexts: number[]) => ({\r\n                adds: nexts.filter((e) => !olds.includes(e)),\r\n                subs: olds.filter((e) => !nexts.includes(e)),\r\n            });\r\n            const result = diff(statePatternIdList, action.payload.newChecked);\r\n            let updateArray: {\r\n                patternID: number;\r\n                order: number;\r\n            }[];\r\n            console.log(result);\r\n\r\n            // stateから削除対象を除外した配列を抽出する。\r\n            if (result.subs.length > 0) {\r\n                updateArray = state.userTaskInfo.tasks[\r\n                    action.payload.index\r\n                ].patternInfo.filter(function (content) {\r\n                    // futurePatternUpdate(state,);\r\n                    return result.subs.some((sub) => sub != content.patternID);\r\n                });\r\n            } else {\r\n                updateArray =\r\n                    state.userTaskInfo.tasks[action.payload.index].patternInfo;\r\n            }\r\n\r\n            console.log(\"1:updateArray\");\r\n            console.log(updateArray);\r\n\r\n            //\r\n            result.adds.map((add) => {\r\n                let Max: number = 0;\r\n                // 追加されたIDが設定されているタスクを抽出する。\r\n                const choicePatternTasks = state.userTaskInfo.tasks.filter(\r\n                    function (task) {\r\n                        return task.patternInfo.some(\r\n                            (taskPatternInfo) =>\r\n                                taskPatternInfo.patternID == add\r\n                        );\r\n                    }\r\n                );\r\n                //\r\n                choicePatternTasks.map((task) => {\r\n                    // 抽出された各タスクのパターンIDを比較し、最大値を取得する。\r\n                    let content = task.patternInfo.find(\r\n                        (info) => info.patternID == add\r\n                    );\r\n                    Max < content.patternID ? (Max = content.patternID) : \"\";\r\n                });\r\n\r\n                const pushContent = { patternID: add, order: Max + 1 };\r\n                updateArray.push(pushContent);\r\n                futurePatternUpdate(state, add);\r\n            });\r\n            console.log(\"2:updateArray\");\r\n            console.log(updateArray);\r\n\r\n            state.userTaskInfo.tasks[\r\n                action.payload.index\r\n            ].patternInfo = updateArray;\r\n            \r\n        },\r\n        // タスクを削除する処理。引数には削除対象タスクのインデックス番号が格納されている。\r\n        taskDelete(state: userTask, action: PayloadAction<number>) {\r\n            // const deleteTask = state.userTaskInfo.tasks.splice(\r\n            //     action.payload,\r\n            //     1\r\n            // );\r\n            const deleteTask = state.userTaskInfo.tasks.filter(function (\r\n                content,\r\n                index\r\n            ) {\r\n                return index != action.payload;\r\n            });\r\n            console.log(deleteTask);\r\n            state.userTaskInfo.tasks = deleteTask;\r\n            \r\n        },\r\n        // タスクをパターンから除外する処理。引数のオブジェクトにはパターンIDと削除対象タスクの名称が格納されている。\r\n        taskRemovePattern(\r\n            state: userTask,\r\n            action: PayloadAction<{ patternId: number; detailTitle: string }>\r\n        ) {\r\n            const index = state.userTaskInfo.tasks.findIndex((content) => {\r\n                return content.detail[\"タスク名\"] == action.payload.detailTitle;\r\n            });\r\n            const deletedTask = state.userTaskInfo.tasks[\r\n                index\r\n            ].patternInfo.filter(function (content) {\r\n                return content.patternID != action.payload.patternId;\r\n            });\r\n            state.userTaskInfo.tasks[index].patternInfo = deletedTask;\r\n            console.log(deletedTask);\r\n            // futurePatternUpdate(state);\r\n            \r\n        },\r\n        // パターンを追加する処理。引数にはパターン名称が格納されている。\r\n        patternRegister(state: userTask, action: PayloadAction<string>) {\r\n            let MaxId: number = 0;\r\n            state.userTaskInfo.pattern.map((patternContent) => {\r\n                patternContent.patternId > MaxId\r\n                    ? (MaxId = patternContent.patternId)\r\n                    : \"\";\r\n            });\r\n            const addPattern = {\r\n                patternId: MaxId + 1,\r\n                patternName: action.payload,\r\n            };\r\n            state.userTaskInfo.pattern.push(addPattern);\r\n            \r\n        },\r\n        // パターンを削除する処理。引数にはパターンIDが格納されている。\r\n        patternDelete(state: userTask, action: PayloadAction<number>) {\r\n            const updatePatternList = state.userTaskInfo.pattern.filter(\r\n                (patternContent) => {\r\n                    // console.log(patternContent.patternId);\r\n                    // console.log(action.payload);\r\n                    return patternContent.patternId != action.payload;\r\n                }\r\n            );\r\n\r\n            console.log(updatePatternList);\r\n            state.userTaskInfo.pattern = updatePatternList;\r\n\r\n            // タスクとカレンダーに保管されているパターンを全て削除する必要がある\r\n            // カレンダーは未来分だけ\r\n\r\n            // state.userTaskInfo.tasksに保管されているパターン情報を削除する。\r\n            let updateTaskList = state.userTaskInfo.tasks.map((task) => {\r\n                const updatePatternInfo = task.patternInfo.filter(\r\n                    (taskPatternInfo) => {\r\n                        return taskPatternInfo.patternID != action.payload;\r\n                    }\r\n                );\r\n                const updateTask: {\r\n                    detail: {\r\n                        [content: string]: string;\r\n                    };\r\n                    patternInfo: {\r\n                        patternID: number;\r\n                        order: number;\r\n                    }[];\r\n                } = { detail: task.detail, patternInfo: updatePatternInfo };\r\n                return updateTask;\r\n            });\r\n            console.log(\"after:updateTaskList\");\r\n            console.log(updateTaskList);\r\n            state.userTaskInfo.tasks = updateTaskList;\r\n\r\n            // state.userTaskInfo.calendarの未来分に保管されているパターン情報を削除する。\r\n            const today = new Date();\r\n            const nowYear = today.getFullYear();\r\n            const nowMonth = today.getMonth() + 1;\r\n            const nowDate = today.getDate();\r\n            const keyYears = Object.keys(state.userTaskInfo.calendar);\r\n            const deleteCalendarDate = (\r\n                year: string,\r\n                month: string,\r\n                date: string\r\n            ) => {\r\n                if (\r\n                    state.userTaskInfo.calendar[parseInt(year)][\r\n                        parseInt(month)\r\n                    ][parseInt(date)].PatternId == action.payload\r\n                ) {\r\n                    delete state.userTaskInfo.calendar[parseInt(year)][\r\n                        parseInt(month)\r\n                    ][parseInt(date)];\r\n                }\r\n            };\r\n            keyYears.map((year) => {\r\n                const keyMonth = Object.keys(\r\n                    state.userTaskInfo.calendar[parseInt(year)]\r\n                );\r\n                if (parseInt(year) > nowYear) {\r\n                    // 対象が来年以降である場合、削除する。deleteのほうがいい\r\n                    keyMonth.map((month) => {\r\n                        const keyDate = Object.keys(\r\n                            state.userTaskInfo.calendar[parseInt(year)][\r\n                                parseInt(month)\r\n                            ]\r\n                        );\r\n                        keyDate.map((date) => {\r\n                            deleteCalendarDate(year, month, date);\r\n                        });\r\n                    });\r\n                } else if (parseInt(year) == nowYear) {\r\n                    // 対象が今年である場合\r\n                    keyMonth.map((month) => {\r\n                        const keyDate = Object.keys(\r\n                            state.userTaskInfo.calendar[parseInt(year)][\r\n                                parseInt(month)\r\n                            ]\r\n                        );\r\n                        if (parseInt(month) > nowMonth) {\r\n                            // 来月以降の場合、削除する。deleteのほうがいい\r\n                            console.log(keyDate);\r\n                            keyDate.map((date) => {\r\n                                deleteCalendarDate(year, month, date);\r\n                            });\r\n                        } else if (parseInt(month) == nowMonth) {\r\n                            // 今月の場合\r\n                            keyDate.map((date) => {\r\n                                if (parseInt(date) > nowDate) {\r\n                                    // 明日以降の場合、削除する\r\n                                    deleteCalendarDate(year, month, date);\r\n                                }\r\n                            });\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n            \r\n        },\r\n        // パターン名称を編集する処理。引数にはパターンIDとパターン名称が格納されている。\r\n        patternNameEdit(\r\n            state: userTask,\r\n            action: PayloadAction<{\r\n                editPatternId: number;\r\n                patternName: string;\r\n            }>\r\n        ) {\r\n            // IDに合致する要素のインデックス番号を取得\r\n            const editPatternIndex = state.userTaskInfo.pattern.findIndex(\r\n                (patternContent) =>\r\n                    patternContent.patternId == action.payload.editPatternId\r\n            );\r\n            // 取得したインデックス番号を目印に、引数の新しい名称で更新する。\r\n            state.userTaskInfo.pattern[editPatternIndex].patternName =\r\n                action.payload.patternName;\r\n            \r\n        },\r\n    },\r\n});\r\n\r\nexport const {\r\n    init,\r\n    Register,\r\n    allDelete,\r\n    taskCheckComplete,\r\n    calendarPatternRegister,\r\n    taskDetailRegister,\r\n    taskRegister,\r\n    taskPatternUpdate,\r\n    taskDelete,\r\n    taskRemovePattern,\r\n    patternRegister,\r\n    patternDelete,\r\n    patternNameEdit,\r\n} = tasksModule.actions;\r\n\r\nexport default tasksModule;\r\n"]},"metadata":{},"sourceType":"module"}