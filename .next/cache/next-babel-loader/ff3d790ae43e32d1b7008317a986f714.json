{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\blelm\\\\Desktop\\\\AppCreate\\\\habitPlan\\\\src\\\\components\\\\test\\\\firebaseTest\\\\getData.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\"; // 認証周りやDB周りで必要なためimportしておく\n\nimport \"firebase/auth\";\nimport \"firebase/database\";\nimport { useSelector } from \"react-redux\";\nexport default function ListComponent() {\n  const {} = useState(useSelector(state => state.tasks)); // const { data } = useFetchAllData();\n\n  const {\n    userTaskInfo\n  } = useSelector(state => state.tasks); // useEffect(() => {\n  // // dataを取ってくる\n  // if (userId != '' && !!data) {\n  //   console.log(userId);\n  //   console.log(\"getData.tsx data\");\n  //   console.log(data);\n  //   // setUT(useSelector((state: RootState) => state.tasks));\n  //   // dispatch(init(data));\n  // }\n  // },[userId]);\n  // ここでstateを使うならログイン時にDBから取得したデータをReduxに保管する必要がある。\n  // useCallback(() => {\n  //     userTask = useSelector((state: RootState) => state.tasks);\n  // }, [userId]);\n\n  console.log(\"getData userTaskInfo\");\n  console.log(userTaskInfo); // data ? console.log(data.userTaskInfo) : console.log('noo');\n  // object形式なので使いやすいように{key, value}形式のリストに変換する\n  // また、データが変わらない限り結果は同じなのでメモ化しておく\n  // const dataList = useMemo(() => Object.entries(data || {}).map(([key, value]) => ({ key, value })), [data]);\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 12\n    }\n  }, \"test\"); // return <div>{userTaskInfo.calendar[0].PatternId}</div>;\n  // <dl>{dataList.map(({ key, value }) =>\n  //   <React.Fragment key={`${key}${value}`}>\n  //     <dt>key: {key}</dt>\n  //     <dt>value: {value}</dt>\n  //   </React.Fragment>\n  // )}</dl>\n}","map":{"version":3,"sources":["C:/Users/blelm/Desktop/AppCreate/habitPlan/src/components/test/firebaseTest/getData.tsx"],"names":["React","useState","useSelector","ListComponent","state","tasks","userTaskInfo","console","log"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC,C,CACA;;AACA,OAAO,eAAP;AACA,OAAO,mBAAP;AACA,SAAsBC,WAAtB,QAAyC,aAAzC;AAKA,eAAe,SAASC,aAAT,GAAyB;AACpC,QAAM,KAAKF,QAAQ,CACfC,WAAW,CAAEE,KAAD,IAAsBA,KAAK,CAACC,KAA7B,CADI,CAAnB,CADoC,CAIpC;;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAmBJ,WAAW,CAAEE,KAAD,IAAsBA,KAAK,CAACC,KAA7B,CAApC,CALoC,CAMpC;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACF;AAEA;AACA;AACA;AACA;;AAEAE,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYF,YAAZ,EAvBoC,CAwBpC;AACA;AACA;AACA;;AAEA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP,CA7BoC,CA8BpC;AACA;AACA;AACA;AACA;AACA;AACA;AACH","sourcesContent":["import React, { useState } from \"react\";\r\n// 認証周りやDB周りで必要なためimportしておく\r\nimport \"firebase/auth\";\r\nimport \"firebase/database\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../modules/rootReducer\";\r\n\r\n\r\n\r\nexport default function ListComponent() {\r\n    const [] = useState(\r\n        useSelector((state: RootState) => state.tasks)\r\n    );\r\n    // const { data } = useFetchAllData();\r\n    const { userTaskInfo } = useSelector((state: RootState) => state.tasks);\r\n    // useEffect(() => {\r\n      // // dataを取ってくる\r\n      // if (userId != '' && !!data) {\r\n      //   console.log(userId);\r\n      //   console.log(\"getData.tsx data\");\r\n      //   console.log(data);\r\n      //   // setUT(useSelector((state: RootState) => state.tasks));\r\n      //   // dispatch(init(data));\r\n      // }\r\n    // },[userId]);\r\n    \r\n    // ここでstateを使うならログイン時にDBから取得したデータをReduxに保管する必要がある。\r\n    // useCallback(() => {\r\n    //     userTask = useSelector((state: RootState) => state.tasks);\r\n    // }, [userId]);\r\n\r\n    console.log(\"getData userTaskInfo\");\r\n    console.log(userTaskInfo);\r\n    // data ? console.log(data.userTaskInfo) : console.log('noo');\r\n    // object形式なので使いやすいように{key, value}形式のリストに変換する\r\n    // また、データが変わらない限り結果は同じなのでメモ化しておく\r\n    // const dataList = useMemo(() => Object.entries(data || {}).map(([key, value]) => ({ key, value })), [data]);\r\n\r\n    return <div>test</div>;\r\n    // return <div>{userTaskInfo.calendar[0].PatternId}</div>;\r\n    // <dl>{dataList.map(({ key, value }) =>\r\n    //   <React.Fragment key={`${key}${value}`}>\r\n    //     <dt>key: {key}</dt>\r\n    //     <dt>value: {value}</dt>\r\n    //   </React.Fragment>\r\n    // )}</dl>\r\n}\r\n"]},"metadata":{},"sourceType":"module"}