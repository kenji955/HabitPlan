{"ast":null,"code":"var _s = $RefreshSig$(),\n    _jsxFileName = \"C:\\\\Users\\\\blelm\\\\Desktop\\\\AppCreate\\\\habitPlan\\\\src\\\\components\\\\test\\\\firebaseTest\\\\FirebaseAuthComponent.tsx\",\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { firebase } from \"./firebaseTest\";\nimport { logout } from \"../../../modules/userModule\";\nimport { allDelete } from \"../../../modules/tasksModule\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nvar useReduxFetch = function useReduxFetch() {\n  _s();\n\n  var dispatch = useDispatch();\n  return dispatch;\n}; // ログイン、ログアウトボタン実装\n\n\n_s(useReduxFetch, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n  return [useDispatch];\n});\n\nexport default function FirebaseAuthComponent() {\n  _s2();\n\n  var loggedin = useFirebaseLogin();\n  var dispatch = useReduxFetch();\n\n  if (!loggedin) {\n    // ログインしていなければログインボタンを表示\n    return __jsx(\"button\", {\n      onClick: function onClick() {\n        return signInWithPopup();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 16\n      }\n    }, \"\\u30ED\\u30B0\\u30A4\\u30F3\");\n  } // ログインしているならログアウトボタンを表示\n\n\n  return __jsx(\"button\", {\n    onClick: function onClick() {\n      return signOut(dispatch);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 12\n    }\n  }, \"\\u30ED\\u30B0\\u30A2\\u30A6\\u30C8\");\n} // ログイン処理\n\n_s2(FirebaseAuthComponent, \"ULNQM9Iu5BrL29nS1HfjJ1UL3qM=\", false, function () {\n  return [useFirebaseLogin, useReduxFetch];\n});\n\n_c = FirebaseAuthComponent;\n\nvar signInWithPopup = function signInWithPopup() {\n  // Googleプロバイダオブジェクトのインスタンスを作成\n  var googleAuthProvider = new firebase.auth.GoogleAuthProvider(); // dispatch(login(userIdCheck));\n  // 別タブでログイン画面に飛ばしたいため、signInWithPopupを使う\n  // リダイレクトでログイン画面に飛ばしたい場合はsignInWithRedirectを使う\n\n  return firebase.auth().signInWithPopup(googleAuthProvider);\n}; // ログアウト処理\n\n\nexport var signOut = function signOut(dispatch) {\n  // signOutを呼び出すだけでOK\n  // const dispatch = useReduxFetch();\n  dispatch(logout());\n  dispatch(allDelete());\n  return firebase.auth().signOut();\n}; // ログインしているかチェックするカスタムフックを作る\n\nvar useFirebaseLogin = function useFirebaseLogin() {\n  _s3();\n\n  // stateでログイン状態を保持\n  var _useState = useState(false),\n      loggedin = _useState[0],\n      setLoggedin = _useState[1];\n\n  var dispatch = useReduxFetch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.tasks;\n  }),\n      userTaskInfo = _useSelector.userTaskInfo;\n\n  useEffect(function () {\n    // 現在ログインしているユーザを取得\n    firebase.auth().onAuthStateChanged(function (user) {\n      // ユーザ情報が取れればログイン状態\n      var userIdCheck;\n      console.log('FAC !!user');\n      console.log(!!user);\n\n      if (!!user) {\n        userIdCheck = user.uid; // console.log('data');\n        // console.log(data);\n        // dispatch(init(data));\n\n        console.log('FAC userTaskInfo.calendar[0].PatternId'); // console.log(userTaskInfo.calendar[0].PatternId);\n        // これをreduxで管理する\n        // dispatch(login(userIdCheck));\n      }\n\n      setLoggedin(!!user);\n    });\n  }, []); // ログイン情報を返却\n\n  return loggedin;\n};\n\n_s3(useFirebaseLogin, \"/Yur4+pNau2tN5kBRRt+lQGds3I=\", false, function () {\n  return [useReduxFetch, useSelector];\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"FirebaseAuthComponent\");","map":{"version":3,"sources":["C:/Users/blelm/Desktop/AppCreate/habitPlan/src/components/test/firebaseTest/FirebaseAuthComponent.tsx"],"names":["React","useState","useEffect","firebase","logout","allDelete","useSelector","useDispatch","useReduxFetch","dispatch","FirebaseAuthComponent","loggedin","useFirebaseLogin","signInWithPopup","signOut","googleAuthProvider","auth","GoogleAuthProvider","setLoggedin","state","tasks","userTaskInfo","onAuthStateChanged","user","userIdCheck","console","log","uid"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAAgBC,MAAhB,QAA8B,6BAA9B;AACA,SAAeC,SAAf,QAAgC,8BAAhC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;;AAKA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAAA;;AACxB,MAAMC,QAAQ,GAAGF,WAAW,EAA5B;AACA,SAAOE,QAAP;AACH,CAHD,C,CAKA;;;GALMD,a;UACeD,W;;;AAKrB,eAAe,SAASG,qBAAT,GAAiC;AAAA;;AAC5C,MAAMC,QAAQ,GAAGC,gBAAgB,EAAjC;AACA,MAAMH,QAAQ,GAAGD,aAAa,EAA9B;;AACA,MAAI,CAACG,QAAL,EAAe;AACX;AACA,WAAO;AAAQ,MAAA,OAAO,EAAE;AAAA,eAAME,eAAe,EAArB;AAAA,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAAP;AACH,GAN2C,CAO5C;;;AACA,SAAO;AAAQ,IAAA,OAAO,EAAE;AAAA,aAAMC,OAAO,CAACL,QAAD,CAAb;AAAA,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAAP;AACH,C,CAED;;IAXwBC,qB;UACHE,gB,EACAJ,a;;;KAFGE,qB;;AAYxB,IAAMG,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC1B;AACA,MAAME,kBAAkB,GAAG,IAAIZ,QAAQ,CAACa,IAAT,CAAcC,kBAAlB,EAA3B,CAF0B,CAI1B;AACA;AACA;;AACA,SAAOd,QAAQ,CAACa,IAAT,GAAgBH,eAAhB,CAAgCE,kBAAhC,CAAP;AACH,CARD,C,CAUA;;;AACA,OAAO,IAAMD,OAAO,GAAG,SAAVA,OAAU,CAACL,QAAD,EAA6B;AAChD;AACA;AACAA,EAAAA,QAAQ,CAACL,MAAM,EAAP,CAAR;AACAK,EAAAA,QAAQ,CAACJ,SAAS,EAAV,CAAR;AACA,SAAOF,QAAQ,CAACa,IAAT,GAAgBF,OAAhB,EAAP;AACH,CANM,C,CAQP;;AACA,IAAMF,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAAA;;AAC3B;AAD2B,kBAEKX,QAAQ,CAAC,KAAD,CAFb;AAAA,MAEpBU,QAFoB;AAAA,MAEVO,WAFU;;AAG3B,MAAMT,QAAQ,GAAGD,aAAa,EAA9B;;AAH2B,qBAKFF,WAAW,CAAC,UAACa,KAAD;AAAA,WAAsBA,KAAK,CAACC,KAA5B;AAAA,GAAD,CALT;AAAA,MAKnBC,YALmB,gBAKnBA,YALmB;;AAO3BnB,EAAAA,SAAS,CAAC,YAAM;AACZ;AACAC,IAAAA,QAAQ,CAACa,IAAT,GAAgBM,kBAAhB,CAAmC,UAACC,IAAD,EAAU;AACzC;AACA,UAAIC,WAAJ;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY,CAAC,CAACH,IAAd;;AACA,UAAI,CAAC,CAACA,IAAN,EAAY;AACRC,QAAAA,WAAW,GAAGD,IAAI,CAACI,GAAnB,CADQ,CAER;AACA;AACA;;AACAF,QAAAA,OAAO,CAACC,GAAR,CAAY,wCAAZ,EALQ,CAMR;AACA;AACA;AACH;;AAEDR,MAAAA,WAAW,CAAC,CAAC,CAACK,IAAH,CAAX;AACH,KAjBD;AAkBH,GApBQ,EAoBN,EApBM,CAAT,CAP2B,CA4B3B;;AACA,SAAOZ,QAAP;AACH,CA9BD;;IAAMC,gB;UAGeJ,a,EAEQF,W","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { firebase } from \"./firebaseTest\";\r\nimport { login, logout } from \"../../../modules/userModule\";\r\nimport { init, allDelete } from \"../../../modules/tasksModule\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { RootState } from \"../../../modules/rootReducer\";\r\nimport { useFetchAllData } from \"./DBFetch\";\r\nimport { Dispatch } from \"@reduxjs/toolkit\";\r\n\r\nconst useReduxFetch = () => {\r\n    const dispatch = useDispatch();\r\n    return dispatch;\r\n};\r\n\r\n// ログイン、ログアウトボタン実装\r\nexport default function FirebaseAuthComponent() {\r\n    const loggedin = useFirebaseLogin();\r\n    const dispatch = useReduxFetch();\r\n    if (!loggedin) {\r\n        // ログインしていなければログインボタンを表示\r\n        return <button onClick={() => signInWithPopup()}>ログイン</button>;\r\n    }\r\n    // ログインしているならログアウトボタンを表示\r\n    return <button onClick={() => signOut(dispatch)}>ログアウト</button>;\r\n}\r\n\r\n// ログイン処理\r\nconst signInWithPopup = () => {\r\n    // Googleプロバイダオブジェクトのインスタンスを作成\r\n    const googleAuthProvider = new firebase.auth.GoogleAuthProvider();\r\n\r\n    // dispatch(login(userIdCheck));\r\n    // 別タブでログイン画面に飛ばしたいため、signInWithPopupを使う\r\n    // リダイレクトでログイン画面に飛ばしたい場合はsignInWithRedirectを使う\r\n    return firebase.auth().signInWithPopup(googleAuthProvider);\r\n};\r\n\r\n// ログアウト処理\r\nexport const signOut = (dispatch: Dispatch<any>) => {\r\n    // signOutを呼び出すだけでOK\r\n    // const dispatch = useReduxFetch();\r\n    dispatch(logout());\r\n    dispatch(allDelete());\r\n    return firebase.auth().signOut();\r\n};\r\n\r\n// ログインしているかチェックするカスタムフックを作る\r\nconst useFirebaseLogin = () => {\r\n    // stateでログイン状態を保持\r\n    const [loggedin, setLoggedin] = useState(false);\r\n    const dispatch = useReduxFetch();\r\n\r\n    const { userTaskInfo } = useSelector((state: RootState) => state.tasks);\r\n\r\n    useEffect(() => {\r\n        // 現在ログインしているユーザを取得\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            // ユーザ情報が取れればログイン状態\r\n            let userIdCheck: string;\r\n            console.log('FAC !!user');\r\n            console.log(!!user);\r\n            if (!!user) {\r\n                userIdCheck = user.uid;\r\n                // console.log('data');\r\n                // console.log(data);\r\n                // dispatch(init(data));\r\n                console.log('FAC userTaskInfo.calendar[0].PatternId');\r\n                // console.log(userTaskInfo.calendar[0].PatternId);\r\n                // これをreduxで管理する\r\n                // dispatch(login(userIdCheck));\r\n            }\r\n\r\n            setLoggedin(!!user);\r\n        });\r\n    }, []);\r\n    // ログイン情報を返却\r\n    return loggedin;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}