{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\blelm\\\\Desktop\\\\AppCreate\\\\habitPlan\\\\src\\\\components\\\\test\\\\firebaseTest\\\\getData.tsx\";\nvar __jsx = React.createElement;\nimport React, { useCallback } from 'react';\nimport { useFetchAllData } from './DBFetch';\n// 認証周りやDB周りで必要なためimportしておく\nimport \"firebase/auth\";\nimport \"firebase/database\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { init } from '../../../modules/tasksModule';\nexport default function ListComponent() {\n  // dataを取ってくる\n  const {\n    userId\n  } = useSelector(state => state.user);\n  const dispatch = useDispatch();\n  const data = useFetchAllData();\n\n  if (!!userId) {\n    console.log('getData.tsx data.data');\n    console.log(data.data);\n    dispatch(init(data.data));\n  } // ここでstateを使うならログイン時にDBから取得したデータをReduxに保管する必要がある。\n\n\n  let userTask = useSelector(state => state.tasks);\n  useCallback(() => {\n    userTask = useSelector(state => state.tasks);\n  }, [userId]);\n  console.log('userTask');\n  console.log(userTask); // data ? console.log(data.userTaskInfo) : console.log('noo');\n  // object形式なので使いやすいように{key, value}形式のリストに変換する\n  // また、データが変わらない限り結果は同じなのでメモ化しておく\n  // const dataList = useMemo(() => Object.entries(data || {}).map(([key, value]) => ({ key, value })), [data]);\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 8\n    }\n  }, userTask.userTaskInfo.calendar[0].PatternId); // <dl>{dataList.map(({ key, value }) =>\n  //   <React.Fragment key={`${key}${value}`}>\n  //     <dt>key: {key}</dt>\n  //     <dt>value: {value}</dt>\n  //   </React.Fragment>\n  // )}</dl>\n}\n;","map":{"version":3,"sources":["C:/Users/blelm/Desktop/AppCreate/habitPlan/src/components/test/firebaseTest/getData.tsx"],"names":["React","useCallback","useFetchAllData","useDispatch","useSelector","init","ListComponent","userId","state","user","dispatch","data","console","log","userTask","tasks","userTaskInfo","calendar","PatternId"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAA4C,OAA5C;AACA,SAASC,eAAT,QAAgC,WAAhC;AAEA;AACA,OAAO,eAAP;AACA,OAAO,mBAAP;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAGA,SAASC,IAAT,QAAqB,8BAArB;AAEA,eAAe,SAASC,aAAT,GAAyB;AACtC;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAaH,WAAW,CAAEI,KAAD,IAAsBA,KAAK,CAACC,IAA7B,CAA9B;AACA,QAAMC,QAAQ,GAAGP,WAAW,EAA5B;AACA,QAAMQ,IAAI,GAAGT,eAAe,EAA5B;;AACA,MAAI,CAAC,CAACK,MAAN,EAAc;AACZK,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACA,IAAjB;AACAD,IAAAA,QAAQ,CAACL,IAAI,CAACM,IAAI,CAACA,IAAN,CAAL,CAAR;AAED,GAVqC,CAYtC;;;AACA,MAAIG,QAAQ,GAAGV,WAAW,CAAEI,KAAD,IAAsBA,KAAK,CAACO,KAA7B,CAA1B;AACAd,EAAAA,WAAW,CAAC,MAAI;AAACa,IAAAA,QAAQ,GAAGV,WAAW,CAAEI,KAAD,IAAsBA,KAAK,CAACO,KAA7B,CAAtB;AAA0D,GAAhE,EAAiE,CAACR,MAAD,CAAjE,CAAX;AAEAK,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,EAjBsC,CAkBtC;AACA;AACA;AACA;;AAEF,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMA,QAAQ,CAACE,YAAT,CAAsBC,QAAtB,CAA+B,CAA/B,EAAkCC,SAAxC,CAAP,CAvBwC,CAwBtC;AACA;AACA;AACA;AACA;AACA;AACD;AAAA","sourcesContent":["import React, { useCallback, useMemo } from 'react';\r\nimport { useFetchAllData } from './DBFetch';\r\nimport firebase from \"firebase/app\";\r\n// 認証周りやDB周りで必要なためimportしておく\r\nimport \"firebase/auth\";\r\nimport \"firebase/database\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RootState } from '../../../modules/rootReducer';\r\nimport { userTask } from '../../../modules/userTasksType';\r\nimport { init } from '../../../modules/tasksModule';\r\n\r\nexport default function ListComponent() {\r\n  // dataを取ってくる\r\n  const { userId } = useSelector((state: RootState) => state.user);\r\n  const dispatch = useDispatch();\r\n  const data = useFetchAllData();\r\n  if (!!userId) {\r\n    console.log('getData.tsx data.data');\r\n    console.log(data.data);\r\n    dispatch(init(data.data));\r\n\r\n  }\r\n\r\n  // ここでstateを使うならログイン時にDBから取得したデータをReduxに保管する必要がある。\r\n  let userTask = useSelector((state: RootState) => state.tasks);\r\n  useCallback(()=>{userTask = useSelector((state: RootState) => state.tasks)},[userId]);\r\n\r\n  console.log('userTask');\r\n  console.log(userTask);\r\n  // data ? console.log(data.userTaskInfo) : console.log('noo');\r\n  // object形式なので使いやすいように{key, value}形式のリストに変換する\r\n  // また、データが変わらない限り結果は同じなのでメモ化しておく\r\n  // const dataList = useMemo(() => Object.entries(data || {}).map(([key, value]) => ({ key, value })), [data]);\r\n\r\nreturn <div>{userTask.userTaskInfo.calendar[0].PatternId}</div>\r\n  // <dl>{dataList.map(({ key, value }) =>\r\n  //   <React.Fragment key={`${key}${value}`}>\r\n  //     <dt>key: {key}</dt>\r\n  //     <dt>value: {value}</dt>\r\n  //   </React.Fragment>\r\n  // )}</dl>\r\n};"]},"metadata":{},"sourceType":"module"}