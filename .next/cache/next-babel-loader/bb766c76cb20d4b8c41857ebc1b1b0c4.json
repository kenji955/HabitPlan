{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _detail, _detail2, _detail3, _detail4, _ref, _detail5, _detail6, _detail7, _detail8;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createSlice } from \"@reduxjs/toolkit\";\nvar initialState = {\n  userTaskInfo: {\n    calendar: _defineProperty({}, new Date(\"Thu, 22 Oct 2020 02:00:00\").getFullYear(), _defineProperty({}, new Date(\"Thu, 22 Oct 2020 02:00:00\").getMonth() + 1, (_ref = {}, _defineProperty(_ref, new Date(\"Thu, 22 Oct 2020 02:00:00\").getDate(), {\n      PatternId: 1,\n      tasks: [{\n        order: 1,\n        detail: (_detail = {}, _defineProperty(_detail, \"title\", \"title 22 1\"), _defineProperty(_detail, \"testDetail1\", \"testDetail1 22 1\"), _defineProperty(_detail, \"testDetail2\", \"testDetail1 22 1\"), _detail),\n        flug: false\n      }, {\n        order: 2,\n        detail: (_detail2 = {}, _defineProperty(_detail2, \"title\", \"title 22 2\"), _defineProperty(_detail2, \"testDetail1\", \"testDetail1 22 2\"), _defineProperty(_detail2, \"testDetail2\", \"testDetail1 22 2\"), _detail2),\n        flug: false\n      }]\n    }), _defineProperty(_ref, new Date(\"Thu, 23 Oct 2020 02:00:00\").getDate(), {\n      PatternId: 1,\n      tasks: [{\n        order: 1,\n        detail: (_detail3 = {}, _defineProperty(_detail3, \"title\", \"title 23 1\"), _defineProperty(_detail3, \"testDetail1\", \"testDetail1 23 1\"), _defineProperty(_detail3, \"testDetail2\", \"testDetail1 23 1\"), _detail3),\n        flug: false\n      }, {\n        order: 2,\n        detail: (_detail4 = {}, _defineProperty(_detail4, \"title\", \"title 23 2\"), _defineProperty(_detail4, \"testDetail1\", \"testDetail1 23 2\"), _defineProperty(_detail4, \"testDetail2\", \"testDetail1 23 2\"), _detail4),\n        flug: false\n      }]\n    }), _ref))),\n    pattern: [{\n      patternId: 1,\n      patternName: \"testPattern1\"\n    }, {\n      patternId: 2,\n      patternName: \"testPattern2\"\n    }],\n    tasks: [{\n      detail: (_detail5 = {}, _defineProperty(_detail5, \"title\", \"title 22 1\"), _defineProperty(_detail5, \"defalut\", \"defalut\"), _defineProperty(_detail5, \"testDetail1\", \"testDetail1 22 1\"), _defineProperty(_detail5, \"testDetail2\", \"testDetail1 22 1\"), _detail5),\n      patternInfo: [{\n        patternID: 1,\n        order: 1\n      }]\n    }, {\n      detail: (_detail6 = {}, _defineProperty(_detail6, \"title\", \"title 22 2\"), _defineProperty(_detail6, \"defalut\", \"defalut\"), _defineProperty(_detail6, \"testDetail1\", \"testDetail1 22 2\"), _defineProperty(_detail6, \"testDetail2\", \"testDetail1 22 2\"), _detail6),\n      patternInfo: [{\n        patternID: 1,\n        order: 2\n      }]\n    }, {\n      detail: (_detail7 = {}, _defineProperty(_detail7, \"title\", \"title 23 1\"), _defineProperty(_detail7, \"defalut\", \"defalut\"), _defineProperty(_detail7, \"testDetail1\", \"testDetail1 23 1\"), _defineProperty(_detail7, \"testDetail2\", \"testDetail1 23 1\"), _detail7),\n      patternInfo: [{\n        patternID: 2,\n        order: 1\n      }, {\n        patternID: 1,\n        order: 3\n      }]\n    }, {\n      detail: (_detail8 = {}, _defineProperty(_detail8, \"title\", \"title 23 2\"), _defineProperty(_detail8, \"defalut\", \"defalut\"), _defineProperty(_detail8, \"testDetail2\", \"testDetail1 23 2\"), _defineProperty(_detail8, \"testDetail1\", \"testDetail1 23 2\"), _detail8),\n      patternInfo: [{\n        patternID: 2,\n        order: 2\n      }]\n    }]\n  }\n}; // パターン更新時に未来に設定されているパターンの内容を更新する。\n// 更新対象はstate.calendar.tasks\n// 年月日が未来であり、かつ、パターンIDが同じものを対象に新しいパターンを登録する。\n\nvar futurePatternUpdate = function futurePatternUpdate(state) {\n  console.log(\"====futurePatternUpdateここから====\");\n  console.log(Object.keys(state.userTaskInfo.calendar));\n  var testKey = Object.keys(state.userTaskInfo.calendar);\n  var today = new Date();\n  var nowYear = today.getFullYear();\n  var nowMonth = today.getMonth() + 1;\n  var nowdate = today.getDate();\n\n  if (nowYear >= parseInt(testKey[0])) {\n    console.log('check');\n  }\n\n  console.log(\"====futurePatternUpdateここまで====\");\n};\n\nvar tasksModule = createSlice({\n  name: \"tasks\",\n  initialState: initialState,\n  reducers: {\n    init: function init(state, action) {\n      var data = action.payload;\n      console.log(\"init data\");\n      console.log(data); // state = {...data};\n      // console.log(\"init state.userTaskInfo 前\");\n      // console.log(state.userTaskInfo);\n\n      state.userTaskInfo = data; // console.log(\"init state.userTaskInfo 後\");\n      // console.log(state.userTaskInfo);\n    },\n    Register: function Register(state, action) {\n      var data = action.payload;\n      state = _objectSpread(_objectSpread({}, state), data); // console.log('state');\n      // console.log(state);\n    },\n    allDelete: function allDelete(state) {\n      state = initialState;\n      console.log(\"check allDelete\");\n    },\n    // DayPlanにてタスクをクリックした際に完了フラグをtrueに変更する処理。引数にて年、月、日、タスクのインデックス番号を受け取っている。\n    taskCheckComplete: function taskCheckComplete(state, action) {\n      var index = state.userTaskInfo.calendar[action.payload[0]][action.payload[1]][action.payload[2]].tasks.findIndex(function (tasks) {\n        return tasks.order == action.payload[3];\n      });\n      console.log(index);\n      state.userTaskInfo.calendar[action.payload[0]][action.payload[1]][action.payload[2]].tasks[index].flug = !state.userTaskInfo.calendar[action.payload[0]][action.payload[1]][action.payload[2]].tasks[index].flug;\n    },\n    // 引数はstateと年、月、日、選択されているパターンIDの4つの数値が格納された配列\n    calendarPatternRegister: function calendarPatternRegister(state, action) {\n      // stateから選択されているパターンIDが設定されているタスクを抽出する。\n      var choicePatternTasks = state.userTaskInfo.tasks.filter(function (task) {\n        return task.patternInfo.some(function (task) {\n          return task.patternID == action.payload[3];\n        });\n      }); // パターンIDに紐付くタスク一覧からカレンダーへの登録情報を抽出する。\n\n      var TodayTasks = choicePatternTasks.map(function (task) {\n        // パターンが複数登録されているタスクへの対応として、選択されているパターンIDに該当する要素だけを抽出する。\n        var taskPattern = task.patternInfo.filter(function (patternInfo) {\n          return patternInfo.patternID == action.payload[3];\n        }); // 配列のタスクと抽出したパターン情報を整形して返す。\n\n        return {\n          order: taskPattern[0].order,\n          detail: task.detail,\n          // detail2: task.detail2,\n          flug: false\n        };\n      }); // stateのMonthの連想配列に新しい日付の連想配列を追加する。\n      // 追加情報は引数の日とこれまでの処理で作成したカレンダー登録用情報\n\n      state.userTaskInfo.calendar[action.payload[0]][action.payload[1]] = _objectSpread(_objectSpread({}, state.userTaskInfo.calendar[action.payload[0]][action.payload[1]]), {}, _defineProperty({}, action.payload[2], {\n        PatternId: action.payload[3],\n        tasks: TodayTasks\n      })); // action.payload[3];\n\n      console.log(state.userTaskInfo.calendar[action.payload[0]][action.payload[1]][action.payload[2]]);\n    },\n    // タスクの詳細を設定する処理。引数のテキスト配列には[入力内容、連想配列のキー、タスクの配列を指定する数字]が格納されている。\n    taskDetailRegister: function taskDetailRegister(state, action) {\n      state.userTaskInfo.tasks[parseInt(action.payload[2])].detail = _objectSpread(_objectSpread({}, state.userTaskInfo.tasks[parseInt(action.payload[2])].detail), {}, _defineProperty({}, action.payload[1], action.payload[0]));\n    },\n    // タスクを追加する処理。引数のテキスト配列には[入力内容、連想配列のキー、タスクの配列を指定する数字]が格納されている。\n    taskRegister: function taskRegister(state, action) {\n      var registerTask = action.payload;\n      registerTask.patternInfo.map(function (content) {\n        var choicePatternTasks = state.userTaskInfo.tasks.filter(function (task) {\n          return task.patternInfo.some(function (task) {\n            return task.patternID == content.patternID;\n          });\n        });\n        content.order = choicePatternTasks.length + 1;\n      });\n      console.log(registerTask);\n      state.userTaskInfo.tasks.push(registerTask);\n    },\n    taskPatternUpdate: function taskPatternUpdate(state, action) {\n      // ここでやることは？\n      // まず引数にタスクの配列インデックス番号が必要\n      // パターンIDの配列を受け取る。\n      // 配列とstateを比較して、なければ登録。Orderは最大値+1。逆に削除されているものは除外。\n      var statePatternIdList = state.userTaskInfo.tasks[action.payload.index].patternInfo.map(function (content) {\n        return content.patternID;\n      });\n\n      var diff = function diff(olds, nexts) {\n        return {\n          adds: nexts.filter(function (e) {\n            return !olds.includes(e);\n          }),\n          subs: olds.filter(function (e) {\n            return !nexts.includes(e);\n          })\n        };\n      };\n\n      var result = diff(statePatternIdList, action.payload.newChecked);\n      var updateArray;\n      console.log(result.subs[0] == state.userTaskInfo.tasks[action.payload.index].patternInfo[0].patternID);\n      updateArray = state.userTaskInfo.tasks[action.payload.index].patternInfo.filter(function (content) {\n        return result.subs.some(function (sub) {\n          return sub != content.patternID;\n        });\n      });\n      result.adds.map(function (add) {\n        var Max = 0;\n        var choicePatternTasks = state.userTaskInfo.tasks.filter(function (task) {\n          return task.patternInfo.some(function (task) {\n            return task.patternID == add;\n          });\n        });\n        choicePatternTasks.map(function (task) {\n          var content = task.patternInfo.find(function (info) {\n            return info.patternID = add;\n          });\n          Max < content.patternID ? Max = content.patternID : \"\";\n        });\n        var pushContent = {\n          patternID: add,\n          order: Max\n        };\n        updateArray.push(pushContent);\n      });\n      state.userTaskInfo.tasks[action.payload.index].patternInfo = updateArray;\n      futurePatternUpdate(state);\n    },\n    // タスクを追加する処理。引数のテキスト配列には[入力内容、連想配列のキー、タスクの配列を指定する数字]が格納されている。\n    taskDelete: function taskDelete(state, action) {\n      var deleteTask = state.userTaskInfo.tasks.splice(action.payload, 1);\n      console.log(deleteTask);\n    },\n    // タスクを追加する処理。引数のテキスト配列には[入力内容、連想配列のキー、タスクの配列を指定する数字]が格納されている。\n    taskRemovePattern: function taskRemovePattern(state, action) {\n      console.log(\"patternId\");\n      console.log(action.payload.patternId);\n      console.log(\"detailTitle\");\n      console.log(action.payload.detailTitle);\n      var index = state.userTaskInfo.tasks.findIndex(function (content) {\n        return content.detail[\"title\"] == action.payload.detailTitle;\n      });\n      console.log(\"index\");\n      console.log(index);\n      var deletedTask = state.userTaskInfo.tasks[index].patternInfo.filter(function (content) {\n        return content.patternID != action.payload.patternId;\n      });\n      state.userTaskInfo.tasks[index].patternInfo = deletedTask;\n      console.log(deletedTask);\n      futurePatternUpdate(state);\n    }\n  }\n});\nvar _tasksModule$actions = tasksModule.actions,\n    init = _tasksModule$actions.init,\n    Register = _tasksModule$actions.Register,\n    allDelete = _tasksModule$actions.allDelete,\n    taskCheckComplete = _tasksModule$actions.taskCheckComplete,\n    calendarPatternRegister = _tasksModule$actions.calendarPatternRegister,\n    taskDetailRegister = _tasksModule$actions.taskDetailRegister,\n    taskRegister = _tasksModule$actions.taskRegister,\n    taskPatternUpdate = _tasksModule$actions.taskPatternUpdate,\n    taskDelete = _tasksModule$actions.taskDelete,\n    taskRemovePattern = _tasksModule$actions.taskRemovePattern;\nexport { init, Register, allDelete, taskCheckComplete, calendarPatternRegister, taskDetailRegister, taskRegister, taskPatternUpdate, taskDelete, taskRemovePattern };\nexport default tasksModule;","map":{"version":3,"sources":["C:/Users/blelm/Desktop/AppCreate/habitPlan/src/modules/tasksModule.tsx"],"names":["createSlice","initialState","userTaskInfo","calendar","Date","getFullYear","getMonth","getDate","PatternId","tasks","order","detail","flug","pattern","patternId","patternName","patternInfo","patternID","futurePatternUpdate","state","console","log","Object","keys","testKey","today","nowYear","nowMonth","nowdate","parseInt","tasksModule","name","reducers","init","action","data","payload","Register","allDelete","taskCheckComplete","index","findIndex","calendarPatternRegister","choicePatternTasks","filter","task","some","TodayTasks","map","taskPattern","taskDetailRegister","taskRegister","registerTask","content","length","push","taskPatternUpdate","statePatternIdList","diff","olds","nexts","adds","e","includes","subs","result","newChecked","updateArray","sub","add","Max","find","info","pushContent","taskDelete","deleteTask","splice","taskRemovePattern","detailTitle","deletedTask","actions"],"mappings":"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","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport {\r\n    calendar,\r\n    pattern,\r\n    tasks,\r\n    userTask,\r\n    userTaskInfo,\r\n} from \"./userTasksType\";\r\n\r\ntype State = {\r\n    [key: string]: string;\r\n};\r\n\r\nconst initialState: userTask = {\r\n    userTaskInfo: {\r\n        calendar: {\r\n            [new Date(\"Thu, 22 Oct 2020 02:00:00\").getFullYear()]: {\r\n                [new Date(\"Thu, 22 Oct 2020 02:00:00\").getMonth() + 1]: {\r\n                    [new Date(\"Thu, 22 Oct 2020 02:00:00\").getDate()]: {\r\n                        PatternId: 1,\r\n                        tasks: [\r\n                            {\r\n                                order: 1,\r\n                                detail: {\r\n                                    [\"title\"]: \"title 22 1\",\r\n                                    [\"testDetail1\"]: \"testDetail1 22 1\",\r\n                                    [\"testDetail2\"]: \"testDetail1 22 1\",\r\n                                },\r\n                                flug: false,\r\n                            },\r\n                            {\r\n                                order: 2,\r\n                                detail: {\r\n                                    [\"title\"]: \"title 22 2\",\r\n                                    [\"testDetail1\"]: \"testDetail1 22 2\",\r\n                                    [\"testDetail2\"]: \"testDetail1 22 2\",\r\n                                },\r\n                                flug: false,\r\n                            },\r\n                        ],\r\n                    },\r\n                    [new Date(\"Thu, 23 Oct 2020 02:00:00\").getDate()]: {\r\n                        PatternId: 1,\r\n                        tasks: [\r\n                            {\r\n                                order: 1,\r\n                                detail: {\r\n                                    [\"title\"]: \"title 23 1\",\r\n                                    [\"testDetail1\"]: \"testDetail1 23 1\",\r\n                                    [\"testDetail2\"]: \"testDetail1 23 1\",\r\n                                },\r\n                                flug: false,\r\n                            },\r\n                            {\r\n                                order: 2,\r\n                                detail: {\r\n                                    [\"title\"]: \"title 23 2\",\r\n                                    [\"testDetail1\"]: \"testDetail1 23 2\",\r\n                                    [\"testDetail2\"]: \"testDetail1 23 2\",\r\n                                },\r\n                                flug: false,\r\n                            },\r\n                        ],\r\n                    },\r\n                },\r\n            },\r\n        },\r\n\r\n        pattern: [\r\n            {\r\n                patternId: 1,\r\n                patternName: \"testPattern1\",\r\n            },\r\n            {\r\n                patternId: 2,\r\n                patternName: \"testPattern2\",\r\n            },\r\n        ],\r\n        tasks: [\r\n            {\r\n                detail: {\r\n                    [\"title\"]: \"title 22 1\",\r\n                    [\"defalut\"]: \"defalut\",\r\n                    [\"testDetail1\"]: \"testDetail1 22 1\",\r\n                    [\"testDetail2\"]: \"testDetail1 22 1\",\r\n                },\r\n                patternInfo: [\r\n                    {\r\n                        patternID: 1,\r\n                        order: 1,\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                detail: {\r\n                    [\"title\"]: \"title 22 2\",\r\n                    [\"defalut\"]: \"defalut\",\r\n                    [\"testDetail1\"]: \"testDetail1 22 2\",\r\n                    [\"testDetail2\"]: \"testDetail1 22 2\",\r\n                },\r\n                patternInfo: [\r\n                    {\r\n                        patternID: 1,\r\n                        order: 2,\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                detail: {\r\n                    [\"title\"]: \"title 23 1\",\r\n                    [\"defalut\"]: \"defalut\",\r\n                    [\"testDetail1\"]: \"testDetail1 23 1\",\r\n                    [\"testDetail2\"]: \"testDetail1 23 1\",\r\n                },\r\n                patternInfo: [\r\n                    {\r\n                        patternID: 2,\r\n                        order: 1,\r\n                    },\r\n                    {\r\n                        patternID: 1,\r\n                        order: 3,\r\n                    },\r\n                ],\r\n            },\r\n            {\r\n                detail: {\r\n                    [\"title\"]: \"title 23 2\",\r\n                    [\"defalut\"]: \"defalut\",\r\n                    [\"testDetail2\"]: \"testDetail1 23 2\",\r\n                    [\"testDetail1\"]: \"testDetail1 23 2\",\r\n                },\r\n                patternInfo: [\r\n                    {\r\n                        patternID: 2,\r\n                        order: 2,\r\n                    },\r\n                ],\r\n            },\r\n        ],\r\n    },\r\n};\r\n\r\n// パターン更新時に未来に設定されているパターンの内容を更新する。\r\n// 更新対象はstate.calendar.tasks\r\n// 年月日が未来であり、かつ、パターンIDが同じものを対象に新しいパターンを登録する。\r\nconst futurePatternUpdate = (state: userTask) => {\r\n    console.log(\"====futurePatternUpdateここから====\");\r\n\r\n    console.log(Object.keys(state.userTaskInfo.calendar));\r\n    const testKey = Object.keys(state.userTaskInfo.calendar);\r\n    const today = new Date();\r\n    const nowYear = today.getFullYear();\r\n    const nowMonth = today.getMonth() + 1;\r\n    const nowdate = today.getDate();\r\n    if(nowYear >= parseInt(testKey[0])){\r\n        console.log('check');\r\n    }\r\n\r\n    console.log(\"====futurePatternUpdateここまで====\");\r\n};\r\n\r\nconst tasksModule = createSlice({\r\n    name: \"tasks\",\r\n    initialState,\r\n    reducers: {\r\n        init(state: userTask, action: PayloadAction<userTaskInfo>) {\r\n            const data = action.payload;\r\n            console.log(\"init data\");\r\n            console.log(data);\r\n            // state = {...data};\r\n            // console.log(\"init state.userTaskInfo 前\");\r\n            // console.log(state.userTaskInfo);\r\n            state.userTaskInfo = data;\r\n            // console.log(\"init state.userTaskInfo 後\");\r\n            // console.log(state.userTaskInfo);\r\n        },\r\n        Register(state: userTask, action: PayloadAction<userTask>) {\r\n            const data = action.payload;\r\n\r\n            state = { ...state, ...data };\r\n            // console.log('state');\r\n            // console.log(state);\r\n        },\r\n        allDelete(state: userTask) {\r\n            state = initialState;\r\n            console.log(\"check allDelete\");\r\n        },\r\n        // DayPlanにてタスクをクリックした際に完了フラグをtrueに変更する処理。引数にて年、月、日、タスクのインデックス番号を受け取っている。\r\n        taskCheckComplete(state: userTask, action: PayloadAction<number[]>) {\r\n            const index = state.userTaskInfo.calendar[action.payload[0]][\r\n                action.payload[1]\r\n            ][action.payload[2]].tasks.findIndex(\r\n                (tasks) => tasks.order == action.payload[3]\r\n            );\r\n            console.log(index);\r\n            state.userTaskInfo.calendar[action.payload[0]][action.payload[1]][\r\n                action.payload[2]\r\n            ].tasks[index].flug = !state.userTaskInfo.calendar[\r\n                action.payload[0]\r\n            ][action.payload[1]][action.payload[2]].tasks[index].flug;\r\n        },\r\n        // 引数はstateと年、月、日、選択されているパターンIDの4つの数値が格納された配列\r\n        calendarPatternRegister(\r\n            state: userTask,\r\n            action: PayloadAction<number[]>\r\n        ) {\r\n            // stateから選択されているパターンIDが設定されているタスクを抽出する。\r\n            const choicePatternTasks = state.userTaskInfo.tasks.filter(\r\n                function (task) {\r\n                    return task.patternInfo.some(\r\n                        (task) => task.patternID == action.payload[3]\r\n                    );\r\n                }\r\n            );\r\n\r\n            // パターンIDに紐付くタスク一覧からカレンダーへの登録情報を抽出する。\r\n            const TodayTasks = choicePatternTasks.map((task) => {\r\n                // パターンが複数登録されているタスクへの対応として、選択されているパターンIDに該当する要素だけを抽出する。\r\n                const taskPattern = task.patternInfo.filter(function (\r\n                    patternInfo\r\n                ) {\r\n                    return patternInfo.patternID == action.payload[3];\r\n                });\r\n\r\n                // 配列のタスクと抽出したパターン情報を整形して返す。\r\n                return {\r\n                    order: taskPattern[0].order,\r\n                    detail: task.detail,\r\n                    // detail2: task.detail2,\r\n                    flug: false,\r\n                };\r\n            });\r\n\r\n            // stateのMonthの連想配列に新しい日付の連想配列を追加する。\r\n            // 追加情報は引数の日とこれまでの処理で作成したカレンダー登録用情報\r\n            state.userTaskInfo.calendar[action.payload[0]][\r\n                action.payload[1]\r\n            ] = {\r\n                ...state.userTaskInfo.calendar[action.payload[0]][\r\n                    action.payload[1]\r\n                ],\r\n                [action.payload[2]]: {\r\n                    PatternId: action.payload[3],\r\n                    tasks: TodayTasks,\r\n                },\r\n            };\r\n\r\n            // action.payload[3];\r\n            console.log(\r\n                state.userTaskInfo.calendar[action.payload[0]][\r\n                    action.payload[1]\r\n                ][action.payload[2]]\r\n            );\r\n        },\r\n        // タスクの詳細を設定する処理。引数のテキスト配列には[入力内容、連想配列のキー、タスクの配列を指定する数字]が格納されている。\r\n        taskDetailRegister(state: userTask, action: PayloadAction<string[]>) {\r\n            state.userTaskInfo.tasks[parseInt(action.payload[2])].detail = {\r\n                ...state.userTaskInfo.tasks[parseInt(action.payload[2])].detail,\r\n                [action.payload[1]]: action.payload[0],\r\n            };\r\n        },\r\n        // タスクを追加する処理。引数のテキスト配列には[入力内容、連想配列のキー、タスクの配列を指定する数字]が格納されている。\r\n        taskRegister(state: userTask, action: PayloadAction<tasks>) {\r\n            const registerTask = action.payload;\r\n            registerTask.patternInfo.map((content) => {\r\n                const choicePatternTasks = state.userTaskInfo.tasks.filter(\r\n                    function (task) {\r\n                        return task.patternInfo.some(\r\n                            (task) => task.patternID == content.patternID\r\n                        );\r\n                    }\r\n                );\r\n                content.order = choicePatternTasks.length + 1;\r\n            });\r\n            console.log(registerTask);\r\n            state.userTaskInfo.tasks.push(registerTask);\r\n        },\r\n        taskPatternUpdate(\r\n            state: userTask,\r\n            action: PayloadAction<{\r\n                newChecked: number[];\r\n                index: number;\r\n            }>\r\n        ) {\r\n            // ここでやることは？\r\n            // まず引数にタスクの配列インデックス番号が必要\r\n            // パターンIDの配列を受け取る。\r\n            // 配列とstateを比較して、なければ登録。Orderは最大値+1。逆に削除されているものは除外。\r\n\r\n            const statePatternIdList = state.userTaskInfo.tasks[\r\n                action.payload.index\r\n            ].patternInfo.map((content) => {\r\n                return content.patternID;\r\n            });\r\n            const diff = (olds: number[], nexts: number[]) => ({\r\n                adds: nexts.filter((e) => !olds.includes(e)),\r\n                subs: olds.filter((e) => !nexts.includes(e)),\r\n            });\r\n            const result = diff(statePatternIdList, action.payload.newChecked);\r\n            let updateArray: {\r\n                patternID: number;\r\n                order: number;\r\n            }[];\r\n\r\n            console.log(\r\n                result.subs[0] ==\r\n                    state.userTaskInfo.tasks[action.payload.index]\r\n                        .patternInfo[0].patternID\r\n            );\r\n            updateArray = state.userTaskInfo.tasks[\r\n                action.payload.index\r\n            ].patternInfo.filter(function (content) {\r\n                return result.subs.some((sub) => sub != content.patternID);\r\n            });\r\n\r\n            result.adds.map((add) => {\r\n                let Max: number = 0;\r\n                const choicePatternTasks = state.userTaskInfo.tasks.filter(\r\n                    function (task) {\r\n                        return task.patternInfo.some(\r\n                            (task) => task.patternID == add\r\n                        );\r\n                    }\r\n                );\r\n                choicePatternTasks.map((task) => {\r\n                    let content = task.patternInfo.find(\r\n                        (info) => (info.patternID = add)\r\n                    );\r\n                    Max < content.patternID ? (Max = content.patternID) : \"\";\r\n                });\r\n\r\n                const pushContent = { patternID: add, order: Max };\r\n                updateArray.push(pushContent);\r\n            });\r\n\r\n            state.userTaskInfo.tasks[\r\n                action.payload.index\r\n            ].patternInfo = updateArray;\r\n            futurePatternUpdate(state);\r\n        },\r\n        // タスクを追加する処理。引数のテキスト配列には[入力内容、連想配列のキー、タスクの配列を指定する数字]が格納されている。\r\n        taskDelete(state: userTask, action: PayloadAction<number>) {\r\n            const deleteTask = state.userTaskInfo.tasks.splice(\r\n                action.payload,\r\n                1\r\n            );\r\n            console.log(deleteTask);\r\n        },\r\n        // タスクを追加する処理。引数のテキスト配列には[入力内容、連想配列のキー、タスクの配列を指定する数字]が格納されている。\r\n        taskRemovePattern(\r\n            state: userTask,\r\n            action: PayloadAction<{ patternId: number; detailTitle: string }>\r\n        ) {\r\n            console.log(\"patternId\");\r\n            console.log(action.payload.patternId);\r\n            console.log(\"detailTitle\");\r\n            console.log(action.payload.detailTitle);\r\n            const index = state.userTaskInfo.tasks.findIndex((content) => {\r\n                return content.detail[\"title\"] == action.payload.detailTitle;\r\n            });\r\n            console.log(\"index\");\r\n            console.log(index);\r\n            const deletedTask = state.userTaskInfo.tasks[\r\n                index\r\n            ].patternInfo.filter(function (content) {\r\n                return content.patternID != action.payload.patternId;\r\n            });\r\n            state.userTaskInfo.tasks[index].patternInfo = deletedTask;\r\n            console.log(deletedTask);\r\n            futurePatternUpdate(state);\r\n        },\r\n    },\r\n});\r\n\r\nexport const {\r\n    init,\r\n    Register,\r\n    allDelete,\r\n    taskCheckComplete,\r\n    calendarPatternRegister,\r\n    taskDetailRegister,\r\n    taskRegister,\r\n    taskPatternUpdate,\r\n    taskDelete,\r\n    taskRemovePattern,\r\n} = tasksModule.actions;\r\n\r\nexport default tasksModule;\r\n"]},"metadata":{},"sourceType":"module"}